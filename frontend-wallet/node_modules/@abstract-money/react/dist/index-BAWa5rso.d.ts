import { AccountWalletClient, AccountPublicClient, PublicClient as PublicClient$1, ApiClient } from '@abstract-money/core/clients';
import { AccountId } from '@abstract-money/core/utils';
import * as _cosmjs_cosmwasm_stargate from '@cosmjs/cosmwasm-stargate';
import { ExecuteResult, CosmWasmClient, SigningCosmWasmClient } from '@cosmjs/cosmwasm-stargate';
import * as _cosmjs_stargate from '@cosmjs/stargate';
import { StdFee, Coin, DeliverTxResponse } from '@cosmjs/stargate';
import * as _tanstack_react_query from '@tanstack/react-query';
import { UseMutationOptions, UseMutationResult, QueryKey as QueryKey$i, UseQueryOptions, UseQueryResult } from '@tanstack/react-query';
import * as _abstract_money_core_dist_Registry_client_DeRpB8OW from '@abstract-money/core/dist/Registry.client-DeRpB8OW';
import * as _abstract_money_core_dist_Registry_types_tb_Smu0e from '@abstract-money/core/dist/Registry.types-tb_Smu0e';
import { AccountId as AccountId$1, AccountWalletClient as AccountWalletClient$1, AccountPublicClient as AccountPublicClient$1, PublicClient, WalletClient } from '@abstract-money/core';
import * as _cosmjs_proto_signing from '@cosmjs/proto-signing';
import { EncodeObject } from '@cosmjs/proto-signing';
import * as _abstract_money_core_dist_types_DL_NvWZJ from '@abstract-money/core/dist/types-DL_NvWZJ';
import { AccountTypes } from '@abstract-money/core/codegen/abstract';
import * as _abstract_money_core_dist_module_type_Dq9dh99O from '@abstract-money/core/dist/module-type-Dq9dh99O';
import * as _abstract_money_core_dist_types_CdpDSdJ3 from '@abstract-money/core/dist/types-CdpDSdJ3';

/** Combines members of an intersection into a readable type. */
type Evaluate<type> = {
    [key in keyof type]: type[key];
} & unknown;
/**
 * Makes all properties of an object optional.
 *
 * Compatible with [`exactOptionalPropertyTypes`](https://www.typescriptlang.org/tsconfig#exactOptionalPropertyTypes).
 */
type ExactPartial<type> = {
    [key in keyof type]?: type[key] | undefined;
};
type IsEqual<type1, type2> = type1 extends type2 ? type2 extends type1 ? true : false : false;
/** Strict version of built-in Omit type */
type Omit$1<type, keys extends keyof type> = Pick<type, Exclude<keyof type, keys>>;

type WithArgs<args extends {
    extra?: any;
} | undefined> = args extends undefined ? never : Evaluate<{
    extra?: args extends {
        extra?: any;
    } ? Evaluate<args['extra']> : never;
} & Evaluate<args extends {
    extra?: any;
} ? IsEqual<Omit$1<args, 'extra'>, {}> extends true ? {} : {
    args: Evaluate<Omit$1<args, 'extra'>> | undefined;
} : {
    args: args | undefined;
}>>;
type ExtractArgsFromParameters<parameters extends {
    readonly fee: number | StdFee | 'auto';
    readonly memo?: string;
    readonly funds?: (Coin & {
        [key: string]: string;
    })[];
    readonly extra?: any;
}> = Evaluate<Pick<parameters, 'fee' | 'memo' | 'funds' | 'extra'> & {
    args: Evaluate<Omit$1<parameters, 'fee' | 'memo' | 'funds' | 'extra'>>;
}>;

type UseMutationParameters<data = unknown, error = Error, variables = void, context = unknown> = Evaluate<Omit$1<UseMutationOptions<data, error, Evaluate<variables>, context>, 'mutationFn'>>;
type UseMutationReturnType<data = unknown, error = Error, variables = void, context = unknown> = Evaluate<UseMutationResult<data, error, variables, context>>;
type UseQueryParameters<queryFnData = unknown, error = Error, data = queryFnData, queryKey extends QueryKey$i = QueryKey$i> = Evaluate<ExactPartial<Omit$1<UseQueryOptions<queryFnData, error, data, queryKey>, 'initialData'>> & {
    initialData?: UseQueryOptions<queryFnData, error, data, queryKey>['initialData'] | undefined;
}>;
type UseQueryReturnType<data = unknown, error = Error> = Evaluate<UseQueryResult<data, error> & {
    queryKey: QueryKey$i;
}>;

type ClaimNamespaceMutation = ExtractArgsFromParameters<Parameters<AccountWalletClient['claimNamespace']>[0]>;
type UseClaimNamespaceParameters = {
    accountId: AccountId | undefined;
    chainName: string | undefined;
    mutation?: UseMutationParameters<ExecuteResult, unknown, ClaimNamespaceMutation>;
};
/**
 * Claim a namespace from version control on the account.
 * @param accountId
 * @param chainName
 * @param mutation
 */
declare function useClaimNamespace({ accountId, chainName, mutation, }: UseClaimNamespaceParameters): UseMutationReturnType<ExecuteResult, unknown, ClaimNamespaceMutation>;

type CreateRemoteAccountMutation = ExtractArgsFromParameters<Parameters<AccountWalletClient$1['createRemoteAccount']>[0]>;
type UseCreateRemoteAccountParameters = {
    accountId: AccountId$1 | undefined;
    chainName: string | undefined;
    mutation?: UseMutationParameters<Awaited<ReturnType<AccountWalletClient$1['createRemoteAccount']>>, unknown, CreateRemoteAccountMutation>;
};
declare function useCreateRemoteAccount({ accountId, chainName, mutation, }: UseCreateRemoteAccountParameters): _tanstack_react_query.UseMutationResult<_cosmjs_stargate.DeliverTxResponse, unknown, {
    readonly extra?: Partial<Pick<{
        apiUrl: string;
        sender: string;
        signingCosmWasmClient: _cosmjs_cosmwasm_stargate.SigningCosmWasmClient;
        accountId: _abstract_money_core_dist_Registry_types_tb_Smu0e.j;
        installModules?: _abstract_money_core_dist_Registry_client_DeRpB8OW.M[] | undefined;
        readonly fee: number | _cosmjs_stargate.StdFee | "auto";
        readonly memo?: string | undefined;
        namespace?: string | null | undefined;
        hostChainName: string;
    }, "apiUrl" | "sender" | "signingCosmWasmClient" | "accountId">> | undefined;
    readonly fee: number | _cosmjs_stargate.StdFee | "auto";
    readonly memo?: string | undefined;
    funds: unknown;
    args: {
        installModules?: _abstract_money_core_dist_Registry_client_DeRpB8OW.M[] | undefined;
        namespace?: string | null | undefined;
        hostChainName: string;
    };
}, unknown>;

type CreateSubAccountMutation = ExtractArgsFromParameters<Parameters<AccountWalletClient['createSubAccount']>[0]>;
type UseCreateSubAccountParameters = {
    accountId: AccountId | undefined;
    chainName: string | undefined;
    mutation?: UseMutationParameters<Awaited<ReturnType<AccountWalletClient['createSubAccount']>>, unknown, CreateSubAccountMutation>;
};
declare function useCreateSubAccount({ accountId, chainName, mutation, }: UseCreateSubAccountParameters): _tanstack_react_query.UseMutationResult<_cosmjs_cosmwasm_stargate.ExecuteResult, unknown, {
    readonly extra?: Partial<Pick<{
        accountId: _abstract_money_core_dist_Registry_types_tb_Smu0e.j;
        signingCosmWasmClient: _cosmjs_cosmwasm_stargate.SigningCosmWasmClient;
        apiUrl: string;
        sender: string;
        link?: string | undefined;
        name?: string | undefined;
        installModules: _abstract_money_core_dist_Registry_types_tb_Smu0e.M[];
        namespace?: string | undefined;
        description?: string | undefined;
        subAccountId?: number | undefined;
        readonly fee: number | _cosmjs_stargate.StdFee | "auto";
        readonly memo?: string | undefined;
        readonly funds?: (_cosmjs_proto_signing.Coin & {
            [key: string]: string;
        })[] | undefined;
    }, "apiUrl" | "sender" | "signingCosmWasmClient" | "accountId">> | undefined;
    readonly fee: number | _cosmjs_stargate.StdFee | "auto";
    readonly memo?: string | undefined;
    readonly funds?: (_cosmjs_proto_signing.Coin & {
        [key: string]: string;
    })[] | undefined;
    args: {
        link?: string | undefined;
        name?: string | undefined;
        installModules: _abstract_money_core_dist_Registry_types_tb_Smu0e.M[];
        namespace?: string | undefined;
        description?: string | undefined;
        subAccountId?: number | undefined;
    };
}, unknown>;

type DepositMutation = ExtractArgsFromParameters<Parameters<AccountWalletClient['deposit']>[0]>;
type UseDepositParameters = {
    accountId: AccountId | undefined;
    chainName: string | undefined;
    mutation?: UseMutationParameters<DeliverTxResponse, unknown, DepositMutation>;
};
/**
 * Hook to deposit assets to an Account.
 * @param options deposit options.
 */
declare function useDeposit({ accountId, chainName, mutation, }: UseDepositParameters): UseMutationReturnType<DeliverTxResponse, unknown, DepositMutation>;

type EnableIbcMutation = ExtractArgsFromParameters<Parameters<AccountWalletClient['enableIbc']>[0] & {
    ibcEnabled?: boolean;
}>;
type UseEnableIbcParameters = {
    accountId: AccountId | undefined;
    chainName: string | undefined;
    mutation?: UseMutationParameters<Awaited<ReturnType<AccountWalletClient['enableIbc']>>, unknown, EnableIbcMutation>;
};
/**
 * Enable IBC on the account.
 * @param accountId
 * @param chainName
 * @param mutation
 */
declare function useEnableIbc({ accountId, chainName, mutation, }: UseEnableIbcParameters): _tanstack_react_query.UseMutationResult<_cosmjs_cosmwasm_stargate.ExecuteResult, unknown, {
    readonly extra?: Partial<Pick<{
        accountId: _abstract_money_core_dist_Registry_types_tb_Smu0e.j;
        signingCosmWasmClient: _cosmjs_cosmwasm_stargate.SigningCosmWasmClient;
        apiUrl: string;
        sender: string;
        readonly fee: number | _cosmjs_stargate.StdFee | "auto";
        readonly memo?: string | undefined;
        readonly funds?: (_cosmjs_proto_signing.Coin & {
            [key: string]: string;
        })[] | undefined;
    }, "apiUrl" | "sender" | "signingCosmWasmClient" | "accountId">> | undefined;
    readonly fee: number | _cosmjs_stargate.StdFee | "auto";
    readonly memo?: string | undefined;
    readonly funds?: (_cosmjs_proto_signing.Coin & {
        [key: string]: string;
    })[] | undefined;
    args: {
        ibcEnabled?: boolean | undefined;
    };
}, unknown>;

type ExecuteMutation = ExtractArgsFromParameters<Parameters<AccountWalletClient['execute']>[0]>;
type UseExecuteParameters = {
    accountId: AccountId | undefined;
    chainName: string | undefined;
    mutation?: UseMutationParameters<DeliverTxResponse, unknown, ExecuteMutation>;
};
/**
 * Execute a msg as the account.
 * @param accountId
 * @param chainName
 * @param mutation
 */
declare function useExecute({ accountId, chainName, mutation, }: UseExecuteParameters): UseMutationReturnType<DeliverTxResponse, unknown, ExecuteMutation>;

type ExecuteOnRemoteAccountMutation = ExtractArgsFromParameters<Parameters<AccountWalletClient$1['executeOnRemote']>[0]>;
type UseExecuteOnRemoteParameters = {
    accountId: AccountId$1 | undefined;
    chainName: string | undefined;
    mutation?: UseMutationParameters<Awaited<ReturnType<AccountWalletClient$1['executeOnRemote']>>, unknown, ExecuteOnRemoteAccountMutation>;
};
/**
 * Execute {@link AccountTypes.ExecuteMsg} on a remote account.
 * @param accountId
 * @param chainName
 * @param mutation
 */
declare function useExecuteOnRemote({ accountId, chainName, mutation, }: UseExecuteOnRemoteParameters): _tanstack_react_query.UseMutationResult<_cosmjs_stargate.DeliverTxResponse, unknown, {
    readonly extra?: Partial<Pick<{
        apiUrl: string;
        sender: string;
        signingCosmWasmClient: _cosmjs_cosmwasm_stargate.SigningCosmWasmClient;
        accountId: _abstract_money_core_dist_Registry_types_tb_Smu0e.j;
        readonly fee: number | _cosmjs_stargate.StdFee | "auto";
        readonly memo?: string | undefined;
        hostChainName: string;
        accountMsg: _abstract_money_core_dist_types_DL_NvWZJ.l<AccountTypes.ExecuteMsg>;
    }, "apiUrl" | "sender" | "signingCosmWasmClient" | "accountId">> | undefined;
    readonly fee: number | _cosmjs_stargate.StdFee | "auto";
    readonly memo?: string | undefined;
    funds: unknown;
    args: {
        hostChainName: string;
        accountMsg: _abstract_money_core_dist_types_DL_NvWZJ.l<AccountTypes.ExecuteMsg>;
    };
}, unknown>;

type ExecuteOnRemoteModuleMutation = ExtractArgsFromParameters<Parameters<AccountWalletClient$1['executeOnRemoteModule']>[0]>;
type UseExecuteOnRemoteModuleParameters = {
    accountId: AccountId$1 | undefined;
    chainName: string | undefined;
    mutation?: UseMutationParameters<Awaited<ReturnType<AccountWalletClient$1['executeOnRemoteModule']>>, unknown, ExecuteOnRemoteModuleMutation>;
};
declare function useExecuteOnRemoteModule({ accountId, chainName, mutation, }: UseExecuteOnRemoteModuleParameters): _tanstack_react_query.UseMutationResult<_cosmjs_stargate.DeliverTxResponse, unknown, {
    readonly extra?: Partial<Pick<{
        apiUrl: string;
        sender: string;
        signingCosmWasmClient: _cosmjs_cosmwasm_stargate.SigningCosmWasmClient;
        accountId: _abstract_money_core_dist_Registry_types_tb_Smu0e.j;
        readonly fee: number | _cosmjs_stargate.StdFee | "auto";
        readonly memo?: string | undefined;
        hostChainName: string;
        moduleId: string;
        moduleType?: _abstract_money_core_dist_module_type_Dq9dh99O.M | undefined;
        moduleMsg: string | Record<string, unknown>;
    }, "apiUrl" | "sender" | "signingCosmWasmClient" | "accountId">> | undefined;
    readonly fee: number | _cosmjs_stargate.StdFee | "auto";
    readonly memo?: string | undefined;
    funds: unknown;
    args: {
        hostChainName: string;
        moduleId: string;
        moduleType?: _abstract_money_core_dist_module_type_Dq9dh99O.M | undefined;
        moduleMsg: string | Record<string, unknown>;
    };
}, unknown>;

type ExecuteRemoteAccountMutation = ExtractArgsFromParameters<Parameters<AccountWalletClient$1['executeRemote']>[0]>;
type UseExecuteRemoteParameters = {
    accountId: AccountId$1 | undefined;
    chainName: string | undefined;
    mutation?: UseMutationParameters<Awaited<ReturnType<AccountWalletClient$1['executeRemote']>>, unknown, ExecuteRemoteAccountMutation>;
};
/**
 * Execute CosmosMsgs as the remote account.
 * @param accountId
 * @param chainName
 * @param mutation
 */
declare function useExecuteRemote({ accountId, chainName, mutation, }: UseExecuteRemoteParameters): _tanstack_react_query.UseMutationResult<_cosmjs_stargate.DeliverTxResponse, unknown, {
    readonly extra?: Partial<Pick<{
        apiUrl: string;
        sender: string;
        signingCosmWasmClient: _cosmjs_cosmwasm_stargate.SigningCosmWasmClient;
        accountId: _abstract_money_core_dist_Registry_types_tb_Smu0e.j;
        readonly fee: number | _cosmjs_stargate.StdFee | "auto";
        readonly memo?: string | undefined;
        hostChainName: string;
        msgs: _abstract_money_core_dist_types_DL_NvWZJ.l<_abstract_money_core_dist_Registry_types_tb_Smu0e.C>;
    }, "apiUrl" | "sender" | "signingCosmWasmClient" | "accountId">> | undefined;
    readonly fee: number | _cosmjs_stargate.StdFee | "auto";
    readonly memo?: string | undefined;
    funds: unknown;
    args: {
        hostChainName: string;
        msgs: _abstract_money_core_dist_types_DL_NvWZJ.l<_abstract_money_core_dist_Registry_types_tb_Smu0e.C>;
    };
}, unknown>;

type InstallModulesMutation = ExtractArgsFromParameters<Parameters<AccountWalletClient['installModules']>[0]>;
type UseInstallModulesParameters = {
    accountId: AccountId | undefined;
    chainName: string | undefined;
    mutation?: UseMutationParameters<ExecuteResult, unknown, InstallModulesMutation>;
};
/**
 * Install modules on an account.
 * @param accountId
 * @param chainName
 * @param mutation
 */
declare function useInstallModules({ accountId, chainName, mutation, }: UseInstallModulesParameters): UseMutationReturnType<ExecuteResult, unknown, InstallModulesMutation>;

type UseRequestRemoteFundsMutation = ExtractArgsFromParameters<Parameters<AccountWalletClient['requestFundsFromRemote']>[0]>;
type UseRequestRemoteFundsParameters = {
    accountId: AccountId | undefined;
    chainName: string | undefined;
    mutation?: UseMutationParameters<Awaited<ReturnType<AccountWalletClient['requestFundsFromRemote']>>, unknown, UseRequestRemoteFundsMutation>;
};
declare function useRequestRemoteFunds({ accountId, chainName, mutation, }: UseRequestRemoteFundsParameters): _tanstack_react_query.UseMutationResult<_cosmjs_stargate.DeliverTxResponse, unknown, {
    readonly extra?: Partial<Pick<{
        apiUrl: string;
        sender: string;
        signingCosmWasmClient: _cosmjs_cosmwasm_stargate.SigningCosmWasmClient;
        accountId: _abstract_money_core_dist_Registry_types_tb_Smu0e.j;
        readonly fee: number | _cosmjs_stargate.StdFee | "auto";
        readonly memo?: string | undefined;
        hostChainName: string;
    }, "apiUrl" | "sender" | "signingCosmWasmClient" | "accountId">> | undefined;
    readonly fee: number | _cosmjs_stargate.StdFee | "auto";
    readonly memo?: string | undefined;
    funds: unknown;
    args: {
        hostChainName: string;
    };
}, unknown>;

type UseSendFundsToRemoteMutation = ExtractArgsFromParameters<Parameters<AccountWalletClient['sendFundsToRemote']>[0]>;
type UseSendFundsToRemoteParameters = {
    accountId: AccountId | undefined;
    chainName: string | undefined;
    mutation?: UseMutationParameters<Awaited<ReturnType<AccountWalletClient['sendFundsToRemote']>>, unknown, UseSendFundsToRemoteMutation>;
};
declare function useSendFundsToRemote({ accountId, chainName, mutation, }: UseSendFundsToRemoteParameters): _tanstack_react_query.UseMutationResult<_cosmjs_stargate.DeliverTxResponse, unknown, {
    readonly extra?: Partial<Pick<{
        apiUrl: string;
        sender: string;
        signingCosmWasmClient: _cosmjs_cosmwasm_stargate.SigningCosmWasmClient;
        accountId: _abstract_money_core_dist_Registry_types_tb_Smu0e.j;
        readonly fee: number | _cosmjs_stargate.StdFee | "auto";
        readonly memo?: string | undefined;
        hostChainName: string;
        assets: _abstract_money_core_dist_types_DL_NvWZJ.l<_abstract_money_core_dist_types_CdpDSdJ3.A>;
    }, "apiUrl" | "sender" | "signingCosmWasmClient" | "accountId">> | undefined;
    readonly fee: number | _cosmjs_stargate.StdFee | "auto";
    readonly memo?: string | undefined;
    funds: unknown;
    args: {
        hostChainName: string;
        assets: _abstract_money_core_dist_types_DL_NvWZJ.l<_abstract_money_core_dist_types_CdpDSdJ3.A>;
    };
}, unknown>;
/**
 * @deprecated Use `useSendFundsToRemote` instead.
 */
declare const useUseSendFundsToRemote: typeof useSendFundsToRemote;

type UpdateInfoMutation = ExtractArgsFromParameters<Parameters<AccountWalletClient['updateInfo']>[0]>;
type UseUpdateInfoParameters = {
    accountId: AccountId | undefined;
    chainName: string | undefined;
    mutation?: UseMutationParameters<Awaited<ReturnType<AccountWalletClient['updateInfo']>>, unknown, UpdateInfoMutation>;
};
declare function useUpdateInfo({ accountId, chainName, mutation, }: UseUpdateInfoParameters): _tanstack_react_query.UseMutationResult<_cosmjs_cosmwasm_stargate.ExecuteResult, unknown, {
    readonly extra?: Partial<Pick<{
        accountId: _abstract_money_core_dist_Registry_types_tb_Smu0e.j;
        signingCosmWasmClient: _cosmjs_cosmwasm_stargate.SigningCosmWasmClient;
        apiUrl: string;
        sender: string;
        description?: string | undefined;
        link?: string | undefined;
        name?: string | undefined;
        readonly fee: number | _cosmjs_stargate.StdFee | "auto";
        readonly memo?: string | undefined;
        readonly funds?: (_cosmjs_proto_signing.Coin & {
            [key: string]: string;
        })[] | undefined;
    }, "apiUrl" | "sender" | "signingCosmWasmClient" | "accountId">> | undefined;
    readonly fee: number | _cosmjs_stargate.StdFee | "auto";
    readonly memo?: string | undefined;
    readonly funds?: (_cosmjs_proto_signing.Coin & {
        [key: string]: string;
    })[] | undefined;
    args: {
        link?: string | undefined;
        name?: string | undefined;
        description?: string | undefined;
    };
}, unknown>;

type UpdateSettingsMutation = ExtractArgsFromParameters<Parameters<AccountWalletClient['enableIbc']>[0] & {
    ibcEnabled?: boolean;
}>;
type UseUpdateSettingsParameters = {
    accountId: AccountId | undefined;
    chainName: string | undefined;
    mutation?: UseMutationParameters<Awaited<ReturnType<AccountWalletClient['enableIbc']>>, unknown, UpdateSettingsMutation>;
};
/**
 * @deprecated use `useEnableIbc` instead
 * @param accountId
 * @param chainName
 * @param mutation
 */
declare function useUpdateSettings({ accountId, chainName, mutation, }: UseUpdateSettingsParameters): _tanstack_react_query.UseMutationResult<_cosmjs_cosmwasm_stargate.ExecuteResult, unknown, {
    readonly extra?: Partial<Pick<{
        accountId: _abstract_money_core_dist_Registry_types_tb_Smu0e.j;
        signingCosmWasmClient: _cosmjs_cosmwasm_stargate.SigningCosmWasmClient;
        apiUrl: string;
        sender: string;
        readonly fee: number | _cosmjs_stargate.StdFee | "auto";
        readonly memo?: string | undefined;
        readonly funds?: (_cosmjs_proto_signing.Coin & {
            [key: string]: string;
        })[] | undefined;
    }, "apiUrl" | "sender" | "signingCosmWasmClient" | "accountId">> | undefined;
    readonly fee: number | _cosmjs_stargate.StdFee | "auto";
    readonly memo?: string | undefined;
    readonly funds?: (_cosmjs_proto_signing.Coin & {
        [key: string]: string;
    })[] | undefined;
    args: {
        ibcEnabled?: boolean | undefined;
    };
}, unknown>;

type UpdateStatusMutation = ExtractArgsFromParameters<Parameters<AccountWalletClient['updateStatus']>[0]>;
type UseUpdateStatusParameters = {
    accountId: AccountId | undefined;
    chainName: string | undefined;
    mutation?: UseMutationParameters<Awaited<ReturnType<AccountWalletClient['updateStatus']>>, unknown, UpdateStatusMutation>;
};
declare function useUpdateStatus({ accountId, chainName, mutation, }: UseUpdateStatusParameters): _tanstack_react_query.UseMutationResult<_cosmjs_cosmwasm_stargate.ExecuteResult, unknown, {
    readonly extra?: Partial<Pick<{
        accountId: _abstract_money_core_dist_Registry_types_tb_Smu0e.j;
        signingCosmWasmClient: _cosmjs_cosmwasm_stargate.SigningCosmWasmClient;
        apiUrl: string;
        sender: string;
        isSuspended?: boolean | undefined;
        readonly fee: number | _cosmjs_stargate.StdFee | "auto";
        readonly memo?: string | undefined;
        readonly funds?: (_cosmjs_proto_signing.Coin & {
            [key: string]: string;
        })[] | undefined;
    }, "apiUrl" | "sender" | "signingCosmWasmClient" | "accountId">> | undefined;
    readonly fee: number | _cosmjs_stargate.StdFee | "auto";
    readonly memo?: string | undefined;
    readonly funds?: (_cosmjs_proto_signing.Coin & {
        [key: string]: string;
    })[] | undefined;
    args: {
        isSuspended?: boolean | undefined;
    };
}, unknown>;

type UpgradeModulesMutation = ExtractArgsFromParameters<Parameters<AccountWalletClient['upgradeModules']>[0]>;
type UseUpgradeModulesParameters = {
    accountId: AccountId | undefined;
    chainName: string | undefined;
    mutation?: UseMutationParameters<Awaited<ReturnType<AccountWalletClient['upgradeModules']>>, unknown, UpgradeModulesMutation>;
};
declare function useUpgradeModules({ accountId, chainName, mutation, }: UseUpgradeModulesParameters): _tanstack_react_query.UseMutationResult<_cosmjs_cosmwasm_stargate.ExecuteResult, unknown, {
    readonly extra?: Partial<Pick<{
        accountId: _abstract_money_core_dist_Registry_types_tb_Smu0e.j;
        signingCosmWasmClient: _cosmjs_cosmwasm_stargate.SigningCosmWasmClient;
        apiUrl: string;
        sender: string;
        modules: _abstract_money_core_dist_Registry_types_tb_Smu0e.b[][];
        subAccountId?: number | undefined;
        readonly fee: number | _cosmjs_stargate.StdFee | "auto";
        readonly memo?: string | undefined;
        readonly funds?: (_cosmjs_proto_signing.Coin & {
            [key: string]: string;
        })[] | undefined;
    }, "apiUrl" | "sender" | "signingCosmWasmClient" | "accountId">> | undefined;
    readonly fee: number | _cosmjs_stargate.StdFee | "auto";
    readonly memo?: string | undefined;
    readonly funds?: (_cosmjs_proto_signing.Coin & {
        [key: string]: string;
    })[] | undefined;
    args: {
        subAccountId?: number | undefined;
        modules: _abstract_money_core_dist_Registry_types_tb_Smu0e.b[][];
    };
}, unknown>;
/**
 * @deprecated use useUpgradeModules
 */
declare const useUpgradeModule: typeof useUpgradeModules;

type WithdrawMutation = ExtractArgsFromParameters<Parameters<AccountWalletClient['sendFunds']>[0]>;
type UseSendFundsParameters = {
    accountId: AccountId | undefined;
    chainName: string | undefined;
    mutation?: UseMutationParameters<DeliverTxResponse, unknown, WithdrawMutation>;
};
type UseWithdrawParameters = UseSendFundsParameters;
/**
 * Hook to send funds from an Account.
 * @param options send funds options.
 */
declare function useSendFunds({ accountId, chainName, mutation, }: UseSendFundsParameters): UseMutationReturnType<DeliverTxResponse, unknown, WithdrawMutation>;
/**
 * @deprecated use `useSendFunds` instead.
 */
declare const useWithdraw: typeof useSendFunds;

type QueryFnData$h = Awaited<ReturnType<AccountPublicClient['getAccountAddress']>>;
type QueryError$h = unknown;
type QueryData$h = QueryFnData$h;
type QueryKey$h = readonly [
    'accountAddress',
    AccountPublicClient | undefined,
    (NonNullable<Parameters<AccountPublicClient['getAccountAddress']>[0]>['extra'] | undefined)
];
type QueryOptions$h<TData = QueryData$h> = Omit<UseQueryParameters<QueryFnData$h, QueryError$h, TData, QueryKey$h>, 'queryFn'>;
type QueryResult$g<TData = QueryData$h> = UseQueryReturnType<TData, QueryError$h>;
type UseAccountAddressFromApiParameters<TData = QueryData$h> = WithArgs<Parameters<AccountPublicClient['getAccountAddress']>[0]> & {
    chainName?: string | undefined;
    query?: QueryOptions$h<TData>;
    accountId: AccountId | undefined;
};
declare function useAccountAddressFromApi<TData = QueryData$h>({ accountId, chainName, extra, query, }: UseAccountAddressFromApiParameters<TData>): QueryResult$g<TData>;
declare const useAccountAddress: typeof useAccountAddressFromApi;

type QueryFnData$g = Awaited<ReturnType<AccountPublicClient['getAccountSettings']>>;
type QueryError$g = unknown;
type QueryData$g = QueryFnData$g;
type QueryKey$g = readonly [
    'accountSettings',
    AccountPublicClient | undefined,
    (NonNullable<Parameters<AccountPublicClient['getAccountSettings']>[0]>['extra'] | undefined)
];
type QueryOptions$g<TData = QueryData$g> = Omit<UseQueryParameters<QueryFnData$g, QueryError$g, TData, QueryKey$g>, 'queryFn'>;
type QueryResult$f<TData = QueryData$g> = UseQueryReturnType<TData, QueryError$g>;
type UseAccountSettingsParameters<TData = QueryData$g> = WithArgs<Parameters<AccountPublicClient['getAccountSettings']>[0]> & {
    accountId: AccountId | undefined;
    chainName: string | undefined;
    query?: QueryOptions$g<TData>;
};
declare function useAccountSettings<TData = QueryData$g>({ accountId, extra, chainName, query, }: UseAccountSettingsParameters<TData>): QueryResult$f<TData>;

type QueryFnData$f = Awaited<ReturnType<AccountPublicClient['predictModuleAddress']>>;
type QueryError$f = unknown;
type QueryData$f = QueryFnData$f;
type QueryKey$f = readonly [
    'predictModuleAddress',
    AccountPublicClient | undefined,
    UsePredictModuleAddressParameters['args'],
    (Parameters<AccountPublicClient['predictModuleAddress']>[0]['extra'] | undefined)
];
type QueryOptions$f<TData = QueryData$f> = UseQueryParameters<QueryFnData$f, QueryError$f, TData, QueryKey$f>;
type QueryResult$e<TData = QueryData$f> = UseQueryReturnType<TData, QueryError$f>;
type UsePredictModuleAddressParameters<TData = QueryData$f> = WithArgs<Parameters<AccountPublicClient['predictModuleAddress']>[0]> & {
    query?: QueryOptions$f<TData>;
    chainName: string | undefined;
    accountId: AccountId | undefined;
};
declare function usePredictModuleAddress<TData = QueryData$f>({ args, accountId, chainName, extra, query, }: UsePredictModuleAddressParameters<TData>): QueryResult$e<TData>;
/**
 * @deprecated
 */
declare const useModuleInstantiate2AddressFromApi: typeof usePredictModuleAddress;
/**
 * @deprecated
 */
declare const useModuleInstantiate2Address: typeof usePredictModuleAddress;

type QueryFnData$e = Awaited<ReturnType<AccountPublicClient['getModules']>>;
type QueryError$e = unknown;
type QueryData$e = QueryFnData$e;
type QueryKey$e = readonly [
    'modules',
    AccountPublicClient | undefined,
    NonNullable<Parameters<AccountPublicClient['getModules']>[0]>['extra']
];
type QueryOptions$e<TData = QueryData$e> = Omit<UseQueryParameters<QueryFnData$e, QueryError$e, TData, QueryKey$e>, 'queryFn'>;
type QueryResult$d<TData = QueryData$e> = UseQueryReturnType<TData, QueryError$e>;
type UseModulesParameters<TData = QueryData$e> = WithArgs<Parameters<AccountPublicClient['getModules']>[0]> & {
    accountId: AccountId | undefined;
    chainName: string | undefined;
    query?: QueryOptions$e<TData>;
};
declare function useModules<TData = QueryData$e>({ accountId, chainName, extra, query, }: UseModulesParameters<TData>): QueryResult$d<TData>;

type QueryFnData$d = Awaited<ReturnType<AccountPublicClient$1['getRemoteAccountIds']>>;
type QueryError$d = unknown;
type QueryData$d = QueryFnData$d;
type QueryKey$d = readonly [
    'getRemoteAccountIds',
    AccountPublicClient$1 | undefined,
    (NonNullable<Parameters<AccountPublicClient$1['getRemoteAccountIds']>[0]>['extra'] | undefined)
];
type QueryOptions$d<TData = QueryData$d> = Omit<UseQueryOptions<QueryFnData$d, QueryError$d, TData, QueryKey$d>, 'queryFn'>;
type QueryResult$c<TData = QueryData$d> = UseQueryResult<TData, QueryError$d>;
type UseRemoteAccountIdsParameters<TData = QueryData$d> = WithArgs<Parameters<AccountPublicClient$1['getRemoteAccountIds']>[0]> & {
    query?: QueryOptions$d<TData>;
    chainName: string | undefined;
    accountId: AccountId$1 | undefined;
};
declare function useRemoteAccountIds<TData = QueryData$d>({ accountId, extra, chainName, query, }: UseRemoteAccountIdsParameters<TData>): QueryResult$c<TData>;

type QueryFnData$c = Awaited<ReturnType<AccountPublicClient$1['getRemoteAccounts']>>;
type QueryError$c = unknown;
type QueryData$c = QueryFnData$c;
type QueryKey$c = readonly [
    'getRemoteAccounts',
    AccountPublicClient$1 | undefined,
    (NonNullable<Parameters<AccountPublicClient$1['getRemoteAccounts']>[0]>['extra'] | undefined)
];
type QueryOptions$c<TData = QueryData$c> = Omit<UseQueryOptions<QueryFnData$c, QueryError$c, TData, QueryKey$c>, 'queryFn'>;
type QueryResult$b<TData = QueryData$c> = UseQueryResult<TData, QueryError$c>;
type UseRemoteAccountsParameters<TData = QueryData$c> = WithArgs<Parameters<AccountPublicClient$1['getRemoteAccounts']>[0]> & {
    query?: QueryOptions$c<TData>;
    chainName: string | undefined;
    accountId: AccountId$1 | undefined;
};
/**
 * Get the proxy addresses of the remote accounts.
 * @param accountId
 * @param extra
 * @param chainName
 * @param query
 */
declare function useRemoteAccounts<TData = QueryData$c>({ accountId, extra, chainName, query, }: UseRemoteAccountsParameters<TData>): QueryResult$b<TData>;

type SimulateExecuteRemoteAccountMutation = Parameters<AccountPublicClient['simulateExecuteRemoteAccount']>[0];
type SimulatedReturn$1 = Awaited<ReturnType<AccountPublicClient['simulateExecuteRemoteAccount']>>;
type UseSimulateExecuteRemoteAccountParameters = {
    accountId: AccountId | undefined;
    chainName: string | undefined;
    mutation?: UseMutationParameters<SimulatedReturn$1, unknown, SimulateExecuteRemoteAccountMutation>;
};
/**
 * Simulate a message to be executed on a manager on a remote chain.
 * @param accountId
 * @param chainName
 * @param mutation
 */
declare function useSimulateExecuteRemoteAccount({ accountId, chainName, mutation, }: UseSimulateExecuteRemoteAccountParameters): UseMutationReturnType<SimulatedReturn$1, unknown, SimulateExecuteRemoteAccountMutation>;

type QueryFnData$b = Awaited<ReturnType<AccountPublicClient['getSubAccountIds']>>;
type QueryError$b = unknown;
type QueryData$b = QueryFnData$b;
type UseSubAccountIdsFromApiParameters<TData = QueryData$b> = WithArgs<Parameters<AccountPublicClient['getSubAccountIds']>[0]> & {
    query?: QueryOptions$b<TData>;
    chainName: string | undefined;
    accountId: AccountId | undefined;
};
type QueryKey$b = readonly [
    'getSubAccountIdsFromApi',
    AccountPublicClient | undefined,
    NonNullable<Parameters<AccountPublicClient['getSubAccountIds']>[0]>['extra']
];
type QueryOptions$b<TData = QueryData$b> = Omit<UseQueryParameters<QueryFnData$b, QueryError$b, TData, QueryKey$b>, 'queryFn'>;
type QueryResult$a<TData = QueryData$b> = UseQueryReturnType<TData, QueryError$b>;
declare function useSubAccountIdsFromApi<TData = QueryData$b>({ accountId, chainName, extra, query, }: UseSubAccountIdsFromApiParameters<TData>): QueryResult$a<TData>;

type QueryFnData$a = Awaited<ReturnType<PublicClient['getCosmWasmClient']>>;
type QueryError$a = unknown;
type QueryData$a = QueryFnData$a;
type QueryKey$a = readonly [
    'cosmWasmClient',
    MaybeChainName,
    PublicClient | undefined
];
type QueryResult$9 = UseQueryReturnType<QueryData$a, QueryError$a>;
type QueryOptions$a = UseQueryParameters<QueryFnData$a, QueryError$a, QueryData$a, QueryKey$a>;
type UseCosmWasmClientParameters = {
    chainName?: string | undefined;
    query?: QueryOptions$a;
};
declare function useCosmWasmClient({ chainName, query, }: UseCosmWasmClientParameters): QueryResult$9;

type QueryFnData$9 = Record<string, unknown>;
type QueryError$9 = unknown;
type QueryData$9 = QueryFnData$9;
type QueryKey$9 = readonly [
    'smartQuery',
    MaybeChainName,
    CosmWasmClient | undefined,
    string,
    Record<string, unknown>
];
type QueryResult$8<TData = QueryData$9> = UseQueryReturnType<TData, QueryError$9>;
type QueryOptions$9<TData = QueryData$9> = UseQueryParameters<QueryFnData$9, QueryError$9, TData, QueryKey$9>;
type UseSmartQueryParameters<TData = QueryData$9> = {
    chainName?: string | undefined;
    query?: QueryOptions$9<TData>;
    address: string;
    queryMsg: Record<string, unknown>;
};
declare function useSmartQuery<TData = QueryData$9>({ chainName, query, address, queryMsg, }: UseSmartQueryParameters<TData>): QueryResult$8<TData>;

type QueryFnData$8 = Awaited<ReturnType<PublicClient$1['getAbstractModuleVersion']>>;
type QueryError$8 = unknown;
type QueryData$8 = QueryFnData$8;
type QueryKey$8 = readonly [
    'abstractModuleVersion',
    MaybeChainName,
    PublicClient$1 | undefined,
    UseAbstractModuleVersionParameters['args'],
    Parameters<PublicClient$1['getAbstractModuleVersion']>[0]['extra']
];
type QueryOptions$8<TData = QueryData$8> = UseQueryParameters<QueryFnData$8, QueryError$8, TData, QueryKey$8>;
type UseAbstractModuleVersionParameters<TData = QueryData$8> = WithArgs<Parameters<PublicClient$1['getAbstractModuleVersion']>[0]> & {
    chainName?: string | undefined;
    query?: QueryOptions$8<TData>;
};
declare function useAbstractModuleVersion<TData = QueryData$8>({ args, extra, chainName, query, }: UseAbstractModuleVersionParameters<TData>): UseQueryReturnType<TData, unknown>;

type QueryFnData$7 = Awaited<ReturnType<PublicClient$1['getAccountsAddresses']>>;
type QueryError$7 = unknown;
type QueryData$7 = QueryFnData$7;
type QueryKey$7 = readonly [
    'accountAddress',
    MaybeChainName,
    PublicClient$1 | undefined,
    WithArgs<Parameters<PublicClient$1['getAccountsAddresses']>[0]>['args'],
    (NonNullable<Parameters<PublicClient$1['getAccountsAddresses']>[0]>['extra'] | undefined)
];
type QueryOptions$7<TData = QueryData$7> = Omit<UseQueryParameters<QueryFnData$7, QueryError$7, TData, QueryKey$7>, 'queryFn'>;
type QueryResult$7<TData = QueryData$7> = UseQueryReturnType<TData, QueryError$7>;
type UseAccountsAddressesFromApiParameters<TData = QueryData$7> = WithArgs<Parameters<PublicClient$1['getAccountsAddresses']>[0]> & {
    chainName?: string | undefined;
    query?: QueryOptions$7<TData>;
};
declare function useAccountsAddressesFromApi<TData = QueryData$7>({ chainName, args, extra, query, }: UseAccountsAddressesFromApiParameters<TData>): QueryResult$7<TData>;

type QueryFnData$6 = Awaited<ReturnType<PublicClient['getRemoteHosts']>>;
type QueryError$6 = unknown;
type QueryData$6 = QueryFnData$6;
type QueryKey$6 = readonly [
    'getRemoteHosts',
    MaybeChainName,
    PublicClient | undefined,
    (NonNullable<Parameters<PublicClient['getRemoteHosts']>[0]>['extra'] | undefined)
];
type QueryOptions$6<TData = QueryData$6> = Omit<UseQueryParameters<QueryFnData$6, QueryError$6, TData, QueryKey$6>, 'queryFn'>;
type QueryResult$6<TData = QueryData$6> = UseQueryReturnType<TData, QueryError$6>;
type UseRemoteHostsParameters<TData = QueryData$6> = WithArgs<Parameters<PublicClient['getRemoteHosts']>[0]> & {
    chainName?: string | undefined;
    query?: QueryOptions$6<TData>;
};
declare function useRemoteHosts<TData = QueryData$6>({ chainName, extra, query, }: UseRemoteHostsParameters<TData>): QueryResult$6<TData>;

type SimulateRemoteMutation = Parameters<PublicClient['simulateRemoteCosmosMsg']>[0];
type UseSimulateRemoteMsgParameters = {
    chainName: string | undefined;
    mutation?: UseMutationParameters<Awaited<ReturnType<PublicClient['simulateRemoteCosmosMsg']>>, unknown, SimulateRemoteMutation>;
};
type SimulatedReturn = Awaited<ReturnType<PublicClient['simulateRemoteCosmosMsg']>>;
/**
 * Simulate a message to be executed on a remote chain by the ibc host.
 * @param chainName local chain name
 * @param mutation
 */
declare function useSimulateRemoteMsg({ chainName, mutation, }: UseSimulateRemoteMsgParameters): UseMutationReturnType<SimulatedReturn, unknown, SimulateRemoteMutation>;

type QueryFnData$5 = Awaited<ReturnType<PublicClient$1['predictAccountAddress']>>;
type QueryError$5 = unknown;
type QueryData$5 = QueryFnData$5;
type QueryKey$5 = readonly [
    'predictAccountAddress',
    PublicClient$1 | undefined,
    WithArgs<Parameters<PublicClient$1['predictAccountAddress']>[0]>['args'],
    (NonNullable<Parameters<PublicClient$1['predictAccountAddress']>[0]>['extra'] | undefined)
];
type QueryOptions$5<TData = QueryData$5> = UseQueryParameters<QueryFnData$5, QueryError$5, TData, QueryKey$5>;
type QueryResult$5<TData = QueryData$5> = UseQueryReturnType<TData, QueryError$5>;
type UsePredictAccountAddressParameters<TData = QueryData$5> = WithArgs<Parameters<PublicClient$1['predictAccountAddress']>[0]> & {
    query?: QueryOptions$5<TData>;
    chainName: string | undefined;
};
declare function usePredictAccountAddress<TData = QueryData$5>({ chainName, args, extra, query, }: UsePredictAccountAddressParameters<TData>): QueryResult$5<TData>;

type MaybeChainName = string | undefined;

type UseSigningCosmWasmClientParameters = {
    chainName?: string | undefined;
    query?: UseQueryParameters<SigningCosmWasmClient | undefined, unknown, SigningCosmWasmClient | undefined, readonly ['signing-cosm-wasm-client', WalletClient | undefined]>;
} | never;
declare function useSigningCosmWasmClient(
/** Pass only if you are using cosmos-kit provider, graz doesn't need one */
parameters: UseSigningCosmWasmClientParameters): UseQueryReturnType<SigningCosmWasmClient | undefined, unknown>;

type CreateAccountMutation = ExtractArgsFromParameters<Parameters<WalletClient['createAccount']>[0]>;
type UseCreateAccount = {
    chainName: string | undefined;
    mutation?: UseMutationParameters<Awaited<ReturnType<WalletClient['createAccount']>>, unknown, CreateAccountMutation>;
};
declare function useCreateAccount({ chainName, mutation }: UseCreateAccount): _tanstack_react_query.UseMutationResult<{
    accountId: _abstract_money_core_dist_types_DL_NvWZJ.A;
    accountAddress: string;
}, unknown, {
    readonly extra?: Partial<Pick<{
        signingCosmWasmClient: _cosmjs_cosmwasm_stargate.SigningCosmWasmClient;
        apiUrl: string;
        sender: string;
        enableIbc?: boolean | undefined;
        link?: string | null | undefined;
        name?: string | null | undefined;
        namespace?: string | null | undefined;
        installModules?: {
            name: string;
            namespace: string;
            version: _abstract_money_core_dist_Registry_types_tb_Smu0e.d;
            init_msg?: string | null | undefined;
        }[] | undefined;
        description?: string | null | undefined;
        accountId?: _abstract_money_core_dist_Registry_types_tb_Smu0e.j | undefined;
        authenticator?: _abstract_money_core_dist_Registry_types_tb_Smu0e.A | null | undefined;
        codeId?: number | undefined;
        owner?: ({
            monarchy: {
                monarch: string;
            };
        } | {
            sub_account: {
                account: string;
            };
        } | {
            external: {
                governance_address: string;
                governance_type: string;
            };
        } | {
            n_f_t: {
                collection_addr: string;
                token_id: string;
            };
        } | {
            abstract_account: {
                address: string;
            };
        } | {
            renounced: {};
        }) | undefined;
        readonly fee: number | _cosmjs_stargate.StdFee | "auto";
        readonly memo?: string | undefined;
        readonly funds?: (_cosmjs_proto_signing.Coin & {
            [key: string]: string;
        })[] | undefined;
    }, "apiUrl" | "sender" | "signingCosmWasmClient">> | undefined;
    readonly fee: number | _cosmjs_stargate.StdFee | "auto";
    readonly memo?: string | undefined;
    readonly funds?: (_cosmjs_proto_signing.Coin & {
        [key: string]: string;
    })[] | undefined;
    args: {
        link?: string | null | undefined;
        name?: string | null | undefined;
        accountId?: _abstract_money_core_dist_Registry_types_tb_Smu0e.j | undefined;
        installModules?: {
            name: string;
            namespace: string;
            version: _abstract_money_core_dist_Registry_types_tb_Smu0e.d;
            init_msg?: string | null | undefined;
        }[] | undefined;
        enableIbc?: boolean | undefined;
        namespace?: string | null | undefined;
        description?: string | null | undefined;
        authenticator?: _abstract_money_core_dist_Registry_types_tb_Smu0e.A | null | undefined;
        owner?: ({
            monarchy: {
                monarch: string;
            };
        } | {
            sub_account: {
                account: string;
            };
        } | {
            external: {
                governance_address: string;
                governance_type: string;
            };
        } | {
            n_f_t: {
                collection_addr: string;
                token_id: string;
            };
        } | {
            abstract_account: {
                address: string;
            };
        } | {
            renounced: {};
        }) | undefined;
        codeId?: number | undefined;
    };
}, unknown>;

type CreateAccountMonarchyMutation = ExtractArgsFromParameters<Parameters<WalletClient['createAccountMonarchy']>[0]>;
type UseCreateAccountMonarchyParameters = {
    chainName: string | undefined;
    mutation?: UseMutationParameters<Awaited<ReturnType<WalletClient['createAccountMonarchy']>>, unknown, CreateAccountMonarchyMutation>;
};
declare function useCreateAccountMonarchy({ chainName, mutation, }: UseCreateAccountMonarchyParameters): _tanstack_react_query.UseMutationResult<{
    accountId: _abstract_money_core_dist_types_DL_NvWZJ.A;
    accountAddress: string;
}, unknown, {
    readonly extra?: Partial<Pick<{
        signingCosmWasmClient: _cosmjs_cosmwasm_stargate.SigningCosmWasmClient;
        apiUrl: string;
        sender: string;
        enableIbc?: boolean | undefined;
        link?: string | null | undefined;
        name?: string | null | undefined;
        namespace?: string | null | undefined;
        installModules?: {
            name: string;
            namespace: string;
            version: _abstract_money_core_dist_Registry_types_tb_Smu0e.d;
            init_msg?: string | null | undefined;
        }[] | undefined;
        description?: string | null | undefined;
        accountId?: _abstract_money_core_dist_Registry_types_tb_Smu0e.j | undefined;
        authenticator?: _abstract_money_core_dist_Registry_types_tb_Smu0e.A | null | undefined;
        codeId?: number | undefined;
        readonly fee: number | _cosmjs_stargate.StdFee | "auto";
        readonly memo?: string | undefined;
        readonly funds?: (_cosmjs_proto_signing.Coin & {
            [key: string]: string;
        })[] | undefined;
        owner: string;
    }, "apiUrl" | "sender" | "signingCosmWasmClient">> | undefined;
    readonly fee: number | _cosmjs_stargate.StdFee | "auto";
    readonly memo?: string | undefined;
    readonly funds?: (_cosmjs_proto_signing.Coin & {
        [key: string]: string;
    })[] | undefined;
    args: {
        link?: string | null | undefined;
        name?: string | null | undefined;
        accountId?: _abstract_money_core_dist_Registry_types_tb_Smu0e.j | undefined;
        installModules?: {
            name: string;
            namespace: string;
            version: _abstract_money_core_dist_Registry_types_tb_Smu0e.d;
            init_msg?: string | null | undefined;
        }[] | undefined;
        enableIbc?: boolean | undefined;
        namespace?: string | null | undefined;
        description?: string | null | undefined;
        authenticator?: _abstract_money_core_dist_Registry_types_tb_Smu0e.A | null | undefined;
        owner: string;
        codeId?: number | undefined;
    };
}, unknown>;

type UseSenderAddressParameters = {
    chainName?: string | undefined;
    query?: UseQueryParameters<string | undefined, unknown, string | undefined, readonly ['sender-address', WalletClient | undefined]>;
} | never;
declare function useSenderAddress(parameters: UseSenderAddressParameters): UseQueryReturnType<string | undefined, unknown>;

type SignAndBroadcastMutation = {
    readonly fee: number | StdFee | 'auto';
    readonly memo?: string | undefined;
    readonly args: {
        messages: readonly EncodeObject[];
    };
};
declare function useSignAndBroadcast({ args: { chainName } }: {
    args: {
        chainName: string;
    };
}, options?: UseMutationParameters<DeliverTxResponse, unknown, SignAndBroadcastMutation>): _tanstack_react_query.UseMutationResult<DeliverTxResponse, unknown, {
    readonly fee: number | StdFee | "auto";
    readonly memo?: string | undefined;
    readonly args: {
        messages: readonly EncodeObject[];
    };
}, unknown>;

type QueryFnData$4 = Awaited<ReturnType<ApiClient['getAccountsByOwnerFromApi']>>;
type QueryError$4 = unknown;
type QueryData$4 = QueryFnData$4;
type QueryKey$4 = readonly [
    'accountsOf',
    ApiClient | undefined,
    WithArgs<Parameters<ApiClient['getAccountsByOwnerFromApi']>[0]>['args'],
    NonNullable<Parameters<ApiClient['getAccountsByOwnerFromApi']>[0]>['extra']
];
type QueryOptions$4<TData = QueryData$4> = Omit<UseQueryParameters<QueryFnData$4, QueryError$4, TData, QueryKey$4>, 'queryFn'>;
type QueryResult$4<TData = QueryData$4> = UseQueryReturnType<TData, QueryError$4>;
type UseAccountsParameters<TData = QueryData$4> = WithArgs<Parameters<ApiClient['getAccountsByOwnerFromApi']>[0]> & {
    query?: QueryOptions$4<TData>;
};
/**
 * Loads all accounts for a given owner and chain.
 * @param owner address of the owner. Will automatically translate to other chains' addresses.
 * @param chainName chain to load accounts for.
 */
declare function useAccounts<TData = QueryData$4>({ args, extra, query, }: UseAccountsParameters<TData>): QueryResult$4<TData>;

type QueryFnData$3 = Awaited<ReturnType<ApiClient['getAnsTokenFromApi']>>;
type QueryError$3 = unknown;
type QueryData$3 = QueryFnData$3;
type QueryKey$3 = readonly [
    'ansTokenFromApi',
    ApiClient | undefined,
    WithArgs<Parameters<ApiClient['getAnsTokenFromApi']>[0]>['args'],
    NonNullable<Parameters<ApiClient['getAnsTokenFromApi']>[0]>['extra']
];
type QueryOptions$3<TData = QueryData$3> = Omit<UseQueryParameters<QueryFnData$3, QueryError$3, TData, QueryKey$3>, 'queryFn'>;
type QueryResult$3<TData = QueryData$3> = UseQueryReturnType<TData, QueryError$3>;
type UseAnsTokenFromApiParameters = WithArgs<Parameters<ApiClient['getAnsTokenFromApi']>[0]> & {
    query?: QueryOptions$3;
};
declare function useAnsTokenFromApi({ args, extra, query, }: UseAnsTokenFromApiParameters): QueryResult$3;

type QueryFnData$2 = Awaited<ReturnType<ApiClient['getAccountBalancesFromApi']>>;
type QueryError$2 = unknown;
type QueryData$2 = QueryFnData$2;
type QueryKey$2 = readonly [
    'accountBalancesFromApi',
    ApiClient | undefined,
    WithArgs<Parameters<ApiClient['getAccountBalancesFromApi']>[0]>['args'],
    NonNullable<Parameters<ApiClient['getAccountBalancesFromApi']>[0]>['extra']
];
type QueryOptions$2<TData = QueryData$2> = Omit<UseQueryParameters<QueryFnData$2, QueryError$2, TData, QueryKey$2>, 'queryFn'>;
type QueryResult$2<TData = QueryData$2> = UseQueryReturnType<TData, QueryError$2>;
type UseAccountBalancesFromApiParameters<TData = QueryData$2> = WithArgs<Parameters<ApiClient['getAccountBalancesFromApi']>[0]> & {
    query?: QueryOptions$2<TData>;
};
declare function useAccountBalancesFromApi<TData = QueryData$2>({ args, extra, query, }: UseAccountBalancesFromApiParameters<TData>): QueryResult$2<TData>;

type QueryFnData$1 = Awaited<ReturnType<ApiClient['getModulesFromApi']>>;
type QueryError$1 = unknown;
type QueryData$1 = QueryFnData$1;
type QueryKey$1 = readonly [
    'modulesFromApi',
    ApiClient | undefined,
    WithArgs<Parameters<ApiClient['getModulesFromApi']>[0]>['args'],
    NonNullable<Parameters<ApiClient['getModulesFromApi']>[0]>['extra']
];
type QueryOptions$1<TData = QueryData$1> = Omit<UseQueryParameters<QueryFnData$1, QueryError$1, TData, QueryKey$1>, 'queryFn'>;
type QueryResult$1<TData = QueryData$1> = UseQueryReturnType<TData, QueryError$1>;
type UseModulesFromApiParameters<TData = QueryData$1> = WithArgs<Parameters<ApiClient['getModulesFromApi']>[0]> & {
    query?: QueryOptions$1<TData>;
};
declare function useModulesFromApi<TData = QueryData$1>({ args, extra, query, }: UseModulesFromApiParameters<TData>): QueryResult$1<TData>;

type QueryFnData = Awaited<ReturnType<ApiClient['getSubAccountIdsByModuleIdFromApi']>>;
type QueryError = unknown;
type QueryData = QueryFnData;
type QueryKey = readonly [
    'subAccountIdsByModuleIdFromApi',
    ApiClient | undefined,
    WithArgs<Parameters<ApiClient['getSubAccountIdsByModuleIdFromApi']>[0]>['args'],
    (NonNullable<Parameters<ApiClient['getSubAccountIdsByModuleIdFromApi']>[0]>['extra'])
];
type QueryOptions<TData = QueryData> = Omit<UseQueryParameters<QueryFnData, QueryError, TData, QueryKey>, 'queryFn'>;
type QueryResult<TData = QueryData> = UseQueryReturnType<TData, QueryError>;
type UseSubAccountIdsByModuleIdFromApiParameters<TData = QueryData> = WithArgs<Parameters<ApiClient['getSubAccountIdsByModuleIdFromApi']>[0]> & {
    query?: QueryOptions<TData>;
};
declare function useSubAccountIdsByModuleIdFromApi<TData = QueryData>({ args, extra, query, }: UseSubAccountIdsByModuleIdFromApiParameters<TData>): QueryResult<TData>;

export { type UseRemoteAccountsParameters as $, useUpdateInfo as A, type UseUpdateSettingsParameters as B, useUpdateSettings as C, type UseUpdateStatusParameters as D, type Evaluate as E, useUpdateStatus as F, useUpgradeModule as G, type UseUpgradeModulesParameters as H, useUpgradeModules as I, type UseSendFundsParameters as J, type UseWithdrawParameters as K, useSendFunds as L, useWithdraw as M, type UseAccountAddressFromApiParameters as N, useAccountAddressFromApi as O, useAccountAddress as P, type UseAccountSettingsParameters as Q, useAccountSettings as R, useModuleInstantiate2AddressFromApi as S, useModuleInstantiate2Address as T, type UseQueryParameters as U, type UsePredictModuleAddressParameters as V, usePredictModuleAddress as W, type UseModulesParameters as X, useModules as Y, type UseRemoteAccountIdsParameters as Z, useRemoteAccountIds as _, type UseClaimNamespaceParameters as a, useRemoteAccounts as a0, type UseSimulateExecuteRemoteAccountParameters as a1, useSimulateExecuteRemoteAccount as a2, type UseSubAccountIdsFromApiParameters as a3, useSubAccountIdsFromApi as a4, type MaybeChainName as a5, type UseCosmWasmClientParameters as a6, useCosmWasmClient as a7, type UseSmartQueryParameters as a8, useSmartQuery as a9, useModulesFromApi as aA, type UseSubAccountIdsByModuleIdFromApiParameters as aB, useSubAccountIdsByModuleIdFromApi as aC, type UseAbstractModuleVersionParameters as aa, useAbstractModuleVersion as ab, type UseAccountsAddressesFromApiParameters as ac, useAccountsAddressesFromApi as ad, type UseRemoteHostsParameters as ae, useRemoteHosts as af, type UseSimulateRemoteMsgParameters as ag, useSimulateRemoteMsg as ah, type UsePredictAccountAddressParameters as ai, usePredictAccountAddress as aj, type UseSigningCosmWasmClientParameters as ak, useSigningCosmWasmClient as al, type UseCreateAccount as am, useCreateAccount as an, type UseCreateAccountMonarchyParameters as ao, useCreateAccountMonarchy as ap, type UseSenderAddressParameters as aq, useSenderAddress as ar, useSignAndBroadcast as as, type UseAccountsParameters as at, useAccounts as au, type UseAnsTokenFromApiParameters as av, useAnsTokenFromApi as aw, type UseAccountBalancesFromApiParameters as ax, useAccountBalancesFromApi as ay, type UseModulesFromApiParameters as az, type UseCreateRemoteAccountParameters as b, useCreateRemoteAccount as c, type UseCreateSubAccountParameters as d, useCreateSubAccount as e, type UseDepositParameters as f, useDeposit as g, type UseEnableIbcParameters as h, useEnableIbc as i, type UseExecuteParameters as j, useExecute as k, type UseExecuteOnRemoteParameters as l, useExecuteOnRemote as m, type UseExecuteOnRemoteModuleParameters as n, useExecuteOnRemoteModule as o, type UseExecuteRemoteParameters as p, useExecuteRemote as q, type UseInstallModulesParameters as r, useInstallModules as s, type UseRequestRemoteFundsParameters as t, useClaimNamespace as u, useRequestRemoteFunds as v, type UseSendFundsToRemoteParameters as w, useSendFundsToRemote as x, useUseSendFundsToRemote as y, type UseUpdateInfoParameters as z };

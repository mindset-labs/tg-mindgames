"use client";

// src/hooks/account/wallet/use-claim-namespace.ts
import { useMutation } from "@tanstack/react-query";

// src/contexts/provider.ts
import * as React2 from "react";

// src/contexts/config.ts
import * as React from "react";
var ConfigContext = React.createContext(void 0);
function AbstractConfigContext({
  children,
  config
}) {
  return React.createElement(ConfigContext.Provider, {
    children,
    value: config
  });
}
function useConfig() {
  const config = React.useContext(ConfigContext);
  if (!config)
    throw new Error("`useConfig` must be used within `AbstractConfigContext`.");
  return config;
}

// src/contexts/provider.ts
function AbstractProvider({
  children,
  config
}) {
  return React2.createElement(React2.Fragment, {
    // biome-ignore lint/correctness/noChildrenProp: <explanation>
    children: React2.createElement(AbstractConfigContext, {
      config,
      children
    })
  });
}

// src/hooks/account/wallet/use-claim-namespace.ts
function useClaimNamespace({
  accountId,
  chainName,
  mutation
}) {
  const config = useConfig();
  const accountClient = config.useAccountWalletClient({
    chainName,
    accountId
  });
  return useMutation(
    ["claimNamespace", chainName, accountId],
    ({ args, ...cosmWasmSignOptions }) => {
      if (!accountClient)
        throw new Error("client is not defined");
      return accountClient.claimNamespace({ ...cosmWasmSignOptions, ...args });
    },
    mutation
  );
}

// src/hooks/account/wallet/use-create-remote-account.ts
import { useMutation as useMutation2 } from "@tanstack/react-query";
function useCreateRemoteAccount({
  accountId,
  chainName,
  mutation
}) {
  const config = useConfig();
  const accountClient = config.useAccountWalletClient({
    chainName,
    accountId
  });
  return useMutation2(
    ["createRemoteAccount", chainName, accountId],
    ({ args, ...cosmWasmSignOptions }) => {
      if (!accountClient)
        throw new Error("accountClient is not defined");
      return accountClient.createRemoteAccount({
        ...cosmWasmSignOptions,
        ...args
      });
    },
    mutation
  );
}

// src/hooks/account/wallet/use-create-sub-account.ts
import { useMutation as useMutation3 } from "@tanstack/react-query";
function useCreateSubAccount({
  accountId,
  chainName,
  mutation
}) {
  const config = useConfig();
  const accountClient = config.useAccountWalletClient({
    chainName,
    accountId
  });
  return useMutation3(
    ["createSubAccount", chainName, accountId],
    ({ args, ...cosmWasmSignOptions }) => {
      if (!accountClient)
        throw new Error("accountClient is not defined");
      return accountClient.createSubAccount({ ...cosmWasmSignOptions, ...args });
    },
    mutation
  );
}

// src/hooks/account/wallet/use-deposit.ts
import { useMutation as useMutation4 } from "@tanstack/react-query";
function useDeposit({
  accountId,
  chainName,
  mutation
}) {
  const config = useConfig();
  const accountClient = config.useAccountWalletClient({
    accountId,
    chainName
  });
  return useMutation4(
    ["deposit", chainName, accountId],
    ({ args, ...cosmWasmSignOptions }) => {
      if (!accountClient)
        throw new Error("client is not defined");
      return accountClient.deposit({ ...args, ...cosmWasmSignOptions });
    },
    mutation
  );
}

// src/hooks/account/wallet/use-enable-ibc.ts
import { useMutation as useMutation5 } from "@tanstack/react-query";
function useEnableIbc({
  accountId,
  chainName,
  mutation
}) {
  const config = useConfig();
  const accountClient = config.useAccountWalletClient({
    chainName,
    accountId
  });
  return useMutation5(
    ["enableIbc", chainName, accountId],
    ({ args, ...cosmWasmSignOptions }) => {
      if (!accountClient)
        throw new Error("accountClient is not defined");
      if (!args.ibcEnabled) {
        throw new Error("no action");
      }
      return accountClient.enableIbc({ ...cosmWasmSignOptions, ...args });
    },
    mutation
  );
}

// src/hooks/account/wallet/use-execute.ts
import { useMutation as useMutation6 } from "@tanstack/react-query";
function useExecute({
  accountId,
  chainName,
  mutation
}) {
  const config = useConfig();
  const accountClient = config.useAccountWalletClient({
    chainName,
    accountId
  });
  return useMutation6(
    ["execute", chainName, accountId],
    ({ args, ...cosmWasmSignOptions }) => {
      if (!accountClient)
        throw new Error("client is not defined");
      return accountClient.execute({ ...cosmWasmSignOptions, ...args });
    },
    mutation
  );
}

// src/hooks/account/wallet/use-execute-on-remote.ts
import { useMutation as useMutation7 } from "@tanstack/react-query";
function useExecuteOnRemote({
  accountId,
  chainName,
  mutation
}) {
  const config = useConfig();
  const accountClient = config.useAccountWalletClient({
    accountId,
    chainName
  });
  return useMutation7(
    ["executeOnRemote", chainName, accountId],
    ({ args, ...cosmWasmSignOptions }) => {
      if (!accountClient)
        throw new Error("accountClient is not defined");
      return accountClient.executeOnRemote({ ...cosmWasmSignOptions, ...args });
    },
    mutation
  );
}

// src/hooks/account/wallet/use-execute-on-remote-module.ts
import { useMutation as useMutation8 } from "@tanstack/react-query";
function useExecuteOnRemoteModule({
  accountId,
  chainName,
  mutation
}) {
  const config = useConfig();
  const accountClient = config.useAccountWalletClient({
    accountId,
    chainName
  });
  return useMutation8(
    ["executeOnRemoteModule", chainName, accountId],
    ({ args, ...cosmWasmSignOptions }) => {
      if (!accountClient)
        throw new Error("accountClient is not defined");
      return accountClient.executeOnRemoteModule({
        ...cosmWasmSignOptions,
        ...args
      });
    },
    mutation
  );
}

// src/hooks/account/wallet/use-execute-remote.ts
import { useMutation as useMutation9 } from "@tanstack/react-query";
function useExecuteRemote({
  accountId,
  chainName,
  mutation
}) {
  const config = useConfig();
  const accountClient = config.useAccountWalletClient({
    accountId,
    chainName
  });
  return useMutation9(
    ["executeRemote", chainName, accountId],
    ({ args, ...cosmWasmSignOptions }) => {
      if (!accountClient)
        throw new Error("accountClient is not defined");
      return accountClient.executeRemote({ ...cosmWasmSignOptions, ...args });
    },
    mutation
  );
}

// src/hooks/account/wallet/use-install-modules.ts
import { useMutation as useMutation10 } from "@tanstack/react-query";
function useInstallModules({
  accountId,
  chainName,
  mutation
}) {
  const config = useConfig();
  const accountClient = config.useAccountWalletClient({
    chainName,
    accountId
  });
  return useMutation10(
    ["installModules", chainName, accountId],
    ({ args, ...cosmWasmSignOptions }) => {
      if (!accountClient)
        throw new Error("client is not defined");
      return accountClient.installModules({ ...cosmWasmSignOptions, ...args });
    },
    mutation
  );
}

// src/hooks/account/wallet/use-request-remote-funds.ts
import { useMutation as useMutation11 } from "@tanstack/react-query";
function useRequestRemoteFunds({
  accountId,
  chainName,
  mutation
}) {
  const config = useConfig();
  const accountClient = config.useAccountWalletClient({
    chainName,
    accountId
  });
  return useMutation11(
    ["requestRemoteFunds", chainName, accountId],
    ({ args, ...cosmWasmSignOptions }) => {
      if (!accountClient)
        throw new Error("accountClient is not defined");
      return accountClient.requestFundsFromRemote({
        ...cosmWasmSignOptions,
        ...args
      });
    },
    mutation
  );
}

// src/hooks/account/wallet/use-send-funds-to-remote.ts
import { useMutation as useMutation12 } from "@tanstack/react-query";
function useSendFundsToRemote({
  accountId,
  chainName,
  mutation
}) {
  const config = useConfig();
  const accountClient = config.useAccountWalletClient({
    chainName,
    accountId
  });
  return useMutation12(
    ["sendFundsToRemote", chainName, accountId],
    ({ args, ...cosmWasmSignOptions }) => {
      if (!accountClient)
        throw new Error("accountClient is not defined");
      return accountClient.sendFundsToRemote({
        ...cosmWasmSignOptions,
        ...args
      });
    },
    mutation
  );
}
var useUseSendFundsToRemote = useSendFundsToRemote;

// src/hooks/account/wallet/use-update-info.ts
import { useMutation as useMutation13 } from "@tanstack/react-query";
function useUpdateInfo({
  accountId,
  chainName,
  mutation
}) {
  const config = useConfig();
  const accountClient = config.useAccountWalletClient({
    chainName,
    accountId
  });
  return useMutation13(
    ["updateInfo", chainName, accountId],
    ({ args, ...cosmWasmSignOptions }) => {
      if (!accountClient)
        throw new Error("accountClient is not defined");
      return accountClient.updateInfo({ ...cosmWasmSignOptions, ...args });
    },
    mutation
  );
}

// src/hooks/account/wallet/use-update-settings.ts
import { useMutation as useMutation14 } from "@tanstack/react-query";
function useUpdateSettings({
  accountId,
  chainName,
  mutation
}) {
  const { mutateAsync } = useEnableIbc({
    accountId,
    chainName,
    mutation
  });
  return useMutation14(
    ["updateSettings", chainName, accountId],
    async ({ args, ...cosmWasmSignOptions }) => {
      return await mutateAsync({ ...cosmWasmSignOptions, args });
    },
    mutation
  );
}

// src/hooks/account/wallet/use-update-status.ts
import { useMutation as useMutation15 } from "@tanstack/react-query";
function useUpdateStatus({
  accountId,
  chainName,
  mutation
}) {
  const config = useConfig();
  const accountClient = config.useAccountWalletClient({
    chainName,
    accountId
  });
  return useMutation15(
    ["updateStatus", chainName, accountId],
    ({ args, ...cosmWasmSignOptions }) => {
      if (!accountClient)
        throw new Error("accountClient is not defined");
      return accountClient.updateStatus({ ...cosmWasmSignOptions, ...args });
    },
    mutation
  );
}

// src/hooks/account/wallet/use-upgrade-modules.ts
import { useMutation as useMutation16 } from "@tanstack/react-query";
function useUpgradeModules({
  accountId,
  chainName,
  mutation
}) {
  const config = useConfig();
  const accountClient = config.useAccountWalletClient({
    chainName,
    accountId
  });
  return useMutation16(
    ["upgradeModules", chainName, accountId],
    ({ args, ...cosmWasmSignOptions }) => {
      if (!accountClient)
        throw new Error("accountClient is not defined");
      return accountClient.upgradeModules({ ...cosmWasmSignOptions, ...args });
    },
    mutation
  );
}
var useUpgradeModule = useUpgradeModules;

// src/hooks/account/wallet/use-withdraw.ts
import { useMutation as useMutation17 } from "@tanstack/react-query";
function useSendFunds({
  accountId,
  chainName,
  mutation
}) {
  const config = useConfig();
  const accountClient = config.useAccountWalletClient({
    chainName,
    accountId
  });
  return useMutation17(
    ["sendFunds", chainName, accountId],
    ({ args, ...cosmWasmSignOptions }) => {
      if (!accountClient)
        throw new Error("accountClient is not defined");
      return accountClient.sendFunds({ ...args, ...cosmWasmSignOptions });
    },
    mutation
  );
}
var useWithdraw = useSendFunds;

// src/hooks/account/public/use-account-address-from-api.ts
import React3 from "react";

// src/types/queries.ts
import {
  useInfiniteQuery as tanstack_useInfiniteQuery,
  useQuery as tanstack_useQuery
} from "@tanstack/react-query";
function useQuery(parameters) {
  const result = tanstack_useQuery({
    ...parameters
    // queryKeyHashFn: hashFn, // for bigint support
  });
  result.queryKey = parameters.queryKey;
  return result;
}

// src/hooks/account/public/use-account-address-from-api.ts
function useAccountAddressFromApi({
  accountId,
  chainName,
  extra,
  query = {}
}) {
  const config = useConfig();
  const accountPublicClient = config.useAccountPublicClient({
    accountId,
    chainName
  });
  const queryKey = React3.useMemo(
    () => ["accountAddress", accountPublicClient, extra],
    [accountPublicClient, extra]
  );
  const enabled = Boolean(accountPublicClient && (query.enabled ?? true));
  const queryFn = React3.useCallback(
    ({ queryKey: [_, accountPublicClient2, extra2] }) => {
      if (!accountPublicClient2)
        throw new Error("No client");
      return accountPublicClient2.getAccountAddress(
        extra2 ? { extra: extra2 } : void 0
      );
    },
    []
  );
  return useQuery({ queryKey, queryFn, ...query, enabled });
}
var useAccountAddress = useAccountAddressFromApi;

// src/hooks/account/public/use-account-settings.ts
import React4 from "react";
function useAccountSettings({
  accountId,
  extra,
  chainName,
  query = {}
}) {
  const config = useConfig();
  const accountPublicClient = config.useAccountPublicClient({
    accountId,
    chainName
  });
  const queryKey = React4.useMemo(
    () => ["accountSettings", accountPublicClient, extra],
    [accountPublicClient, extra]
  );
  const enabled = Boolean(accountPublicClient && (query.enabled ?? true));
  const queryFn = React4.useCallback(
    ({ queryKey: [_, accountPublicClient2, extra2] }) => {
      if (!accountPublicClient2)
        throw new Error("No client");
      return accountPublicClient2.getAccountSettings(
        extra2 ? { extra: extra2 } : void 0
      );
    },
    []
  );
  return useQuery({ queryKey, queryFn, ...query, enabled });
}

// src/hooks/account/public/use-predict-module-address.ts
import React5 from "react";
function usePredictModuleAddress({
  args,
  accountId,
  chainName,
  extra,
  query = {}
}) {
  const config = useConfig();
  const accountPublicClient = config.useAccountPublicClient({
    accountId,
    chainName
  });
  const queryKey = React5.useMemo(
    () => ["predictModuleAddress", accountPublicClient, args, extra],
    [accountPublicClient, args, extra]
  );
  const enabled = Boolean(
    accountPublicClient && args && (query.enabled ?? true)
  );
  const queryFn = React5.useCallback(
    ({ queryKey: [_, accountPublicClient2, args2, extra2] }) => {
      if (!accountPublicClient2)
        throw new Error("No client");
      if (!args2)
        throw new Error("No args");
      return accountPublicClient2.predictModuleAddress({
        ...args2,
        ...extra2
      });
    },
    []
  );
  return useQuery({ queryKey, queryFn, ...query, enabled });
}
var useModuleInstantiate2AddressFromApi = usePredictModuleAddress;
var useModuleInstantiate2Address = usePredictModuleAddress;

// src/hooks/account/public/use-modules.ts
import React6 from "react";
function useModules({
  accountId,
  chainName,
  extra,
  query = {}
}) {
  const config = useConfig();
  const accountPublicClient = config.useAccountPublicClient({
    accountId,
    chainName
  });
  const queryKey = React6.useMemo(
    () => ["modules", accountPublicClient, extra],
    [accountPublicClient, extra]
  );
  const enabled = Boolean(accountPublicClient && (query.enabled ?? true));
  const queryFn = React6.useCallback(
    ({ queryKey: [_, accountPublicClient2, extra2] }) => {
      if (!accountPublicClient2)
        throw new Error("No client");
      return accountPublicClient2.getModules(extra2 ? { extra: extra2 } : void 0);
    },
    []
  );
  return useQuery({ queryKey, queryFn, ...query, enabled });
}

// src/hooks/account/public/use-remote-account-ids.ts
import {
  useQuery as useQuery2
} from "@tanstack/react-query";
import React7 from "react";
function useRemoteAccountIds({
  accountId,
  extra,
  chainName,
  query = {}
}) {
  const config = useConfig();
  const accountPublicClient = config.useAccountPublicClient({
    accountId,
    chainName
  });
  const queryKey = React7.useMemo(
    () => ["getRemoteAccountIds", accountPublicClient, extra],
    [accountPublicClient, extra]
  );
  const enabled = React7.useMemo(
    () => Boolean(
      accountPublicClient && (query.enabled ?? true)
    ),
    [query.enabled, accountPublicClient]
  );
  const queryFn = React7.useCallback(
    ({ queryKey: [_, accountPublicClient2, extra2] }) => {
      if (!accountPublicClient2)
        throw new Error("No client");
      return accountPublicClient2.getRemoteAccountIds(
        extra2 ? {
          extra: extra2
        } : void 0
      );
    },
    []
  );
  return useQuery2({ queryKey, queryFn, ...query, enabled });
}

// src/hooks/account/public/use-remote-accounts.ts
import {
  useQuery as useQuery3
} from "@tanstack/react-query";
import React8 from "react";
function useRemoteAccounts({
  accountId,
  extra,
  chainName,
  query = {}
}) {
  const config = useConfig();
  const accountPublicClient = config.useAccountPublicClient({
    accountId,
    chainName
  });
  const queryKey = React8.useMemo(
    () => ["getRemoteAccounts", accountPublicClient, extra],
    [accountPublicClient, extra]
  );
  const enabled = React8.useMemo(
    () => Boolean(accountPublicClient && (query.enabled ?? true)),
    [query.enabled, accountPublicClient]
  );
  const queryFn = React8.useCallback(
    ({ queryKey: [_, accountPublicClient2, extra2] }) => {
      if (!accountPublicClient2)
        throw new Error("No client");
      return accountPublicClient2.getRemoteAccounts(
        extra2 ? {
          extra: extra2
        } : void 0
      );
    },
    []
  );
  return useQuery3({ queryKey, queryFn, ...query, enabled });
}

// src/hooks/account/public/use-simulate-execute-remote-account.ts
import { useMutation as useMutation18 } from "@tanstack/react-query";
function useSimulateExecuteRemoteAccount({
  accountId,
  chainName,
  mutation
}) {
  const config = useConfig();
  const accountClient = config.useAccountPublicClient({
    chainName,
    accountId
  });
  return useMutation18(
    ["simulateExecuteRemoteAccount", chainName, accountId],
    ({ ...params }) => {
      if (!accountClient)
        throw new Error("client is not defined");
      return accountClient.simulateExecuteRemoteAccount({ ...params });
    },
    mutation
  );
}

// src/hooks/account/public/use-sub-accounts-ids-from-api.ts
import React9 from "react";
function useSubAccountIdsFromApi({
  accountId,
  chainName,
  extra,
  query = {}
}) {
  const config = useConfig();
  const accountPublicClient = config.useAccountPublicClient({
    accountId,
    chainName
  });
  const queryKey = React9.useMemo(
    () => ["getSubAccountIdsFromApi", accountPublicClient, extra],
    [accountPublicClient, extra]
  );
  const enabled = Boolean(accountPublicClient && (query.enabled ?? true));
  const queryFn = React9.useCallback(
    ({ queryKey: [_, accountPublicClient2, extra2] }) => {
      if (!accountPublicClient2)
        throw new Error("No client");
      return accountPublicClient2.getSubAccountIds(extra2 ? { extra: extra2 } : void 0);
    },
    []
  );
  return useQuery({ queryKey, queryFn, ...query, enabled });
}

// src/hooks/public/use-cosm-wasm-client.ts
import React10 from "react";
function useCosmWasmClient({
  chainName,
  query = {}
}) {
  const config = useConfig();
  const publicClient = config.usePublicClient({ chainName });
  const queryKey = React10.useMemo(
    () => ["cosmWasmClient", chainName, publicClient],
    [chainName, publicClient]
  );
  const queryFn = React10.useCallback(
    ({ queryKey: [_, chainName2, publicClient2] }) => {
      if (!publicClient2)
        throw new Error(`client is not defined for ${chainName2}`);
      return publicClient2.getCosmWasmClient();
    },
    []
  );
  const enabled = Boolean(publicClient && (query.enabled ?? true));
  return useQuery({ queryKey, queryFn, ...query, enabled });
}

// src/hooks/public/use-smart-query.ts
import React11 from "react";
function useSmartQuery({
  chainName,
  query = {},
  address,
  queryMsg
}) {
  const { data: cosmWasmClient, isSuccess } = useCosmWasmClient({ chainName });
  const queryKey = React11.useMemo(
    () => ["smartQuery", chainName, cosmWasmClient, address, queryMsg],
    [cosmWasmClient, chainName, address, queryMsg]
  );
  const queryFn = React11.useCallback(
    async ({ queryKey: [_, _chainName, cosmWasmClient2] }) => {
      if (!cosmWasmClient2) {
        throw new Error(`client is not defined for ${chainName}`);
      }
      return cosmWasmClient2.queryContractSmart(address, queryMsg);
    },
    []
  );
  const enabled = Boolean(isSuccess && (query.enabled ?? true));
  return useQuery({ queryKey, queryFn, ...query, enabled });
}

// src/hooks/public/use-abstract-module-version.ts
import React12 from "react";
function useAbstractModuleVersion({
  args,
  extra,
  chainName,
  query = {}
}) {
  const config = useConfig();
  const publicClient = config.usePublicClient({
    chainName
  });
  const queryKey = React12.useMemo(
    () => ["abstractModuleVersion", chainName, publicClient, args, extra],
    [publicClient, chainName, args, extra]
  );
  const enabled = Boolean(publicClient && args && (query.enabled ?? true));
  const queryFn = React12.useCallback(
    ({ queryKey: [_, _chainName, publicClient2, args2, extra2] }) => {
      if (!publicClient2)
        throw new Error("No client");
      if (!args2)
        throw new Error("No args");
      return publicClient2.getAbstractModuleVersion({ ...args2, extra: extra2 });
    },
    []
  );
  return useQuery({ queryKey, queryFn, ...query, enabled });
}

// src/hooks/public/use-accounts-addresses-from-api.ts
import React13 from "react";
function useAccountsAddressesFromApi({
  chainName,
  args,
  extra,
  query = {}
}) {
  const config = useConfig();
  const accountPublicClient = config.usePublicClient({
    chainName
  });
  const queryKey = React13.useMemo(
    () => ["accountAddress", chainName, accountPublicClient, args, extra],
    [accountPublicClient, chainName, args, extra]
  );
  const enabled = Boolean(
    accountPublicClient && args && (query.enabled ?? true)
  );
  const queryFn = React13.useCallback(
    ({ queryKey: [_, _chainName, accountPublicClient2, args2, extra2] }) => {
      if (!accountPublicClient2 || !args2)
        throw new Error("No client or args");
      return accountPublicClient2.getAccountsAddresses({ extra: extra2, ...args2 });
    },
    []
  );
  return useQuery({ queryKey, queryFn, ...query, enabled });
}

// src/hooks/public/use-remote-hosts.ts
import React14 from "react";
function useRemoteHosts({
  chainName,
  extra,
  query = {}
}) {
  const config = useConfig();
  const publicClient = config.usePublicClient({
    chainName
  });
  const queryKey = React14.useMemo(
    () => ["getRemoteHosts", chainName, publicClient, extra],
    [chainName, publicClient, extra]
  );
  const enabled = Boolean(publicClient && (query.enabled ?? true));
  const queryFn = React14.useCallback(
    ({ queryKey: [_, _chainName, publicClient2, extra2] }) => {
      if (!publicClient2)
        throw new Error("No client");
      return publicClient2.getRemoteHosts(extra2 ? { extra: extra2 } : void 0);
    },
    []
  );
  return useQuery({ queryKey, queryFn, ...query, enabled });
}

// src/hooks/public/use-simulate-remote-msg.ts
import { useMutation as useMutation19 } from "@tanstack/react-query";
function useSimulateRemoteMsg({
  chainName,
  mutation
}) {
  const config = useConfig();
  const accountClient = config.usePublicClient({
    chainName
  });
  return useMutation19(
    ["simulateRemoteCosmosMsg", chainName],
    ({ ...params }) => {
      if (!accountClient)
        throw new Error("accountClient is not defined");
      return accountClient.simulateRemoteCosmosMsg({
        ...params
      });
    },
    mutation
  );
}

// src/hooks/public/use-predict-account-address.ts
import React15 from "react";
function usePredictAccountAddress({
  chainName,
  args,
  extra,
  query = {}
}) {
  const config = useConfig();
  const publicClient = config.usePublicClient({
    chainName
  });
  const queryKey = React15.useMemo(
    () => ["predictAccountAddress", publicClient, args, extra],
    [publicClient, extra]
  );
  const enabled = Boolean(publicClient && (query.enabled ?? true));
  const queryFn = React15.useCallback(
    ({ queryKey: [_, publicClient2, args2, extra2] }) => {
      if (!publicClient2)
        throw new Error("No client");
      if (!args2)
        throw new Error("No args");
      return publicClient2.predictAccountAddress({ extra: extra2, ...args2 });
    },
    []
  );
  return useQuery({ queryKey, queryFn, ...query, enabled });
}

// src/hooks/wallet/use-signing-cosm-wasm-client.ts
import React16 from "react";
function useSigningCosmWasmClient(parameters) {
  const { chainName, query = {} } = parameters ?? {};
  const config = useConfig();
  const walletClient = config.useWalletClient({ chainName });
  const queryKey = React16.useMemo(
    () => ["signing-cosm-wasm-client", walletClient],
    [walletClient]
  );
  const queryFn = React16.useCallback(() => {
    if (!walletClient)
      throw new Error("client is not defined");
    return walletClient.getSigningCosmWasmClient();
  }, [walletClient]);
  const enabled = Boolean(walletClient && (query.enabled ?? true));
  return useQuery({ queryKey, queryFn, ...query, enabled });
}

// src/hooks/wallet/use-create-account.ts
import { useMutation as useMutation20 } from "@tanstack/react-query";
function useCreateAccount({ chainName, mutation }) {
  const config = useConfig();
  const walletClient = config.useWalletClient({ chainName });
  return useMutation20(
    ["createAccount", chainName],
    ({ args, ...cosmWasmSignOptions }) => {
      if (!walletClient)
        throw new Error("walletClient is not defined");
      return walletClient.createAccount({ ...args, ...cosmWasmSignOptions });
    },
    mutation
  );
}

// src/hooks/wallet/use-create-account-monarchy.ts
import { useMutation as useMutation21 } from "@tanstack/react-query";
function useCreateAccountMonarchy({
  chainName,
  mutation
}) {
  const config = useConfig();
  const walletClient = config.useWalletClient({ chainName });
  return useMutation21(
    ["createAccountMonarchy", chainName],
    ({ args, ...cosmWasmSignOptions }) => {
      if (!walletClient)
        throw new Error("walletClient is not defined");
      return walletClient.createAccountMonarchy({
        ...args,
        ...cosmWasmSignOptions
      });
    },
    mutation
  );
}

// src/hooks/wallet/use-sender-address.ts
import React17 from "react";
function useSenderAddress(parameters) {
  const { query = {}, chainName } = parameters ?? {};
  const config = useConfig();
  const walletClient = config.useWalletClient({ chainName });
  const queryKey = React17.useMemo(
    () => ["sender-address", walletClient],
    [walletClient]
  );
  const queryFn = React17.useCallback(() => {
    if (!walletClient)
      throw new Error("client is not defined");
    return walletClient.getSenderAddress();
  }, [walletClient]);
  const enabled = Boolean(walletClient && (query.enabled ?? true));
  return useQuery({ queryKey, queryFn, ...query, enabled });
}

// src/hooks/wallet/utils/use-sign-and-broadcast.ts
import { useMutation as useMutation22 } from "@tanstack/react-query";
function useSignAndBroadcast({ args: { chainName } }, options) {
  const { data: signingCosmWasmClient } = useSigningCosmWasmClient({
    chainName
  });
  const { data: senderAddress } = useSenderAddress({ chainName });
  return useMutation22(
    ["signAndBroadcast", chainName, senderAddress],
    ({ args, fee, memo }) => {
      if (!signingCosmWasmClient || !senderAddress)
        throw new Error(
          "signingCosmWasmClient or senderAddress are not defined"
        );
      return signingCosmWasmClient?.signAndBroadcast(
        senderAddress,
        args.messages,
        fee,
        memo
      );
    },
    options
  );
}

// src/hooks/use-accounts.ts
import React18 from "react";
function useAccounts({
  args,
  extra,
  query = {}
}) {
  const config = useConfig();
  const client = config.useApiClient();
  const queryKey = React18.useMemo(
    () => ["accountsOf", client, args, extra],
    [client, args, extra]
  );
  const enabled = Boolean(client && args && (query.enabled ?? true));
  const queryFn = React18.useCallback(
    ({ queryKey: [_, client2, args2, extra2] }) => {
      if (!client2 || !args2)
        throw new Error("No client or owner or chain");
      return client2.getAccountsByOwnerFromApi({
        ...args2,
        ...extra2
      });
    },
    []
  );
  return useQuery({ queryKey, queryFn, ...query, enabled });
}

// src/hooks/use-ans-token-from-api.ts
import React19 from "react";
function useAnsTokenFromApi({
  args,
  extra,
  query = {}
}) {
  const config = useConfig();
  const client = config.useApiClient();
  const queryKey = React19.useMemo(
    () => ["ansTokenFromApi", client, args, extra],
    [args, client, extra]
  );
  const enabled = Boolean(client && args && (query.enabled ?? true));
  const queryFn = React19.useCallback(
    ({ queryKey: [_, client2, args2, extra2] }) => {
      if (!client2 || !args2)
        throw new Error("No client or owner or chain");
      return client2.getAnsTokenFromApi({ ...args2, ...extra2 });
    },
    []
  );
  return useQuery({ queryKey, queryFn, ...query, enabled });
}

// src/hooks/use-account-balance-from-api.ts
import React20 from "react";
function useAccountBalancesFromApi({
  args,
  extra,
  query = {}
}) {
  const config = useConfig();
  const client = config.useApiClient();
  const queryKey = React20.useMemo(
    () => ["accountBalancesFromApi", client, args, extra],
    [args, client, extra]
  );
  const enabled = Boolean(client && args && (query.enabled ?? true));
  const queryFn = React20.useCallback(
    ({ queryKey: [_, client2, args2, extra2] }) => {
      if (!client2 || !args2)
        throw new Error("No client or accountid");
      return client2.getAccountBalancesFromApi({ ...args2, ...extra2 });
    },
    []
  );
  return useQuery({ queryKey, queryFn, ...query, enabled });
}

// src/hooks/use-modules-from-api.ts
import React21 from "react";
function useModulesFromApi({
  args,
  extra,
  query = {}
}) {
  const config = useConfig();
  const client = config.useApiClient();
  const queryKey = React21.useMemo(
    () => ["modulesFromApi", client, args, extra],
    [args, client, extra]
  );
  const enabled = Boolean(client && args && (query.enabled ?? true));
  const queryFn = React21.useCallback(() => {
    if (!client || !args)
      throw new Error("No client or owner or chain");
    return client.getModulesFromApi({
      ...args,
      ...extra
    });
  }, []);
  return useQuery({ queryKey, queryFn, ...query, enabled });
}

// src/hooks/use-sub-account-ids-by-module-from-api.ts
import React22 from "react";
function useSubAccountIdsByModuleIdFromApi({
  args,
  extra,
  query = {}
}) {
  const config = useConfig();
  const client = config.useApiClient();
  const queryKey = React22.useMemo(
    () => ["subAccountIdsByModuleIdFromApi", client, args, extra],
    [args, client, extra]
  );
  const enabled = Boolean(client && args && (query.enabled ?? true));
  const queryFn = React22.useCallback(
    ({ queryKey: [_, client2, args2, extra2] }) => {
      if (!client2 || !args2)
        throw new Error("No client or accountid");
      return client2.getSubAccountIdsByModuleIdFromApi({
        ...args2,
        ...extra2
      });
    },
    []
  );
  return useQuery({ queryKey, queryFn, ...query, enabled });
}

export {
  useConfig,
  AbstractProvider,
  useClaimNamespace,
  useCreateRemoteAccount,
  useCreateSubAccount,
  useDeposit,
  useEnableIbc,
  useExecute,
  useExecuteOnRemote,
  useExecuteOnRemoteModule,
  useExecuteRemote,
  useInstallModules,
  useRequestRemoteFunds,
  useSendFundsToRemote,
  useUseSendFundsToRemote,
  useUpdateInfo,
  useUpdateSettings,
  useUpdateStatus,
  useUpgradeModules,
  useUpgradeModule,
  useSendFunds,
  useWithdraw,
  useQuery,
  useAccountAddressFromApi,
  useAccountAddress,
  useAccountSettings,
  usePredictModuleAddress,
  useModuleInstantiate2AddressFromApi,
  useModuleInstantiate2Address,
  useModules,
  useRemoteAccountIds,
  useRemoteAccounts,
  useSimulateExecuteRemoteAccount,
  useSubAccountIdsFromApi,
  useCosmWasmClient,
  useSmartQuery,
  useAbstractModuleVersion,
  useAccountsAddressesFromApi,
  useRemoteHosts,
  useSimulateRemoteMsg,
  usePredictAccountAddress,
  useSigningCosmWasmClient,
  useCreateAccount,
  useCreateAccountMonarchy,
  useSenderAddress,
  useSignAndBroadcast,
  useAccounts,
  useAnsTokenFromApi,
  useAccountBalancesFromApi,
  useModulesFromApi,
  useSubAccountIdsByModuleIdFromApi
};

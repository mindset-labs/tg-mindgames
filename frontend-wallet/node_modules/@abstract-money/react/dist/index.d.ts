import * as React from 'react';
import { QueryClientProviderProps } from '@tanstack/react-query/src/QueryClientProvider';
import { ApiClient, PublicClient, WalletClient, AccountId, AccountPublicClient, AccountWalletClient } from '@abstract-money/core';
import { CosmWasmClient, SigningCosmWasmClient } from '@cosmjs/cosmwasm-stargate';
import { E as Evaluate, U as UseQueryParameters } from './index-BAWa5rso.js';
export { a5 as MaybeChainName, aa as UseAbstractModuleVersionParameters, N as UseAccountAddressFromApiParameters, ax as UseAccountBalancesFromApiParameters, Q as UseAccountSettingsParameters, ac as UseAccountsAddressesFromApiParameters, at as UseAccountsParameters, av as UseAnsTokenFromApiParameters, a as UseClaimNamespaceParameters, a6 as UseCosmWasmClientParameters, am as UseCreateAccount, ao as UseCreateAccountMonarchyParameters, b as UseCreateRemoteAccountParameters, d as UseCreateSubAccountParameters, f as UseDepositParameters, h as UseEnableIbcParameters, n as UseExecuteOnRemoteModuleParameters, l as UseExecuteOnRemoteParameters, j as UseExecuteParameters, p as UseExecuteRemoteParameters, r as UseInstallModulesParameters, az as UseModulesFromApiParameters, X as UseModulesParameters, ai as UsePredictAccountAddressParameters, V as UsePredictModuleAddressParameters, Z as UseRemoteAccountIdsParameters, $ as UseRemoteAccountsParameters, ae as UseRemoteHostsParameters, t as UseRequestRemoteFundsParameters, J as UseSendFundsParameters, w as UseSendFundsToRemoteParameters, aq as UseSenderAddressParameters, ak as UseSigningCosmWasmClientParameters, a1 as UseSimulateExecuteRemoteAccountParameters, ag as UseSimulateRemoteMsgParameters, a8 as UseSmartQueryParameters, aB as UseSubAccountIdsByModuleIdFromApiParameters, a3 as UseSubAccountIdsFromApiParameters, z as UseUpdateInfoParameters, B as UseUpdateSettingsParameters, D as UseUpdateStatusParameters, H as UseUpgradeModulesParameters, K as UseWithdrawParameters, ab as useAbstractModuleVersion, P as useAccountAddress, O as useAccountAddressFromApi, ay as useAccountBalancesFromApi, R as useAccountSettings, au as useAccounts, ad as useAccountsAddressesFromApi, aw as useAnsTokenFromApi, u as useClaimNamespace, a7 as useCosmWasmClient, an as useCreateAccount, ap as useCreateAccountMonarchy, c as useCreateRemoteAccount, e as useCreateSubAccount, g as useDeposit, i as useEnableIbc, k as useExecute, m as useExecuteOnRemote, o as useExecuteOnRemoteModule, q as useExecuteRemote, s as useInstallModules, T as useModuleInstantiate2Address, S as useModuleInstantiate2AddressFromApi, Y as useModules, aA as useModulesFromApi, aj as usePredictAccountAddress, W as usePredictModuleAddress, _ as useRemoteAccountIds, a0 as useRemoteAccounts, af as useRemoteHosts, v as useRequestRemoteFunds, L as useSendFunds, x as useSendFundsToRemote, ar as useSenderAddress, as as useSignAndBroadcast, al as useSigningCosmWasmClient, a2 as useSimulateExecuteRemoteAccount, ah as useSimulateRemoteMsg, a9 as useSmartQuery, aC as useSubAccountIdsByModuleIdFromApi, a4 as useSubAccountIdsFromApi, A as useUpdateInfo, C as useUpdateSettings, F as useUpdateStatus, G as useUpgradeModule, I as useUpgradeModules, y as useUseSendFundsToRemote, M as useWithdraw } from './index-BAWa5rso.js';
import { AccountPublicClient as AccountPublicClient$1 } from '@abstract-money/core/src';
import * as _tanstack_react_query from '@tanstack/react-query';
import '@abstract-money/core/clients';
import '@abstract-money/core/utils';
import '@cosmjs/stargate';
import '@abstract-money/core/dist/Registry.client-DeRpB8OW';
import '@abstract-money/core/dist/Registry.types-tb_Smu0e';
import '@cosmjs/proto-signing';
import '@abstract-money/core/dist/types-DL_NvWZJ';
import '@abstract-money/core/codegen/abstract';
import '@abstract-money/core/dist/module-type-Dq9dh99O';
import '@abstract-money/core/dist/types-CdpDSdJ3';

type CommonProviderArgs = {
    chainName: string | undefined;
};
type Provider = {
    useCosmWasmClient: (arg?: CommonProviderArgs) => CosmWasmClient | undefined;
    useSigningCosmWasmClient: (arg?: CommonProviderArgs) => SigningCosmWasmClient | undefined;
    useSenderAddress: (arg?: CommonProviderArgs) => string | undefined;
};
type CreateConfigParameters = {
    provider: Provider;
    apiUrl?: string;
};
declare function createConfig(parameters: CreateConfigParameters): {
    apiUrl: string;
    provider: Provider;
    useApiClient: () => ApiClient;
    usePublicClient: (arg?: CommonProviderArgs | undefined) => PublicClient | undefined;
    useWalletClient: (arg?: CommonProviderArgs | undefined) => WalletClient | undefined;
    useAccountPublicClient: ({ accountId, ...rest }: {
        accountId: AccountId | undefined;
        chainName: string | undefined;
    }) => AccountPublicClient | undefined;
    useAccountWalletClient: ({ accountId, ...rest }: {
        accountId: AccountId | undefined;
        chainName: string | undefined;
    }) => AccountWalletClient | undefined;
};
type Config = {
    apiUrl: string;
    provider: Provider;
    useApiClient(): ApiClient | undefined;
    usePublicClient(...args: Parameters<Provider['useCosmWasmClient']>): PublicClient | undefined;
    useWalletClient(...args: Evaluate<Parameters<Provider['useSigningCosmWasmClient']>>): WalletClient | undefined;
    useAccountPublicClient(args: Evaluate<{
        accountId: AccountId | undefined;
    } & Parameters<Provider['useCosmWasmClient']>[0]>): AccountPublicClient | undefined;
    useAccountWalletClient(args: Evaluate<{
        accountId: AccountId | undefined;
    } & Parameters<Provider['useCosmWasmClient']>[0]>): AccountWalletClient | undefined;
};

type AbstractConfigProps = {
    config: Config;
    queryClientOptions?: Partial<Omit<QueryClientProviderProps, 'children' | 'contextSharing'>>;
};
/**
 * Internal hook to retrieve the Abstract configuration from the {@link AbstractConfigContext} context.
 */
declare function useConfig(): Config;

type AbstractProviderProps = AbstractConfigProps;
/**
 * Provide abstract configuration for the application.
 * @param config configuration.
 */
declare function AbstractProvider({ children, config, }: React.PropsWithChildren<AbstractProviderProps>): React.FunctionComponentElement<{
    children?: React.ReactNode;
}>;

interface AbstractModuleClientConstructor {
    new (args: {
        accountPublicClient: AccountPublicClient;
        accountWalletClient: AccountWalletClient;
        moduleId: string;
    }): any;
}
type UseAbstractModuleClientParameters<TModule extends AbstractModuleClientConstructor> = {
    accountId: AccountId | undefined;
    chainName: string | undefined;
    moduleId: string;
    Module: TModule;
    query?: UseQueryParameters<InstanceType<TModule> | undefined, unknown, InstanceType<TModule> | undefined, readonly ['module-mutation-client', string, AccountId | undefined, TModule]>;
    sender?: string | undefined;
};
declare function useAbstractModuleClient<TModule extends AbstractModuleClientConstructor>({ accountId, moduleId, chainName, Module, query, sender, }: UseAbstractModuleClientParameters<TModule>): {
    readonly data: undefined;
    readonly isLoading: true;
    readonly isError: false;
    readonly isSuccess: false;
    readonly error: undefined;
} | {
    readonly data: undefined;
    readonly isLoading: false;
    readonly isError: true;
    readonly isSuccess: false;
    readonly error: unknown;
} | {
    readonly data: undefined;
    readonly isLoading: true;
    readonly isError: false;
    readonly isSuccess: false;
    readonly error?: undefined;
} | {
    readonly data: InstanceType<TModule> | undefined;
    readonly isLoading: false;
    readonly isError: false;
    readonly isSuccess: true;
    readonly error?: undefined;
};

interface AbstractModuleQueryClientConstructor {
    new (args: {
        accountPublicClient: AccountPublicClient$1;
        moduleId: string;
    }): any;
}
type TQueryFnData<TModule extends AbstractModuleQueryClientConstructor> = InstanceType<TModule> | undefined;
type TQueryData<TModule extends AbstractModuleQueryClientConstructor> = InstanceType<TModule> | undefined;
type TQueryKey<TModule extends AbstractModuleQueryClientConstructor> = readonly [
    'module-query-client',
    string,
    TModule,
    AccountPublicClient$1 | undefined
];
type UseAbstractModuleQueryClientParameters<TModule extends AbstractModuleQueryClientConstructor> = {
    accountId: AccountId | undefined;
    chainName: string | undefined;
    moduleId: string;
    Module: TModule;
    query?: UseQueryParameters<TQueryFnData<TModule>, unknown, TQueryData<TModule>, TQueryKey<TModule>>;
};
declare function useAbstractModuleQueryClient<TModule extends AbstractModuleQueryClientConstructor>({ accountId, chainName, moduleId, Module, query, }: UseAbstractModuleQueryClientParameters<TModule>): {
    readonly data: undefined;
    readonly isLoading: true;
    readonly isError: false;
    readonly isSuccess: false;
    readonly error: undefined;
} | {
    readonly data: undefined;
    readonly isLoading: false;
    readonly isError: true;
    readonly isSuccess: false;
    readonly error: unknown;
} | {
    readonly data: undefined;
    readonly isLoading: true;
    readonly isError: false;
    readonly isSuccess: false;
    readonly error?: undefined;
} | {
    readonly data: TQueryData<TModule>;
    readonly isLoading: false;
    readonly isError: false;
    readonly isSuccess: true;
    readonly error?: undefined;
};

interface ModuleClientConstructor {
    new (client: SigningCosmWasmClient, sender: string, contractAddress: string): any;
}
declare function useModuleClient<TModule extends ModuleClientConstructor>(parameters: {
    contractAddress: string | undefined;
    chainName: string | undefined;
    sender?: string | undefined;
    Module: TModule;
}): {
    readonly data: undefined;
    readonly isLoading: false;
    readonly isError: true;
    readonly isSuccess: false;
    readonly error: unknown;
} | {
    readonly data: undefined;
    readonly isLoading: true;
    readonly isError: false;
    readonly isSuccess: false;
    readonly error?: undefined;
} | {
    readonly data: InstanceType<TModule> | undefined;
    readonly isLoading: false;
    readonly isError: false;
    readonly isSuccess: true;
    readonly error?: undefined;
};

interface ModuleQueryClientConstructor {
    new (client: CosmWasmClient, contractAddress: string): any;
}
declare function useModuleQueryClient<TModule extends ModuleQueryClientConstructor>(parameters: {
    contractAddress: string | undefined;
    chainName: string | undefined;
    Module: TModule;
}): {
    error: unknown;
    isError: true;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<CosmWasmClient, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    queryKey: _tanstack_react_query.QueryKey;
    data: InstanceType<TModule> | undefined;
} | {
    error: null;
    isError: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<CosmWasmClient, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    queryKey: _tanstack_react_query.QueryKey;
    data: InstanceType<TModule> | undefined;
} | {
    error: unknown;
    isError: true;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<CosmWasmClient, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    queryKey: _tanstack_react_query.QueryKey;
    data: InstanceType<TModule> | undefined;
} | {
    error: null;
    isError: false;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "loading";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<CosmWasmClient, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    queryKey: _tanstack_react_query.QueryKey;
    data: InstanceType<TModule> | undefined;
};

export { AbstractProvider, type Config, type CreateConfigParameters, type Provider, createConfig, useAbstractModuleClient, useAbstractModuleQueryClient, useConfig, useModuleClient, useModuleQueryClient };

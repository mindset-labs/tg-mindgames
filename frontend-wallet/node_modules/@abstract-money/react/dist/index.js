"use client";
import {
  AbstractProvider,
  useAbstractModuleVersion,
  useAccountAddress,
  useAccountAddressFromApi,
  useAccountBalancesFromApi,
  useAccountSettings,
  useAccounts,
  useAccountsAddressesFromApi,
  useAnsTokenFromApi,
  useClaimNamespace,
  useConfig,
  useCosmWasmClient,
  useCreateAccount,
  useCreateAccountMonarchy,
  useCreateRemoteAccount,
  useCreateSubAccount,
  useDeposit,
  useEnableIbc,
  useExecute,
  useExecuteOnRemote,
  useExecuteOnRemoteModule,
  useExecuteRemote,
  useInstallModules,
  useModuleInstantiate2Address,
  useModuleInstantiate2AddressFromApi,
  useModules,
  useModulesFromApi,
  usePredictAccountAddress,
  usePredictModuleAddress,
  useQuery,
  useRemoteAccountIds,
  useRemoteAccounts,
  useRemoteHosts,
  useRequestRemoteFunds,
  useSendFunds,
  useSendFundsToRemote,
  useSenderAddress,
  useSignAndBroadcast,
  useSigningCosmWasmClient,
  useSimulateExecuteRemoteAccount,
  useSimulateRemoteMsg,
  useSmartQuery,
  useSubAccountIdsByModuleIdFromApi,
  useSubAccountIdsFromApi,
  useUpdateInfo,
  useUpdateSettings,
  useUpdateStatus,
  useUpgradeModule,
  useUpgradeModules,
  useUseSendFundsToRemote,
  useWithdraw
} from "./chunk-2MJQ2BBI.js";

// src/utils/use-abstract-module-client.ts
import * as React from "react";
async function getAbstractModuleClient({
  accountPublicClient,
  accountWalletClient,
  moduleId,
  Module
}) {
  return new Module({
    accountPublicClient,
    accountWalletClient,
    moduleId
  });
}
function useAbstractModuleClient({
  accountId,
  moduleId,
  chainName,
  Module,
  query = {},
  sender: _sender
}) {
  const { useAccountWalletClient, useAccountPublicClient } = useConfig();
  const accountPublicClient = useAccountPublicClient({
    accountId,
    chainName
  });
  const accountWalletClient = useAccountWalletClient({
    accountId,
    chainName
  });
  const queryKey = React.useMemo(
    () => ["module-mutation-client", moduleId, accountId, Module],
    [moduleId, accountId, Module]
  );
  const queryFn = React.useCallback(() => {
    if (!accountPublicClient)
      throw new Error("accountPublicClient is not defined");
    if (!accountWalletClient)
      throw new Error("accountWalletClient is not defined");
    return getAbstractModuleClient({
      accountPublicClient,
      accountWalletClient,
      moduleId,
      Module
    });
  }, [accountPublicClient, accountWalletClient, moduleId, Module]);
  const enabled = Boolean(accountWalletClient && (query.enabled ?? true));
  const {
    data,
    isLoading: isAbstractModuleClientLoading,
    isError: isAbstractModuleClientError,
    error: abstractModuleClientError
  } = useQuery({ queryKey, queryFn, ...query, enabled });
  if (!enabled)
    return {
      data: void 0,
      isLoading: true,
      isError: false,
      isSuccess: false,
      error: void 0
    };
  if (isAbstractModuleClientError)
    return {
      data: void 0,
      isLoading: false,
      isError: true,
      isSuccess: false,
      error: abstractModuleClientError
    };
  if (isAbstractModuleClientLoading)
    return {
      data: void 0,
      isLoading: true,
      isError: false,
      isSuccess: false
    };
  return {
    data,
    isLoading: false,
    isError: false,
    isSuccess: true
  };
}

// src/utils/use-abstract-module-query-client.ts
import * as React2 from "react";
async function getAbstractModuleQueryClient({
  accountPublicClient,
  moduleId,
  Module
}) {
  return new Module({
    accountPublicClient,
    moduleId
  });
}
function useAbstractModuleQueryClient({
  accountId,
  chainName,
  moduleId,
  Module,
  query = {}
}) {
  const { apiUrl, useAccountPublicClient } = useConfig();
  const accountPublicClient = useAccountPublicClient({
    accountId,
    chainName
  });
  const queryKey = React2.useMemo(
    () => ["module-query-client", moduleId, Module, accountPublicClient],
    [moduleId, accountId, accountPublicClient]
  );
  const queryFn = React2.useCallback(() => {
    if (!accountPublicClient)
      throw new Error("client is not defined");
    return getAbstractModuleQueryClient({
      accountPublicClient,
      overrideApiUrl: apiUrl,
      moduleId,
      Module
    });
  }, [accountPublicClient, apiUrl, accountId, moduleId, Module]);
  const enabled = Boolean(
    accountPublicClient && accountId && (query.enabled ?? true)
  );
  const {
    data,
    isLoading: isAbstractModuleQueryClientLoading,
    isError: isAbstractModuleQueryClientError,
    error: abstractModuleQueryClientError
  } = useQuery({ queryKey, queryFn, ...query, enabled });
  if (!enabled)
    return {
      data: void 0,
      isLoading: true,
      isError: false,
      isSuccess: false,
      error: void 0
    };
  if (isAbstractModuleQueryClientError)
    return {
      data: void 0,
      isLoading: false,
      isError: true,
      isSuccess: false,
      error: abstractModuleQueryClientError
    };
  if (isAbstractModuleQueryClientLoading)
    return {
      data: void 0,
      isLoading: true,
      isError: false,
      isSuccess: false
    };
  return {
    data,
    isLoading: false,
    isError: false,
    isSuccess: true
  };
}

// src/utils/use-module-client.ts
import * as React3 from "react";
function useModuleClient(parameters) {
  const { contractAddress, Module, chainName, sender: sender_ } = parameters;
  const {
    data: client,
    isLoading: isSigningCosmWasmClientLoading,
    isError: isSigningCosmWasmClientError,
    error: signingCosmWasmClientError
  } = useSigningCosmWasmClient({ chainName });
  const {
    data: sender,
    isLoading: isSenderAddressLoading,
    isError: isSenderAddressError,
    error: senderAddressError
  } = useSenderAddress({ chainName });
  const data = React3.useMemo(() => {
    if (!client || !contractAddress)
      return void 0;
    if (!sender_ && !sender || !sender)
      return void 0;
    return new Module(
      client,
      sender_ ?? sender,
      contractAddress
    );
  }, [client, contractAddress]);
  if (isSigningCosmWasmClientError)
    return {
      data: void 0,
      isLoading: false,
      isError: true,
      isSuccess: false,
      error: signingCosmWasmClientError
    };
  if (isSenderAddressError)
    return {
      data: void 0,
      isLoading: false,
      isError: true,
      isSuccess: false,
      error: senderAddressError
    };
  if (isSigningCosmWasmClientLoading || isSenderAddressLoading)
    return {
      data: void 0,
      isLoading: true,
      isError: false,
      isSuccess: false
    };
  return {
    data,
    isLoading: false,
    isError: false,
    isSuccess: true
  };
}

// src/utils/use-module-query-client.ts
import * as React4 from "react";
function useModuleQueryClient(parameters) {
  const { contractAddress, Module, chainName } = parameters;
  const { data: client, ...rest } = useCosmWasmClient({ chainName });
  const queryClient = React4.useMemo(() => {
    if (!client || !contractAddress)
      return void 0;
    return new Module(client, contractAddress);
  }, [client, contractAddress]);
  return { data: queryClient, ...rest };
}

// src/create-config.ts
import {
  ABSTRACT_API_URL,
  createAccountPublicClient,
  createAccountWalletClient,
  createApiClient,
  createPublicClient,
  createWalletClient
} from "@abstract-money/core";
import { useMemo as useMemo5 } from "react";
function createConfig(parameters) {
  const { apiUrl = ABSTRACT_API_URL, provider } = parameters;
  function useApiClient() {
    return useMemo5(
      () => createApiClient({
        apiUrl
      }),
      [apiUrl]
    );
  }
  function usePublicClient(...args) {
    const cosmWasmClient = provider.useCosmWasmClient(...args);
    return useMemo5(() => {
      if (!cosmWasmClient) {
        console.debug("usePublicClient: no cosmWasmClient");
        return void 0;
      }
      return createPublicClient({
        apiUrl,
        cosmWasmClient
      });
    }, [apiUrl, cosmWasmClient]);
  }
  function useWalletClient(...args) {
    const signingCosmWasmClient = provider.useSigningCosmWasmClient(...args);
    const sender = provider.useSenderAddress(...args);
    return useMemo5(() => {
      if (!signingCosmWasmClient || !sender) {
        console.debug("useWalletClient: no signingCosmWasmClient or sender", {
          signingCosmWasmClient,
          sender
        });
        return void 0;
      }
      return createWalletClient({
        apiUrl,
        sender,
        signingCosmWasmClient
      });
    }, [apiUrl, signingCosmWasmClient, sender]);
  }
  function useAccountPublicClient({
    accountId,
    ...rest
  }) {
    const cosmWasmClient = provider.useCosmWasmClient(rest);
    return useMemo5(() => {
      if (!cosmWasmClient || !accountId) {
        console.debug(
          "useAccountPublicClient: no cosmWasmClient or accountId",
          {
            cosmWasmClient,
            accountId
          }
        );
        return void 0;
      }
      return createAccountPublicClient({
        apiUrl,
        cosmWasmClient,
        accountId
      });
    }, [apiUrl, cosmWasmClient, accountId]);
  }
  function useAccountWalletClient({
    accountId,
    ...rest
  }) {
    const signingCosmWasmClient = provider.useSigningCosmWasmClient(rest);
    const sender = provider.useSenderAddress(rest);
    return useMemo5(() => {
      if (!signingCosmWasmClient || !sender || !accountId) {
        console.debug(
          "useAccountWalletClient: no signingCosmWasmClient, sender, or accountId",
          {
            signingCosmWasmClient,
            sender,
            accountId
          }
        );
        return void 0;
      }
      return createAccountWalletClient({
        apiUrl,
        sender,
        signingCosmWasmClient,
        accountId
      });
    }, [apiUrl, signingCosmWasmClient, sender, accountId]);
  }
  return {
    apiUrl,
    provider,
    useApiClient,
    usePublicClient,
    useWalletClient,
    useAccountPublicClient,
    useAccountWalletClient
  };
}
export {
  AbstractProvider,
  createConfig,
  useAbstractModuleClient,
  useAbstractModuleQueryClient,
  useAbstractModuleVersion,
  useAccountAddress,
  useAccountAddressFromApi,
  useAccountBalancesFromApi,
  useAccountSettings,
  useAccounts,
  useAccountsAddressesFromApi,
  useAnsTokenFromApi,
  useClaimNamespace,
  useConfig,
  useCosmWasmClient,
  useCreateAccount,
  useCreateAccountMonarchy,
  useCreateRemoteAccount,
  useCreateSubAccount,
  useDeposit,
  useEnableIbc,
  useExecute,
  useExecuteOnRemote,
  useExecuteOnRemoteModule,
  useExecuteRemote,
  useInstallModules,
  useModuleClient,
  useModuleInstantiate2Address,
  useModuleInstantiate2AddressFromApi,
  useModuleQueryClient,
  useModules,
  useModulesFromApi,
  usePredictAccountAddress,
  usePredictModuleAddress,
  useRemoteAccountIds,
  useRemoteAccounts,
  useRemoteHosts,
  useRequestRemoteFunds,
  useSendFunds,
  useSendFundsToRemote,
  useSenderAddress,
  useSignAndBroadcast,
  useSigningCosmWasmClient,
  useSimulateExecuteRemoteAccount,
  useSimulateRemoteMsg,
  useSmartQuery,
  useSubAccountIdsByModuleIdFromApi,
  useSubAccountIdsFromApi,
  useUpdateInfo,
  useUpdateSettings,
  useUpdateStatus,
  useUpgradeModule,
  useUpgradeModules,
  useUseSendFundsToRemote,
  useWithdraw
};

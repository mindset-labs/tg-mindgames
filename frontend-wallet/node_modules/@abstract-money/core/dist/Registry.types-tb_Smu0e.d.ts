/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/
type AccountTrace$1 = "local" | {
    remote: TruncatedChainId$1[];
};
type TruncatedChainId$1 = string;
type AddAuthenticator = {
    Secp256K1: {
        id: number;
        pubkey: Binary;
        signature: Binary;
    };
} | {
    Ed25519: {
        id: number;
        pubkey: Binary;
        signature: Binary;
    };
} | {
    EthWallet: {
        address: string;
        id: number;
        signature: Binary;
    };
} | {
    Jwt: {
        aud: string;
        id: number;
        sub: string;
        token: Binary;
    };
} | {
    Secp256R1: {
        id: number;
        pubkey: Binary;
        signature: Binary;
    };
} | {
    Passkey: {
        credential: Binary;
        id: number;
        url: string;
    };
};
type Binary = string;
type Namespace$1 = string;
type ModuleVersion$1 = "latest" | {
    version: string;
};
type GovernanceDetailsForString = {
    monarchy: {
        monarch: string;
    };
} | {
    sub_account: {
        account: string;
    };
} | {
    external: {
        governance_address: string;
        governance_type: string;
    };
} | {
    n_f_t: {
        collection_addr: string;
        token_id: string;
    };
} | {
    abstract_account: {
        address: Addr$1;
    };
} | {
    renounced: {};
};
type Addr$1 = string;
interface InstantiateMsg$1 {
    account_id?: AccountId$1 | null;
    authenticator?: AddAuthenticator | null;
    code_id: number;
    description?: string | null;
    install_modules?: ModuleInstallConfig[];
    link?: string | null;
    name?: string | null;
    namespace?: string | null;
    owner: GovernanceDetailsForString;
}
interface AccountId$1 {
    seq: number;
    trace: AccountTrace$1;
}
interface ModuleInstallConfig {
    init_msg?: Binary | null;
    module: ModuleInfo$1;
}
interface ModuleInfo$1 {
    name: string;
    namespace: Namespace$1;
    version: ModuleVersion$1;
}
type ExecuteMsg$1 = {
    execute: {
        msgs: CosmosMsgForEmpty[];
    };
} | {
    execute_with_data: {
        msg: CosmosMsgForEmpty;
    };
} | {
    execute_on_module: {
        exec_msg: Binary;
        funds: Coin$1[];
        module_id: string;
    };
} | {
    admin_execute: {
        addr: string;
        msg: Binary;
    };
} | {
    admin_execute_on_module: {
        module_id: string;
        msg: Binary;
    };
} | {
    ica_action: {
        action_query_msg: Binary;
    };
} | {
    update_internal_config: InternalConfigAction;
} | {
    install_modules: {
        modules: ModuleInstallConfig[];
    };
} | {
    uninstall_module: {
        module_id: string;
    };
} | {
    upgrade: {
        modules: [ModuleInfo$1, Binary | null][];
    };
} | {
    create_sub_account: {
        account_id?: number | null;
        description?: string | null;
        install_modules: ModuleInstallConfig[];
        link?: string | null;
        name?: string | null;
        namespace?: string | null;
    };
} | {
    update_info: {
        description?: string | null;
        link?: string | null;
        name?: string | null;
    };
} | {
    update_status: {
        is_suspended?: boolean | null;
    };
} | {
    update_sub_account: UpdateSubAccountAction;
} | {
    update_ownership: GovAction;
} | {
    add_auth_method: {
        add_authenticator: AddAuthenticator;
    };
} | {
    remove_auth_method: {
        id: number;
    };
};
type CosmosMsgForEmpty = {
    bank: BankMsg;
} | {
    custom: Empty;
} | {
    staking: StakingMsg;
} | {
    distribution: DistributionMsg;
} | {
    stargate: {
        type_url: string;
        value: Binary;
    };
} | {
    any: AnyMsg;
} | {
    ibc: IbcMsg;
} | {
    wasm: WasmMsg;
} | {
    gov: GovMsg;
};
type BankMsg = {
    send: {
        amount: Coin$1[];
        to_address: string;
    };
} | {
    burn: {
        amount: Coin$1[];
    };
};
type Uint128$1 = string;
type StakingMsg = {
    delegate: {
        amount: Coin$1;
        validator: string;
    };
} | {
    undelegate: {
        amount: Coin$1;
        validator: string;
    };
} | {
    redelegate: {
        amount: Coin$1;
        dst_validator: string;
        src_validator: string;
    };
};
type DistributionMsg = {
    set_withdraw_address: {
        address: string;
    };
} | {
    withdraw_delegator_reward: {
        validator: string;
    };
} | {
    fund_community_pool: {
        amount: Coin$1[];
    };
};
type IbcMsg = {
    transfer: {
        amount: Coin$1;
        channel_id: string;
        memo?: string | null;
        timeout: IbcTimeout;
        to_address: string;
    };
} | {
    send_packet: {
        channel_id: string;
        data: Binary;
        timeout: IbcTimeout;
    };
} | {
    close_channel: {
        channel_id: string;
    };
};
type Timestamp$1 = Uint64$1;
type Uint64$1 = string;
type WasmMsg = {
    execute: {
        contract_addr: string;
        funds: Coin$1[];
        msg: Binary;
    };
} | {
    instantiate: {
        admin?: string | null;
        code_id: number;
        funds: Coin$1[];
        label: string;
        msg: Binary;
    };
} | {
    instantiate2: {
        admin?: string | null;
        code_id: number;
        funds: Coin$1[];
        label: string;
        msg: Binary;
        salt: Binary;
    };
} | {
    migrate: {
        contract_addr: string;
        msg: Binary;
        new_code_id: number;
    };
} | {
    update_admin: {
        admin: string;
        contract_addr: string;
    };
} | {
    clear_admin: {
        contract_addr: string;
    };
};
type GovMsg = {
    vote: {
        option: VoteOption;
        proposal_id: number;
    };
} | {
    vote_weighted: {
        options: WeightedVoteOption[];
        proposal_id: number;
    };
};
type VoteOption = "yes" | "no" | "abstain" | "no_with_veto";
type Decimal = string;
type InternalConfigAction = {
    update_module_addresses: {
        to_add: [string, string][];
        to_remove: string[];
    };
} | {
    update_whitelist: {
        to_add: string[];
        to_remove: string[];
    };
};
type UpdateSubAccountAction = {
    unregister_sub_account: {
        id: number;
    };
} | {
    register_sub_account: {
        id: number;
    };
};
type GovAction = {
    transfer_ownership: {
        expiry?: Expiration$1 | null;
        new_owner: GovernanceDetailsForString;
    };
} | "accept_ownership" | "renounce_ownership";
type Expiration$1 = {
    at_height: number;
} | {
    at_time: Timestamp$1;
} | {
    never: {};
};
interface Coin$1 {
    amount: Uint128$1;
    denom: string;
}
interface Empty {
}
interface AnyMsg {
    type_url: string;
    value: Binary;
}
interface IbcTimeout {
    block?: IbcTimeoutBlock | null;
    timestamp?: Timestamp$1 | null;
}
interface IbcTimeoutBlock {
    height: number;
    revision: number;
}
interface WeightedVoteOption {
    option: VoteOption;
    weight: Decimal;
}
type QueryMsg$1 = {
    config: {};
} | {
    module_versions: {
        ids: string[];
    };
} | {
    module_addresses: {
        ids: string[];
    };
} | {
    module_infos: {
        limit?: number | null;
        start_after?: string | null;
    };
} | {
    info: {};
} | {
    sub_account_ids: {
        limit?: number | null;
        start_after?: number | null;
    };
} | {
    top_level_owner: {};
} | {
    ownership: {};
} | {
    authenticator_by_i_d: {
        id: number;
    };
} | {
    authenticator_i_ds: {};
};
interface MigrateMsg$1 {
}
interface ConfigResponse$1 {
    account_id: AccountId$1;
    is_suspended: boolean;
    module_factory_address: Addr$1;
    registry_address: Addr$1;
    whitelisted_addresses: Addr$1[];
}
interface InfoResponse {
    info: AccountInfo;
}
interface AccountInfo {
    description?: string | null;
    link?: string | null;
    name?: string | null;
}
interface ModuleAddressesResponse {
    modules: [string, Addr$1][];
}
interface ModuleInfosResponse {
    module_infos: AccountModuleInfo[];
}
interface AccountModuleInfo {
    address: Addr$1;
    id: string;
    version: ContractVersion;
}
interface ContractVersion {
    contract: string;
    version: string;
}
interface ModuleVersionsResponse {
    versions: ContractVersion[];
}
interface OwnershipForString$1 {
    owner: GovernanceDetailsForString;
    pending_expiry?: Expiration$1 | null;
    pending_owner?: GovernanceDetailsForString | null;
}
interface SubAccountIdsResponse {
    sub_accounts: number[];
}
interface TopLevelOwnerResponse {
    address: Addr$1;
}

type Account_types_AccountInfo = AccountInfo;
type Account_types_AccountModuleInfo = AccountModuleInfo;
type Account_types_AddAuthenticator = AddAuthenticator;
type Account_types_AnyMsg = AnyMsg;
type Account_types_BankMsg = BankMsg;
type Account_types_Binary = Binary;
type Account_types_ContractVersion = ContractVersion;
type Account_types_CosmosMsgForEmpty = CosmosMsgForEmpty;
type Account_types_Decimal = Decimal;
type Account_types_DistributionMsg = DistributionMsg;
type Account_types_Empty = Empty;
type Account_types_GovAction = GovAction;
type Account_types_GovMsg = GovMsg;
type Account_types_GovernanceDetailsForString = GovernanceDetailsForString;
type Account_types_IbcMsg = IbcMsg;
type Account_types_IbcTimeout = IbcTimeout;
type Account_types_IbcTimeoutBlock = IbcTimeoutBlock;
type Account_types_InfoResponse = InfoResponse;
type Account_types_InternalConfigAction = InternalConfigAction;
type Account_types_ModuleAddressesResponse = ModuleAddressesResponse;
type Account_types_ModuleInfosResponse = ModuleInfosResponse;
type Account_types_ModuleInstallConfig = ModuleInstallConfig;
type Account_types_ModuleVersionsResponse = ModuleVersionsResponse;
type Account_types_StakingMsg = StakingMsg;
type Account_types_SubAccountIdsResponse = SubAccountIdsResponse;
type Account_types_TopLevelOwnerResponse = TopLevelOwnerResponse;
type Account_types_UpdateSubAccountAction = UpdateSubAccountAction;
type Account_types_VoteOption = VoteOption;
type Account_types_WasmMsg = WasmMsg;
type Account_types_WeightedVoteOption = WeightedVoteOption;
declare namespace Account_types {
  export type { AccountId$1 as AccountId, Account_types_AccountInfo as AccountInfo, Account_types_AccountModuleInfo as AccountModuleInfo, AccountTrace$1 as AccountTrace, Account_types_AddAuthenticator as AddAuthenticator, Addr$1 as Addr, Account_types_AnyMsg as AnyMsg, Account_types_BankMsg as BankMsg, Account_types_Binary as Binary, Coin$1 as Coin, ConfigResponse$1 as ConfigResponse, Account_types_ContractVersion as ContractVersion, Account_types_CosmosMsgForEmpty as CosmosMsgForEmpty, Account_types_Decimal as Decimal, Account_types_DistributionMsg as DistributionMsg, Account_types_Empty as Empty, ExecuteMsg$1 as ExecuteMsg, Expiration$1 as Expiration, Account_types_GovAction as GovAction, Account_types_GovMsg as GovMsg, Account_types_GovernanceDetailsForString as GovernanceDetailsForString, Account_types_IbcMsg as IbcMsg, Account_types_IbcTimeout as IbcTimeout, Account_types_IbcTimeoutBlock as IbcTimeoutBlock, Account_types_InfoResponse as InfoResponse, InstantiateMsg$1 as InstantiateMsg, Account_types_InternalConfigAction as InternalConfigAction, MigrateMsg$1 as MigrateMsg, Account_types_ModuleAddressesResponse as ModuleAddressesResponse, ModuleInfo$1 as ModuleInfo, Account_types_ModuleInfosResponse as ModuleInfosResponse, Account_types_ModuleInstallConfig as ModuleInstallConfig, ModuleVersion$1 as ModuleVersion, Account_types_ModuleVersionsResponse as ModuleVersionsResponse, Namespace$1 as Namespace, OwnershipForString$1 as OwnershipForString, QueryMsg$1 as QueryMsg, Account_types_StakingMsg as StakingMsg, Account_types_SubAccountIdsResponse as SubAccountIdsResponse, Timestamp$1 as Timestamp, Account_types_TopLevelOwnerResponse as TopLevelOwnerResponse, TruncatedChainId$1 as TruncatedChainId, Uint128$1 as Uint128, Uint64$1 as Uint64, Account_types_UpdateSubAccountAction as UpdateSubAccountAction, Account_types_VoteOption as VoteOption, Account_types_WasmMsg as WasmMsg, Account_types_WeightedVoteOption as WeightedVoteOption };
}

/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/
type Uint128 = string;
interface InstantiateMsg {
    admin: string;
    namespace_registration_fee?: Coin | null;
    security_enabled?: boolean | null;
}
interface Coin {
    amount: Uint128;
    denom: string;
}
type ExecuteMsg = {
    remove_module: {
        module: ModuleInfo;
    };
} | {
    yank_module: {
        module: ModuleInfo;
    };
} | {
    propose_modules: {
        modules: [ModuleInfo, ModuleReference][];
    };
} | {
    update_module_configuration: {
        module_name: string;
        namespace: Namespace;
        update_module: UpdateModule;
    };
} | {
    approve_or_reject_modules: {
        approves: ModuleInfo[];
        rejects: ModuleInfo[];
    };
} | {
    claim_namespace: {
        account_id: AccountId;
        namespace: string;
    };
} | {
    forgo_namespace: {
        namespaces: string[];
    };
} | {
    add_account: {
        creator: string;
        namespace?: string | null;
    };
} | {
    update_config: {
        namespace_registration_fee?: ClearableForCoin | null;
        security_enabled?: boolean | null;
    };
} | {
    update_ownership: Action;
};
type Namespace = string;
type ModuleVersion = "latest" | {
    version: string;
};
type ModuleReference = {
    account: number;
} | {
    native: Addr;
} | {
    adapter: Addr;
} | {
    app: number;
} | {
    standalone: number;
} | {
    service: Addr;
};
type Addr = string;
type UpdateModule = {
    default: {
        metadata: string;
    };
} | {
    versioned: {
        instantiation_funds?: Coin[] | null;
        metadata?: string | null;
        monetization?: Monetization | null;
        version: string;
    };
};
type Monetization = "none" | {
    install_fee: FixedFee;
};
type AccountTrace = "local" | {
    remote: TruncatedChainId[];
};
type TruncatedChainId = string;
type ClearableForCoin = "clear" | {
    set: Coin;
};
type Action = {
    transfer_ownership: {
        expiry?: Expiration | null;
        new_owner: string;
    };
} | "accept_ownership" | "renounce_ownership";
type Expiration = {
    at_height: number;
} | {
    at_time: Timestamp;
} | {
    never: {};
};
type Timestamp = Uint64;
type Uint64 = string;
interface ModuleInfo {
    name: string;
    namespace: Namespace;
    version: ModuleVersion;
}
interface FixedFee {
    fee: Coin;
}
interface AccountId {
    seq: number;
    trace: AccountTrace;
}
type QueryMsg = {
    accounts: {
        account_ids: AccountId[];
    };
} | {
    modules: {
        infos: ModuleInfo[];
    };
} | {
    namespaces: {
        accounts: AccountId[];
    };
} | {
    namespace: {
        namespace: Namespace;
    };
} | {
    config: {};
} | {
    account_list: {
        limit?: number | null;
        start_after?: AccountId | null;
    };
} | {
    module_list: {
        filter?: ModuleFilter | null;
        limit?: number | null;
        start_after?: ModuleInfo | null;
    };
} | {
    namespace_list: {
        limit?: number | null;
        start_after?: string | null;
    };
} | {
    ownership: {};
};
type ModuleStatus = "registered" | "pending" | "yanked";
interface ModuleFilter {
    name?: string | null;
    namespace?: string | null;
    status?: ModuleStatus | null;
    version?: string | null;
}
type MigrateMsg = {
    instantiate: InstantiateMsg;
} | {
    migrate: {};
};
type AccountForAddr = Addr;
interface AccountListResponse {
    accounts: [AccountId, AccountForAddr][];
}
interface AccountsResponse {
    accounts: AccountForAddr[];
}
interface ConfigResponse {
    local_account_sequence: number;
    namespace_registration_fee?: Coin | null;
    security_enabled: boolean;
}
interface ModulesListResponse {
    modules: ModuleResponse[];
}
interface ModuleResponse {
    config: ModuleConfiguration;
    module: Module;
}
interface ModuleConfiguration {
    instantiation_funds: Coin[];
    metadata?: string | null;
    monetization: Monetization;
}
interface Module {
    info: ModuleInfo;
    reference: ModuleReference;
}
interface ModulesResponse {
    modules: ModuleResponse[];
}
type NamespaceResponse = {
    claimed: NamespaceInfo;
} | {
    unclaimed: {};
};
interface NamespaceInfo {
    account: AccountForAddr;
    account_id: AccountId;
}
interface NamespaceListResponse {
    namespaces: [Namespace, AccountId][];
}
interface NamespacesResponse {
    namespaces: [Namespace, AccountId][];
}
interface OwnershipForString {
    owner?: string | null;
    pending_expiry?: Expiration | null;
    pending_owner?: string | null;
}

type Registry_types_AccountForAddr = AccountForAddr;
type Registry_types_AccountId = AccountId;
type Registry_types_AccountListResponse = AccountListResponse;
type Registry_types_AccountTrace = AccountTrace;
type Registry_types_AccountsResponse = AccountsResponse;
type Registry_types_Action = Action;
type Registry_types_Addr = Addr;
type Registry_types_ClearableForCoin = ClearableForCoin;
type Registry_types_Coin = Coin;
type Registry_types_ConfigResponse = ConfigResponse;
type Registry_types_ExecuteMsg = ExecuteMsg;
type Registry_types_Expiration = Expiration;
type Registry_types_FixedFee = FixedFee;
type Registry_types_InstantiateMsg = InstantiateMsg;
type Registry_types_MigrateMsg = MigrateMsg;
type Registry_types_Module = Module;
type Registry_types_ModuleConfiguration = ModuleConfiguration;
type Registry_types_ModuleFilter = ModuleFilter;
type Registry_types_ModuleInfo = ModuleInfo;
type Registry_types_ModuleReference = ModuleReference;
type Registry_types_ModuleResponse = ModuleResponse;
type Registry_types_ModuleStatus = ModuleStatus;
type Registry_types_ModuleVersion = ModuleVersion;
type Registry_types_ModulesListResponse = ModulesListResponse;
type Registry_types_ModulesResponse = ModulesResponse;
type Registry_types_Monetization = Monetization;
type Registry_types_Namespace = Namespace;
type Registry_types_NamespaceInfo = NamespaceInfo;
type Registry_types_NamespaceListResponse = NamespaceListResponse;
type Registry_types_NamespaceResponse = NamespaceResponse;
type Registry_types_NamespacesResponse = NamespacesResponse;
type Registry_types_OwnershipForString = OwnershipForString;
type Registry_types_QueryMsg = QueryMsg;
type Registry_types_Timestamp = Timestamp;
type Registry_types_TruncatedChainId = TruncatedChainId;
type Registry_types_Uint128 = Uint128;
type Registry_types_Uint64 = Uint64;
type Registry_types_UpdateModule = UpdateModule;
declare namespace Registry_types {
  export type { Registry_types_AccountForAddr as AccountForAddr, Registry_types_AccountId as AccountId, Registry_types_AccountListResponse as AccountListResponse, Registry_types_AccountTrace as AccountTrace, Registry_types_AccountsResponse as AccountsResponse, Registry_types_Action as Action, Registry_types_Addr as Addr, Registry_types_ClearableForCoin as ClearableForCoin, Registry_types_Coin as Coin, Registry_types_ConfigResponse as ConfigResponse, Registry_types_ExecuteMsg as ExecuteMsg, Registry_types_Expiration as Expiration, Registry_types_FixedFee as FixedFee, Registry_types_InstantiateMsg as InstantiateMsg, Registry_types_MigrateMsg as MigrateMsg, Registry_types_Module as Module, Registry_types_ModuleConfiguration as ModuleConfiguration, Registry_types_ModuleFilter as ModuleFilter, Registry_types_ModuleInfo as ModuleInfo, Registry_types_ModuleReference as ModuleReference, Registry_types_ModuleResponse as ModuleResponse, Registry_types_ModuleStatus as ModuleStatus, Registry_types_ModuleVersion as ModuleVersion, Registry_types_ModulesListResponse as ModulesListResponse, Registry_types_ModulesResponse as ModulesResponse, Registry_types_Monetization as Monetization, Registry_types_Namespace as Namespace, Registry_types_NamespaceInfo as NamespaceInfo, Registry_types_NamespaceListResponse as NamespaceListResponse, Registry_types_NamespaceResponse as NamespaceResponse, Registry_types_NamespacesResponse as NamespacesResponse, Registry_types_OwnershipForString as OwnershipForString, Registry_types_QueryMsg as QueryMsg, Registry_types_Timestamp as Timestamp, Registry_types_TruncatedChainId as TruncatedChainId, Registry_types_Uint128 as Uint128, Registry_types_Uint64 as Uint64, Registry_types_UpdateModule as UpdateModule };
}

export { type AddAuthenticator as A, type Binary as B, type CosmosMsgForEmpty as C, type ExecuteMsg as D, type ExecuteMsg$1 as E, type QueryMsg as F, type GovAction as G, Account_types as H, type InternalConfigAction as I, type Module as J, type ModuleConfiguration as K, type ModuleResponse as L, type ModuleInstallConfig as M, type NamespacesResponse as N, type OwnershipForString$1 as O, type AccountModuleInfo as P, type QueryMsg$1 as Q, Registry_types as R, type SubAccountIdsResponse as S, type TopLevelOwnerResponse as T, type UpdateSubAccountAction as U, type InstantiateMsg$1 as V, type WasmMsg as W, type AccountTrace as X, type Coin$1 as a, type ModuleInfo$1 as b, type ModuleReference as c, type ModuleVersion$1 as d, type ConfigResponse$1 as e, type ModuleVersionsResponse as f, type ModuleAddressesResponse as g, type ModuleInfosResponse as h, type InfoResponse as i, type AccountId as j, type AccountsResponse as k, type ModuleInfo as l, type ModulesResponse as m, type Namespace as n, type NamespaceResponse as o, type ConfigResponse as p, type AccountListResponse as q, type ModuleFilter as r, type ModulesListResponse as s, type NamespaceListResponse as t, type OwnershipForString as u, type Coin as v, type UpdateModule as w, type ClearableForCoin as x, type Action as y, type ModuleVersion as z };

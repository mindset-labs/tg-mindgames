import { E as Evaluate, l as MaybeArray } from './types-DL_NvWZJ.js';
import { CosmWasmClient } from '@cosmjs/cosmwasm-stargate';
import { K as getCosmWasmClient, M as getAccountQueryClient, S as getRegistryQueryClient, A as getAnsHostQueryClient, u as getAnsHostAddressFromRegistry, y as getAnsHostQueryClientFromRegistry, C as getIbcClientQueryClient, F as getIcaClientQueryClient, q as getAbstractModuleAddressFromRegistry, O as getRegistryModuleData, E as ExtractAndPartializeParameters, d as getAnsHostAddressFromApi, b as getAccountsByOwnerFromApi, f as getAnsTokenFromApi, i as getAnsTokensFromApi, k as getModulesFromApi, m as getRegistryAddressFromApi, g as getAccountBalancesFromApi, o as getSubAccountIdsByModuleIdFromApi, s as getAbstractModuleVersion, I as getAnsHostVersionFromApi, w as getAnsHostQueryClientFromApi, Q as getRegistryQueryClientFromApi } from './get-registry-query-client-from-api-kZlB8Zat.js';
import * as cosmjs_types_cosmos_tx_v1beta1_service from 'cosmjs-types/cosmos/tx/v1beta1/service';
import { C as CosmosMsgForEmpty, j as AccountId } from './Registry.types-tb_Smu0e.js';

type ClientConfig = {
    /** A key for the client. */
    key?: string | undefined;
    /** A name for the client. */
    name?: string | undefined;
};
type BaseClient = {
    /** A key for the client. */
    key: string;
    /** A name for the client. */
    name: string;
};
type Client<extended extends Extended | undefined = Extended | undefined> = BaseClient & (extended extends Extended ? extended : unknown) & {
    extend: <const client extends Extended>(fn: (client: Client<extended>) => client) => Client<Evaluate<client> & (extended extends Extended ? extended : unknown)>;
};
type Extended<TClient extends BaseClient = BaseClient> = Evaluate<{
    [_ in keyof TClient]?: undefined;
} & {
    [key: string]: unknown;
}>;
declare function createClient(parameters: ClientConfig): Client;

type ExtractAndPartializeDecoratedParametersFromParameters$2<fn extends (payload: any) => any> = ExtractAndPartializeParameters<fn, 'cosmWasmClient'>;
/**
 * Actions that query the chain for Abstract things directly using the {@link CosmWasmClient}.
 */
type AbstractBaseActions = {
    getCosmWasmClient(): ReturnType<typeof getCosmWasmClient>;
    getAccountQueryClient(parameters: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getAccountQueryClient>): ReturnType<typeof getAccountQueryClient>;
    getRegistryQueryClient(parameters: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getRegistryQueryClient>): ReturnType<typeof getRegistryQueryClient>;
    getAnsHostQueryClient(parameters: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getAnsHostQueryClient>): ReturnType<typeof getAnsHostQueryClient>;
    getAnsHostAddressFromRegistry(parameters: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getAnsHostAddressFromRegistry>): ReturnType<typeof getAnsHostAddressFromRegistry>;
    getAnsHostQueryClientFromRegistry(parameters: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getAnsHostQueryClientFromRegistry>): ReturnType<typeof getAnsHostQueryClientFromRegistry>;
    getIbcClientQueryClient(parameters: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getIbcClientQueryClient>): ReturnType<typeof getIbcClientQueryClient>;
    getIcaClientQueryClient(parameters: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getIcaClientQueryClient>): ReturnType<typeof getIcaClientQueryClient>;
    getAbstractModuleAddressFromRegistry(parameters: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getAbstractModuleAddressFromRegistry>): ReturnType<typeof getAbstractModuleAddressFromRegistry>;
    getRegistryModuleData(parameters: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getRegistryModuleData>): ReturnType<typeof getRegistryModuleData>;
};

type AbstractBaseClientConfig = ClientConfig & {
    cosmWasmClient: CosmWasmClient;
};
type AbstractBaseClient = Evaluate<Client<AbstractBaseActions>>;
declare function createAbstractBaseClient(parameters: AbstractBaseClientConfig): AbstractBaseClient;

type ExtractAndPartializeDecoratedParametersFromParameters$1<fn extends (payload: any) => any> = ExtractAndPartializeParameters<fn, 'apiUrl'>;
/**
 * Query actions to be performed on the Abstract API.
 */
type ApiActions = {
    getAnsHostAddressFromApi(parameters: ExtractAndPartializeDecoratedParametersFromParameters$1<typeof getAnsHostAddressFromApi>): ReturnType<typeof getAnsHostAddressFromApi>;
    getAccountsByOwnerFromApi(parameters: ExtractAndPartializeDecoratedParametersFromParameters$1<typeof getAccountsByOwnerFromApi>): ReturnType<typeof getAccountsByOwnerFromApi>;
    getAnsTokenFromApi(parameters: ExtractAndPartializeDecoratedParametersFromParameters$1<typeof getAnsTokenFromApi>): ReturnType<typeof getAnsTokenFromApi>;
    getAnsTokensFromApi(parameters: ExtractAndPartializeDecoratedParametersFromParameters$1<typeof getAnsTokensFromApi>): ReturnType<typeof getAnsTokensFromApi>;
    getModulesFromApi(parameters: ExtractAndPartializeDecoratedParametersFromParameters$1<typeof getModulesFromApi>): ReturnType<typeof getModulesFromApi>;
    getRegistryAddressFromApi(parameters: ExtractAndPartializeDecoratedParametersFromParameters$1<typeof getRegistryAddressFromApi>): ReturnType<typeof getRegistryAddressFromApi>;
    getAccountBalancesFromApi(parameters: ExtractAndPartializeDecoratedParametersFromParameters$1<typeof getAccountBalancesFromApi>): ReturnType<typeof getAccountBalancesFromApi>;
    getSubAccountIdsByModuleIdFromApi(parameters: ExtractAndPartializeDecoratedParametersFromParameters$1<typeof getSubAccountIdsByModuleIdFromApi>): ReturnType<typeof getSubAccountIdsByModuleIdFromApi>;
};

type ApiClientConfig = ClientConfig & {
    apiUrl?: string;
};
/**
 * A client to query the Abstract API.
 */
type ApiClient = Evaluate<Client<ApiActions>>;
declare function createApiClient(parameters: ApiClientConfig): ApiClient;

type GetSimulationResultParameters = {
    apiUrl: string;
    chainName: string;
    sender: string;
    msgs: MaybeArray<CosmosMsgForEmpty>;
};
/**
 * Simulate messages to be executed.
 * @param accountId
 * @param apiUrl
 * @param msgs
 * @experimental
 * */
declare function getSimulationResultFromApi({ apiUrl, chainName, sender, msgs, }: GetSimulationResultParameters): Promise<cosmjs_types_cosmos_tx_v1beta1_service.SimulateResponse>;

type GetAccountsAddressesFromApiParameters = {
    accountIds: AccountId[];
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
};
declare function getAccountAddressesFromApi({ accountIds, cosmWasmClient, apiUrl, }: GetAccountsAddressesFromApiParameters): Promise<{
    accounts: string[];
}>;

type GetAccountInstantiate2AddressFromApi = {
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
    creator: string;
    salt: {
        accountId: AccountId;
    } | {
        custom: string | Uint8Array;
    };
};
/**
 * Retrieve the calculated manager init2 address from the api.
 * @param accountId
 * @param cosmWasmClient
 * @param apiUrl
 * @param creator - the creator address
 * @param salt - the (optional) salt to use for the address calculation. If not provided, will use the accountId salt.
 */
declare function getAccountInstantiate2AddressFromApi({ cosmWasmClient, apiUrl, creator, salt, }: GetAccountInstantiate2AddressFromApi): Promise<string>;

type GetRemoteHosts = {
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
};
declare function getRemoteHostsFromApi({ cosmWasmClient, apiUrl, }: GetRemoteHosts): Promise<[string, string][]>;

type SimulateRemoteCosmosMsgParameters = {
    apiUrl: string;
    hostChainName: string;
    msgs: MaybeArray<CosmosMsgForEmpty>;
};
/**
 * Simulate messages to be executed on a remote chain. This simulates execution as the IBC host.
 * Not from API because it only retrieves the RPC / version control from API.
 * @param accountId
 * @param apiUrl
 * @param hostChainName
 * @param msgs
 * @experimental
 */
declare function simulateRemoteCosmosMsg({ apiUrl, hostChainName, msgs, }: SimulateRemoteCosmosMsgParameters): Promise<cosmjs_types_cosmos_tx_v1beta1_service.SimulateResponse>;

type ExtractAndPartializeDecoratedParametersFromParameters<fn extends (payload: any) => any> = ExtractAndPartializeParameters<fn, 'cosmWasmClient' | 'apiUrl'>;
/**
 * "Public" query actions available for the Abstract infrastructure.
 * Also see {@link AbstractBaseActions} for more public query actions.
 */
type PublicActions = {
    getAccountsAddresses(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof getAccountAddressesFromApi>): ReturnType<typeof getAccountAddressesFromApi>;
    predictAccountAddress(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof getAccountInstantiate2AddressFromApi>): ReturnType<typeof getAccountInstantiate2AddressFromApi>;
    getAbstractModuleVersion(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof getAbstractModuleVersion>): ReturnType<typeof getAbstractModuleVersion>;
    getAnsHostVersion(parameters?: ExtractAndPartializeDecoratedParametersFromParameters<typeof getAnsHostVersionFromApi>): ReturnType<typeof getAnsHostVersionFromApi>;
    getAnsHostQueryClientFromApi(parameters?: ExtractAndPartializeDecoratedParametersFromParameters<typeof getAnsHostQueryClientFromApi>): ReturnType<typeof getAnsHostQueryClientFromApi>;
    getRegistryQueryClientFromApi(parameters?: ExtractAndPartializeDecoratedParametersFromParameters<typeof getRegistryQueryClientFromApi>): ReturnType<typeof getRegistryQueryClientFromApi>;
    getRemoteHosts(parameters?: ExtractAndPartializeDecoratedParametersFromParameters<typeof getRemoteHostsFromApi>): ReturnType<typeof getRemoteHostsFromApi>;
    getSimulationResult(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof getSimulationResultFromApi>): ReturnType<typeof getSimulationResultFromApi>;
    simulateRemoteCosmosMsg(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof simulateRemoteCosmosMsg>): ReturnType<typeof simulateRemoteCosmosMsg>;
};

type PublicClientConfig = AbstractBaseClientConfig & ApiClientConfig;
/**
 * A public client for querying the Abstract infrastructure via contract & API.
 */
type PublicClient = Evaluate<Client<AbstractBaseActions & PublicActions>>;
/**
 * Create a public client to query the Abstract infrastructure.
 * Public -> AbstractBase & Api
 * @param parameters
 */
declare function createPublicClient(parameters: PublicClientConfig): PublicClient;

export { type ApiClientConfig as A, type BaseClient as B, type ClientConfig as C, type Extended as E, type PublicClientConfig as P, type PublicClient as a, type ApiClient as b, createPublicClient as c, createApiClient as d, type AbstractBaseClientConfig as e, type AbstractBaseClient as f, createAbstractBaseClient as g, type Client as h, createClient as i };

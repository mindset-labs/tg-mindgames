import { MsgExecuteContractEncodeObject } from '@cosmjs/cosmwasm-stargate';
import { C as CosmosMsgForEmpty, a as Coin, B as Binary, I as InternalConfigAction, M as ModuleInstallConfig, b as ModuleInfo, U as UpdateSubAccountAction, G as GovAction, A as AddAuthenticator } from './Registry.types-tb_Smu0e.js';

/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

interface AccountMsg {
    contractAddress: string;
    sender: string;
    execute: ({ msgs }: {
        msgs: CosmosMsgForEmpty[];
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    executeWithData: ({ msg }: {
        msg: CosmosMsgForEmpty;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    executeOnModule: ({ execMsg, funds, moduleId }: {
        execMsg: Binary;
        funds: Coin[];
        moduleId: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    adminExecute: ({ addr, msg }: {
        addr: string;
        msg: Binary;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    adminExecuteOnModule: ({ moduleId, msg }: {
        moduleId: string;
        msg: Binary;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    icaAction: ({ actionQueryMsg }: {
        actionQueryMsg: Binary;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateInternalConfig: (internalConfigAction: InternalConfigAction, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    installModules: ({ modules }: {
        modules: ModuleInstallConfig[];
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    uninstallModule: ({ moduleId }: {
        moduleId: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    upgrade: ({ modules }: {
        modules: ModuleInfo[][];
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    createSubAccount: ({ accountId, description, installModules, link, name, namespace }: {
        accountId?: number;
        description?: string;
        installModules: ModuleInstallConfig[];
        link?: string;
        name?: string;
        namespace?: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateInfo: ({ description, link, name }: {
        description?: string;
        link?: string;
        name?: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateStatus: ({ isSuspended }: {
        isSuspended?: boolean;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateSubAccount: (updateSubAccountAction: UpdateSubAccountAction, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateOwnership: (govAction: GovAction, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    addAuthMethod: ({ addAuthenticator }: {
        addAuthenticator: AddAuthenticator;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    removeAuthMethod: ({ id }: {
        id: number;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
}
declare class AccountMsgComposer implements AccountMsg {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    execute: ({ msgs }: {
        msgs: CosmosMsgForEmpty[];
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    executeWithData: ({ msg }: {
        msg: CosmosMsgForEmpty;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    executeOnModule: ({ execMsg, funds, moduleId }: {
        execMsg: Binary;
        funds: Coin[];
        moduleId: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    adminExecute: ({ addr, msg }: {
        addr: string;
        msg: Binary;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    adminExecuteOnModule: ({ moduleId, msg }: {
        moduleId: string;
        msg: Binary;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    icaAction: ({ actionQueryMsg }: {
        actionQueryMsg: Binary;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateInternalConfig: (internalConfigAction: InternalConfigAction, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    installModules: ({ modules }: {
        modules: ModuleInstallConfig[];
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    uninstallModule: ({ moduleId }: {
        moduleId: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    upgrade: ({ modules }: {
        modules: ModuleInfo[][];
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    createSubAccount: ({ accountId, description, installModules, link, name, namespace }: {
        accountId?: number | undefined;
        description?: string | undefined;
        installModules: ModuleInstallConfig[];
        link?: string | undefined;
        name?: string | undefined;
        namespace?: string | undefined;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateInfo: ({ description, link, name }: {
        description?: string | undefined;
        link?: string | undefined;
        name?: string | undefined;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateStatus: ({ isSuspended }: {
        isSuspended?: boolean | undefined;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateSubAccount: (updateSubAccountAction: UpdateSubAccountAction, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateOwnership: (govAction: GovAction, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    addAuthMethod: ({ addAuthenticator }: {
        addAuthenticator: AddAuthenticator;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    removeAuthMethod: ({ id }: {
        id: number;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
}

export { type AccountMsg as A, AccountMsgComposer as a };

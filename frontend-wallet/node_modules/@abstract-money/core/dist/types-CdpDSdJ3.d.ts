import { Merge } from 'type-fest';
import { M as ModuleInstallConfig, d as ModuleVersion } from './Registry.types-tb_Smu0e.js';
import { Coin } from '@cosmjs/stargate';
import { C as CW20Token, N as NativeToken } from './types-DL_NvWZJ.js';

type MergedModuleInstallConfig = Merge<ModuleInstallConfig['module'], Pick<ModuleInstallConfig, 'init_msg'>>;
declare const moduleInstallConfig: ({ init_msg, ...module }: MergedModuleInstallConfig) => {
    init_msg: string | null | undefined;
    module: {
        name: string;
        namespace: string;
        version: ModuleVersion;
    };
};

type CW20Asset<TAddress extends string = string> = Pick<Coin, 'amount'> & CW20Token<TAddress>;
declare function isCW20Asset(asset: Asset): asset is CW20Asset;

type NativeAsset<TDenom extends string = string> = NativeToken<TDenom> & Pick<Coin, 'amount'>;
declare function isNativeAsset(asset: Asset): asset is NativeAsset;

type Asset = NativeAsset | CW20Asset;

declare const MODULE_DELIMITER = ":";
type ModuleId = `${string}${typeof MODULE_DELIMITER}${string}`;

export { type Asset as A, type CW20Asset as C, MODULE_DELIMITER as M, type NativeAsset as N, isNativeAsset as a, type ModuleId as b, type MergedModuleInstallConfig as c, isCW20Asset as i, moduleInstallConfig as m };

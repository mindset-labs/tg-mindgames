import { CosmWasmClient } from '@cosmjs/cosmwasm-stargate';
import { a as IcaClientQueryClient, t as AccountQueryClient, x as AnsHostQueryClient, I as IbcClientQueryClient, N as RegistryQueryClient } from './Registry.client-DeRpB8OW.js';
import { J as Module, z as ModuleVersion } from './Registry.types-tb_Smu0e.js';
import { k as ModuleData, E as Evaluate, O as Omit, A as AccountId, c as AnsId, n as ModuleFilter } from './types-DL_NvWZJ.js';
import { StdFee, Coin } from '@cosmjs/stargate';

type GetIcaClientQueryClientParameters = {
    cosmWasmClient: CosmWasmClient;
    icaClientAddress: string;
};
declare function getIcaClientQueryClient({ cosmWasmClient, icaClientAddress, }: GetIcaClientQueryClientParameters): IcaClientQueryClient;

type GetAbstractModuleAddressFromRegistry = {
    moduleName: string;
    cosmWasmClient: CosmWasmClient;
    registryAddress: string;
    version?: string;
};
declare function getAbstractModuleAddressFromRegistry({ moduleName, cosmWasmClient, registryAddress, version, }: GetAbstractModuleAddressFromRegistry): Promise<string>;

type GetAccountQueryClientParameters = {
    cosmWasmClient: CosmWasmClient;
    accountAddress: string;
};
declare function getAccountQueryClient({ cosmWasmClient, accountAddress, }: GetAccountQueryClientParameters): Promise<AccountQueryClient>;

type GetAnsHostAddressFromRegistryParameters = {
    cosmWasmClient: CosmWasmClient;
    registryAddress: string;
    version?: string;
};
declare function getAnsHostAddressFromRegistry({ cosmWasmClient, registryAddress, version, }: GetAnsHostAddressFromRegistryParameters): Promise<string>;

type GetAnsHostQueryClientParameters = {
    cosmWasmClient: CosmWasmClient;
    ansHostAddress: string;
};
declare function getAnsHostQueryClient({ cosmWasmClient, ansHostAddress, }: GetAnsHostQueryClientParameters): Promise<AnsHostQueryClient>;

type GetAnsHostQueryClientFromRegistryParameters = {
    cosmWasmClient: CosmWasmClient;
    registryAddress: string;
    version?: string;
};
declare function getAnsHostQueryClientFromRegistry({ cosmWasmClient, registryAddress, version, }: GetAnsHostQueryClientFromRegistryParameters): Promise<AnsHostQueryClient>;

type GetCosmWasmClientParameters = {
    cosmWasmClient: CosmWasmClient;
};
declare function getCosmWasmClient({ cosmWasmClient, }: GetCosmWasmClientParameters): CosmWasmClient;

type GetIbcClientQueryClientParameters = {
    cosmWasmClient: CosmWasmClient;
    ibcClientAddress: string;
};
declare function getIbcClientQueryClient({ cosmWasmClient, ibcClientAddress, }: GetIbcClientQueryClientParameters): IbcClientQueryClient;

type GetRegistryModuleDataParameters<TVcModule extends Module = Module> = {
    cosmWasmClient: CosmWasmClient;
    module: TVcModule;
};
declare function getRegistryModuleData<const TVcModule extends Module = Module>({ cosmWasmClient, module, }: GetRegistryModuleDataParameters<TVcModule>): Promise<ModuleData | null>;

type GetRegistryQueryClientParameters = {
    cosmWasmClient: CosmWasmClient;
    registryAddress: string;
};
declare function getRegistryQueryClient({ cosmWasmClient, registryAddress, }: GetRegistryQueryClientParameters): RegistryQueryClient;

type WithCosmWasmSignOptions<parameters extends {} | readonly unknown[]> = Evaluate<parameters & {
    readonly fee: number | StdFee | 'auto';
    readonly memo?: string;
    readonly funds?: (Coin & {
        [key: string]: string;
    })[];
}>;
type ExtractAndPartializeParameters<fn extends (parameters: any) => any, keys extends keyof Parameters<fn>[0]> = Evaluate<Omit<Parameters<fn>[0], keys> & {
    readonly extra?: Partial<Pick<Parameters<fn>[0], keys>>;
}>;

type GetAccountBalancesFromApiParameters = {
    apiUrl: string;
    accountId: AccountId;
};
declare function getAccountBalancesFromApi({ apiUrl, accountId, }: GetAccountBalancesFromApiParameters): Promise<({
    amount: string;
    type: "native";
    denom: string;
} | {
    amount: string;
    address: string;
    type: "cw20";
})[] | undefined>;

type GetAccountsByOwnerFromApiParameters = {
    apiUrl: string;
    owner: string;
    chains: string[];
};
declare function getAccountsByOwnerFromApi({ apiUrl, owner, chains, }: GetAccountsByOwnerFromApiParameters): Promise<{
    seq: number;
    trace: "local" | {
        remote: string[];
    };
    chainName: string;
}[]>;

type GetAnsHostAddressFromApiParameters = {
    apiUrl: string;
    chainName: string;
};
declare function getAnsHostAddressFromApi({ apiUrl, chainName, }: GetAnsHostAddressFromApiParameters): Promise<string>;

type GetAnsTokenFromApiParameters = {
    apiUrl: string;
    chainName: string;
    id: AnsId;
};
declare function getAnsTokenFromApi({ apiUrl, chainName, id, }: GetAnsTokenFromApiParameters): Promise<{
    type: "cw20";
    address: string;
    id: string;
    denom?: undefined;
} | {
    type: "native";
    denom: string;
    id: string;
    address?: undefined;
}>;

type GetAnsTokensFromApiParameters = {
    apiUrl: string;
    chainName: string;
    ids: AnsId[];
};
declare function getAnsTokensFromApi({ apiUrl, chainName, ids, }: GetAnsTokensFromApiParameters): Promise<({
    type: "cw20";
    address: string;
    id: string;
    denom?: undefined;
} | {
    type: "native";
    denom: string;
    id: string;
    address?: undefined;
})[]>;

type GetModulesFromApiParameters = {
    apiUrl: string;
    chainName: string;
    filter?: ModuleFilter;
};
declare function getModulesFromApi({ apiUrl, chainName, filter, }: GetModulesFromApiParameters): Promise<{
    __typename?: "Module" | undefined;
    moduleId: string;
    version: string;
}[]>;

type GetRegistryAddressFromApiParameters = {
    apiUrl: string;
    chainName: string;
};
declare function getRegistryAddressFromApi({ apiUrl, chainName, }: GetRegistryAddressFromApiParameters): Promise<string>;

type GetSubAccountIdsByModuleIdFromApiParameters = {
    accountId: AccountId;
    apiUrl: string;
    moduleId: string;
};
declare function getSubAccountIdsByModuleIdFromApi({ accountId, moduleId, apiUrl, }: GetSubAccountIdsByModuleIdFromApiParameters): Promise<AccountId[]>;

type GetAbstractModuleVersion = {
    moduleName: string;
    cosmWasmClient: CosmWasmClient;
    version?: string;
    apiUrl: string;
};
declare function getAbstractModuleVersion({ moduleName, cosmWasmClient, version, apiUrl, }: GetAbstractModuleVersion): Promise<ModuleVersion>;

type GetAnsHostQueryClientFromApiParameters = {
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
};
declare function getAnsHostQueryClientFromApi({ cosmWasmClient, apiUrl, }: GetAnsHostQueryClientFromApiParameters): Promise<AnsHostQueryClient>;

type GetAnsHostVersionParameters = {
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
    version?: string;
};
declare function getAnsHostVersionFromApi({ cosmWasmClient, apiUrl, version, }: GetAnsHostVersionParameters): Promise<ModuleVersion>;

type GetRegistryQueryClientFromApiParameters = {
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
};
declare function getRegistryQueryClientFromApi({ cosmWasmClient, apiUrl, }: GetRegistryQueryClientFromApiParameters): Promise<RegistryQueryClient>;

export { getAnsHostQueryClient as A, type GetIbcClientQueryClientParameters as B, getIbcClientQueryClient as C, type GetIcaClientQueryClientParameters as D, type ExtractAndPartializeParameters as E, getIcaClientQueryClient as F, type GetAccountBalancesFromApiParameters as G, type GetAnsHostVersionParameters as H, getAnsHostVersionFromApi as I, type GetCosmWasmClientParameters as J, getCosmWasmClient as K, type GetAccountQueryClientParameters as L, getAccountQueryClient as M, type GetRegistryModuleDataParameters as N, getRegistryModuleData as O, type GetRegistryQueryClientFromApiParameters as P, getRegistryQueryClientFromApi as Q, type GetRegistryQueryClientParameters as R, getRegistryQueryClient as S, type WithCosmWasmSignOptions as W, type GetAccountsByOwnerFromApiParameters as a, getAccountsByOwnerFromApi as b, type GetAnsHostAddressFromApiParameters as c, getAnsHostAddressFromApi as d, type GetAnsTokenFromApiParameters as e, getAnsTokenFromApi as f, getAccountBalancesFromApi as g, type GetAnsTokensFromApiParameters as h, getAnsTokensFromApi as i, type GetModulesFromApiParameters as j, getModulesFromApi as k, type GetRegistryAddressFromApiParameters as l, getRegistryAddressFromApi as m, type GetSubAccountIdsByModuleIdFromApiParameters as n, getSubAccountIdsByModuleIdFromApi as o, type GetAbstractModuleAddressFromRegistry as p, getAbstractModuleAddressFromRegistry as q, type GetAbstractModuleVersion as r, getAbstractModuleVersion as s, type GetAnsHostAddressFromRegistryParameters as t, getAnsHostAddressFromRegistry as u, type GetAnsHostQueryClientFromApiParameters as v, getAnsHostQueryClientFromApi as w, type GetAnsHostQueryClientFromRegistryParameters as x, getAnsHostQueryClientFromRegistry as y, type GetAnsHostQueryClientParameters as z };

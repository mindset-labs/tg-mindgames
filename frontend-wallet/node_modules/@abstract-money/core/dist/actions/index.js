import {
  CommonModuleNames,
  claimNamespace,
  createAccount,
  createAccountMonarchy,
  createSubAccount,
  deposit,
  execute,
  getAbstractModuleAddressFromRegistry,
  getAbstractModuleVersion,
  getAccountAddressFromApi,
  getAccountBalancesFromApi,
  getAccountClient,
  getAccountClientFromApi,
  getAccountQueryClient,
  getAccountQueryClientFromApi,
  getAccountsByOwnerFromApi,
  getAnsHostAddressFromApi,
  getAnsHostAddressFromRegistry,
  getAnsHostClient,
  getAnsHostClientFromApi,
  getAnsHostClientFromRegistry,
  getAnsHostQueryClient,
  getAnsHostQueryClientFromApi,
  getAnsHostQueryClientFromRegistry,
  getAnsHostVersionFromApi,
  getAnsTokenFromApi,
  getAnsTokensFromApi,
  getAppModuleCodeIdFromRegistry,
  getChainRpcUrlFromApi,
  getCosmWasmClient,
  getIbcClientAddressFromRegistry,
  getIbcClientQueryClient,
  getIbcClientQueryClientFromAccount,
  getIbcClientQueryClientFromRegistry,
  getIcaClientQueryClient,
  getModuleAddress,
  getModuleFactoryAddressFromRegistry,
  getModuleInstantiate2AddressFromApi,
  getModules,
  getModulesFromApi,
  getNamespace,
  getOwner,
  getRegistryAddressFromApi,
  getRegistryClient,
  getRegistryClientFromApi,
  getRegistryModuleData,
  getRegistryQueryClient,
  getRegistryQueryClientFromApi,
  getRemoteAccountIds,
  getRemoteAccounts,
  getSenderAddress,
  getSigningCosmWasmClient,
  getSubAccountIds,
  getSubAccountIdsByModuleIdFromApi,
  getSubAccountSequences,
  revokeNamespace,
  sendFunds,
  upgradeModules,
  withdraw
} from "../chunk-WASRJSPC.js";
import "../chunk-B2V6LSMD.js";

// src/actions/public/get-ica-client-address-from-registry.ts
async function getIcaClientAddressFromRegistry({
  cosmWasmClient,
  registryAddress,
  version
}) {
  return getAbstractModuleAddressFromRegistry({
    moduleName: "ica-client" /* ICA_CLIENT */,
    cosmWasmClient,
    registryAddress,
    version
  });
}

// src/actions/public/get-ica-client-query-client-from-registry.ts
async function getIcaClientQueryClientFromRegistry({
  cosmWasmClient,
  registryAddress,
  version
}) {
  const icaClientAddress = await getIcaClientAddressFromRegistry({
    cosmWasmClient,
    registryAddress,
    version
  });
  return getIcaClientQueryClient({ cosmWasmClient, icaClientAddress });
}

// src/actions/public/get-module-factory-version.ts
async function getModuleFactoryVersion({
  cosmWasmClient,
  apiUrl,
  version
}) {
  return getAbstractModuleVersion({
    moduleName: "module-factory" /* MODULE_FACTORY */,
    cosmWasmClient,
    apiUrl,
    version
  });
}
export {
  CommonModuleNames,
  claimNamespace,
  createAccount,
  createAccountMonarchy,
  createSubAccount,
  deposit,
  execute,
  getAbstractModuleAddressFromRegistry,
  getAbstractModuleVersion,
  getAccountAddressFromApi,
  getAccountBalancesFromApi,
  getAccountClient,
  getAccountClientFromApi,
  getAccountQueryClient,
  getAccountQueryClientFromApi,
  getAccountsByOwnerFromApi,
  getAnsHostAddressFromApi,
  getAnsHostAddressFromRegistry,
  getAnsHostClient,
  getAnsHostClientFromApi,
  getAnsHostClientFromRegistry,
  getAnsHostQueryClient,
  getAnsHostQueryClientFromApi,
  getAnsHostQueryClientFromRegistry,
  getAnsHostVersionFromApi,
  getAnsTokenFromApi,
  getAnsTokensFromApi,
  getAppModuleCodeIdFromRegistry,
  getChainRpcUrlFromApi,
  getCosmWasmClient,
  getIbcClientAddressFromRegistry,
  getIbcClientQueryClient,
  getIbcClientQueryClientFromAccount,
  getIbcClientQueryClientFromRegistry,
  getIcaClientAddressFromRegistry,
  getIcaClientQueryClient,
  getIcaClientQueryClientFromRegistry,
  getModuleAddress,
  getModuleFactoryAddressFromRegistry,
  getModuleFactoryVersion,
  getModuleInstantiate2AddressFromApi,
  getModules,
  getModulesFromApi,
  getNamespace,
  getOwner,
  getRegistryAddressFromApi,
  getRegistryClient,
  getRegistryClientFromApi,
  getRegistryModuleData,
  getRegistryQueryClient,
  getRegistryQueryClientFromApi,
  getRemoteAccountIds,
  getRemoteAccounts,
  getSenderAddress,
  getSigningCosmWasmClient,
  getSubAccountIds,
  getSubAccountIdsByModuleIdFromApi,
  getSubAccountSequences,
  revokeNamespace,
  sendFunds,
  upgradeModules,
  withdraw
};

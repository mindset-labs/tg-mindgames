export { p as GetAbstractModuleAddressFromRegistry, r as GetAbstractModuleVersion, G as GetAccountBalancesFromApiParameters, L as GetAccountQueryClientParameters, a as GetAccountsByOwnerFromApiParameters, c as GetAnsHostAddressFromApiParameters, t as GetAnsHostAddressFromRegistryParameters, v as GetAnsHostQueryClientFromApiParameters, x as GetAnsHostQueryClientFromRegistryParameters, z as GetAnsHostQueryClientParameters, H as GetAnsHostVersionParameters, e as GetAnsTokenFromApiParameters, h as GetAnsTokensFromApiParameters, J as GetCosmWasmClientParameters, B as GetIbcClientQueryClientParameters, D as GetIcaClientQueryClientParameters, j as GetModulesFromApiParameters, l as GetRegistryAddressFromApiParameters, N as GetRegistryModuleDataParameters, P as GetRegistryQueryClientFromApiParameters, R as GetRegistryQueryClientParameters, n as GetSubAccountIdsByModuleIdFromApiParameters, q as getAbstractModuleAddressFromRegistry, s as getAbstractModuleVersion, g as getAccountBalancesFromApi, M as getAccountQueryClient, b as getAccountsByOwnerFromApi, d as getAnsHostAddressFromApi, u as getAnsHostAddressFromRegistry, A as getAnsHostQueryClient, w as getAnsHostQueryClientFromApi, y as getAnsHostQueryClientFromRegistry, I as getAnsHostVersionFromApi, f as getAnsTokenFromApi, i as getAnsTokensFromApi, K as getCosmWasmClient, C as getIbcClientQueryClient, F as getIcaClientQueryClient, k as getModulesFromApi, m as getRegistryAddressFromApi, O as getRegistryModuleData, S as getRegistryQueryClient, Q as getRegistryQueryClientFromApi, o as getSubAccountIdsByModuleIdFromApi } from '../get-registry-query-client-from-api-kZlB8Zat.js';
export { C as ClaimNamespaceParameters, M as CreateAccountArguments, K as CreateAccountMonarchyParameters, N as CreateAccountParameters, w as CreateSubAccountParameters, D as DepositParameters, E as ExecuteParameters, G as GetAccountAddressFromApiParameters, A as GetAccountClientFromApiParameters, Z as GetAccountClientParameters, a as GetAccountQueryClientFromApiParameters, P as GetAnsHostClientFromApiParameters, T as GetAnsHostClientFromRegistryParameters, X as GetAnsHostClientParameters, c as GetModuleAddressParameters, e as GetModuleInstantiate2AddressFromApi, h as GetModulesParameters, j as GetNamespaceParameters, l as GetOwnerParameters, a3 as GetRegistryClientFromApiParameters, a5 as GetRegistryClientParameters, n as GetRemoteAccountIdsParameters, p as GetRemoteAccountsParameters, $ as GetSenderAddressParameters, a1 as GetSigningCosmWasmClientParameters, r as GetSubAccountIdsParameters, t as GetSubAccountSequencesParameters, R as RevokeNamespaceParameters, S as SendFundsParameters, U as UpgradeModulesParameters, W as WithdrawParameters, v as claimNamespace, O as createAccount, L as createAccountMonarchy, x as createSubAccount, y as deposit, z as execute, g as getAccountAddressFromApi, _ as getAccountClient, B as getAccountClientFromApi, b as getAccountQueryClientFromApi, Y as getAnsHostClient, Q as getAnsHostClientFromApi, V as getAnsHostClientFromRegistry, d as getModuleAddress, f as getModuleInstantiate2AddressFromApi, i as getModules, k as getNamespace, m as getOwner, a6 as getRegistryClient, a4 as getRegistryClientFromApi, o as getRemoteAccountIds, q as getRemoteAccounts, a0 as getSenderAddress, a2 as getSigningCosmWasmClient, s as getSubAccountIds, u as getSubAccountSequences, F as revokeNamespace, I as sendFunds, H as upgradeModules, J as withdraw } from '../withdraw-CL3Wo4AA.js';
import { CosmWasmClient } from '@cosmjs/cosmwasm-stargate';
import { I as IbcClientQueryClient, a as IcaClientQueryClient } from '../Registry.client-DeRpB8OW.js';
import { j as AccountId, z as ModuleVersion } from '../Registry.types-tb_Smu0e.js';
import { b as ModuleId } from '../types-CdpDSdJ3.js';
import '../types-DL_NvWZJ.js';
import '@cosmjs/stargate';
import 'type-fest';
import '@abstract-money/cli/cosmjs';

type GetChainRpcUrlFromApiParameters = {
    apiUrl: string;
    chainName: string;
};
declare function getChainRpcUrlFromApi({ apiUrl, chainName, }: GetChainRpcUrlFromApiParameters): Promise<string>;

type GetIbcClientQueryClientFromAccountParameters = {
    accountId: AccountId;
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
};
/**
 * Retrieve the {@link IbcClientQueryClient} from the account.
 * @throws if the IBC-client module is not installed
 * @param accountId
 * @param cosmWasmClient
 * @param apiUrl
 */
declare function getIbcClientQueryClientFromAccount({ accountId, cosmWasmClient, apiUrl, }: GetIbcClientQueryClientFromAccountParameters): Promise<IbcClientQueryClient>;

type GetIbcClientQueryClientFromRegistryParameters = {
    cosmWasmClient: CosmWasmClient;
    registryAddress: string;
    version?: string;
};
declare function getIbcClientQueryClientFromRegistry({ cosmWasmClient, registryAddress, version, }: GetIbcClientQueryClientFromRegistryParameters): Promise<IbcClientQueryClient>;

type GetIbcClientAddressFromRegistryParameters = {
    cosmWasmClient: CosmWasmClient;
    registryAddress: string;
    version?: string;
};
declare function getIbcClientAddressFromRegistry({ cosmWasmClient, registryAddress, version, }: GetIbcClientAddressFromRegistryParameters): Promise<string>;

type GetIcaClientQueryClientFromRegistryParameters = {
    cosmWasmClient: CosmWasmClient;
    registryAddress: string;
    version?: string;
};
declare function getIcaClientQueryClientFromRegistry({ cosmWasmClient, registryAddress, version, }: GetIcaClientQueryClientFromRegistryParameters): Promise<IcaClientQueryClient>;

type GetIcaClientAddressFromRegistryParameters = {
    cosmWasmClient: CosmWasmClient;
    registryAddress: string;
    version?: string;
};
declare function getIcaClientAddressFromRegistry({ cosmWasmClient, registryAddress, version, }: GetIcaClientAddressFromRegistryParameters): Promise<string>;

type GetAppModuleCodeIdFromRegistry = {
    moduleId: `${ModuleId}`;
    cosmWasmClient: CosmWasmClient;
    registryAddress: string;
    version?: ModuleVersion;
};
declare function getAppModuleCodeIdFromRegistry({ moduleId, cosmWasmClient, registryAddress, version, }: GetAppModuleCodeIdFromRegistry): Promise<number>;

type GetModuleFactoryAddressFromRegistryParameters = {
    cosmWasmClient: CosmWasmClient;
    registryAddress: string;
    version?: string;
};
declare function getModuleFactoryAddressFromRegistry({ cosmWasmClient, registryAddress, version, }: GetModuleFactoryAddressFromRegistryParameters): Promise<string>;

type GetModuleFactoryVersionParameters = {
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
    version?: string;
};
declare function getModuleFactoryVersion({ cosmWasmClient, apiUrl, version, }: GetModuleFactoryVersionParameters): Promise<ModuleVersion>;

declare enum CommonModuleNames {
    ACCOUNT = "account",
    MODULE_FACTORY = "module-factory",
    ANS_HOST = "ans-host",
    IBC_CLIENT = "ibc-client",
    ICA_CLIENT = "ica-client",
    IBC_HOST = "ibc-host"
}

export { CommonModuleNames, type GetAppModuleCodeIdFromRegistry, type GetChainRpcUrlFromApiParameters, type GetIbcClientAddressFromRegistryParameters, type GetIbcClientQueryClientFromAccountParameters, type GetIbcClientQueryClientFromRegistryParameters, type GetIcaClientAddressFromRegistryParameters, type GetIcaClientQueryClientFromRegistryParameters, type GetModuleFactoryAddressFromRegistryParameters, type GetModuleFactoryVersionParameters, getAppModuleCodeIdFromRegistry, getChainRpcUrlFromApi, getIbcClientAddressFromRegistry, getIbcClientQueryClientFromAccount, getIbcClientQueryClientFromRegistry, getIcaClientAddressFromRegistry, getIcaClientQueryClientFromRegistry, getModuleFactoryAddressFromRegistry, getModuleFactoryVersion };

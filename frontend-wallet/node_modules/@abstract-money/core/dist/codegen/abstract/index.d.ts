import { E as ExecuteMsg$2, A as Action, Q as QueryMsg$2, U as UncheckedContractEntry, b as UncheckedChannelEntry, P as PoolAddressBaseForString, c as UniquePoolId, d as Action$1, e as ExecuteMsg$3, f as QueryMsg$3, C as Coin$2, T as TruncatedChainId, B as Binary$1, M as ModuleInstallConfig, g as Callback, h as ModuleInfo, i as QueryRequestForModuleQuery, H as HostAction, j as Addr$1, k as Callback2, l as Action$2, m as ExecuteMsg$4, n as QueryMsg$4, o as Coin$3 } from '../../Registry.client-DeRpB8OW.js';
export { v as AccountClient, u as AccountInterface, t as AccountQueryClient, s as AccountReadOnlyInterface, z as AnsHostClient, y as AnsHostInterface, x as AnsHostQueryClient, w as AnsHostReadOnlyInterface, p as AnsHostTypes, G as IbcClientClient, F as IbcClientInterface, I as IbcClientQueryClient, D as IbcClientReadOnlyInterface, q as IbcClientTypes, L as IcaClientClient, K as IcaClientInterface, a as IcaClientQueryClient, J as IcaClientReadOnlyInterface, r as IcaClientTypes, S as RegistryClient, O as RegistryInterface, N as RegistryQueryClient, R as RegistryReadOnlyInterface } from '../../Registry.client-DeRpB8OW.js';
import { E as ExecuteMsg$1, I as InternalConfigAction, U as UpdateSubAccountAction, G as GovAction, Q as QueryMsg$1, D as ExecuteMsg$5, y as Action$3, F as QueryMsg$5, l as ModuleInfo$1, v as Coin$4, n as Namespace, w as UpdateModule, j as AccountId, x as ClearableForCoin } from '../../Registry.types-tb_Smu0e.js';
export { H as AccountTypes, R as RegistryTypes } from '../../Registry.types-tb_Smu0e.js';
import { CamelCasedProperties } from 'type-fest';
export { A as AccountMsg, a as AccountMsgComposer } from '../../Account.message-composer-BYZDG8tM.js';
import { Coin } from '@cosmjs/amino';
import { MsgExecuteContractEncodeObject } from '@cosmjs/cosmwasm-stargate';
import { CosmWasmClient, StdFee, Coin as Coin$1, ExecuteResult, SigningCosmWasmClient } from '@abstract-money/cli/cosmjs';

/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

declare abstract class AccountExecuteMsgBuilder {
    static execute: ({ msgs }: CamelCasedProperties<Extract<ExecuteMsg$1, {
        execute: unknown;
    }>["execute"]>) => ExecuteMsg$1;
    static executeWithData: ({ msg }: CamelCasedProperties<Extract<ExecuteMsg$1, {
        execute_with_data: unknown;
    }>["execute_with_data"]>) => ExecuteMsg$1;
    static executeOnModule: ({ execMsg, funds, moduleId }: CamelCasedProperties<Extract<ExecuteMsg$1, {
        execute_on_module: unknown;
    }>["execute_on_module"]>) => ExecuteMsg$1;
    static adminExecute: ({ addr, msg }: CamelCasedProperties<Extract<ExecuteMsg$1, {
        admin_execute: unknown;
    }>["admin_execute"]>) => ExecuteMsg$1;
    static adminExecuteOnModule: ({ moduleId, msg }: CamelCasedProperties<Extract<ExecuteMsg$1, {
        admin_execute_on_module: unknown;
    }>["admin_execute_on_module"]>) => ExecuteMsg$1;
    static icaAction: ({ actionQueryMsg }: CamelCasedProperties<Extract<ExecuteMsg$1, {
        ica_action: unknown;
    }>["ica_action"]>) => ExecuteMsg$1;
    static updateInternalConfig: (internalConfigAction: InternalConfigAction) => ExecuteMsg$1;
    static installModules: ({ modules }: CamelCasedProperties<Extract<ExecuteMsg$1, {
        install_modules: unknown;
    }>["install_modules"]>) => ExecuteMsg$1;
    static uninstallModule: ({ moduleId }: CamelCasedProperties<Extract<ExecuteMsg$1, {
        uninstall_module: unknown;
    }>["uninstall_module"]>) => ExecuteMsg$1;
    static upgrade: ({ modules }: CamelCasedProperties<Extract<ExecuteMsg$1, {
        upgrade: unknown;
    }>["upgrade"]>) => ExecuteMsg$1;
    static createSubAccount: ({ accountId, description, installModules, link, name, namespace }: CamelCasedProperties<Extract<ExecuteMsg$1, {
        create_sub_account: unknown;
    }>["create_sub_account"]>) => ExecuteMsg$1;
    static updateInfo: ({ description, link, name }: CamelCasedProperties<Extract<ExecuteMsg$1, {
        update_info: unknown;
    }>["update_info"]>) => ExecuteMsg$1;
    static updateStatus: ({ isSuspended }: CamelCasedProperties<Extract<ExecuteMsg$1, {
        update_status: unknown;
    }>["update_status"]>) => ExecuteMsg$1;
    static updateSubAccount: (updateSubAccountAction: UpdateSubAccountAction) => ExecuteMsg$1;
    static updateOwnership: (govAction: GovAction) => ExecuteMsg$1;
    static addAuthMethod: ({ addAuthenticator }: CamelCasedProperties<Extract<ExecuteMsg$1, {
        add_auth_method: unknown;
    }>["add_auth_method"]>) => ExecuteMsg$1;
    static removeAuthMethod: ({ id }: CamelCasedProperties<Extract<ExecuteMsg$1, {
        remove_auth_method: unknown;
    }>["remove_auth_method"]>) => ExecuteMsg$1;
}
declare abstract class AccountQueryMsgBuilder {
    static config: () => QueryMsg$1;
    static moduleVersions: ({ ids }: CamelCasedProperties<Extract<QueryMsg$1, {
        module_versions: unknown;
    }>["module_versions"]>) => QueryMsg$1;
    static moduleAddresses: ({ ids }: CamelCasedProperties<Extract<QueryMsg$1, {
        module_addresses: unknown;
    }>["module_addresses"]>) => QueryMsg$1;
    static moduleInfos: ({ limit, startAfter }: CamelCasedProperties<Extract<QueryMsg$1, {
        module_infos: unknown;
    }>["module_infos"]>) => QueryMsg$1;
    static info: () => QueryMsg$1;
    static subAccountIds: ({ limit, startAfter }: CamelCasedProperties<Extract<QueryMsg$1, {
        sub_account_ids: unknown;
    }>["sub_account_ids"]>) => QueryMsg$1;
    static topLevelOwner: () => QueryMsg$1;
    static ownership: () => QueryMsg$1;
    static authenticatorByID: ({ id }: CamelCasedProperties<Extract<QueryMsg$1, {
        authenticator_by_i_d: unknown;
    }>["authenticator_by_i_d"]>) => QueryMsg$1;
    static authenticatorIDs: () => QueryMsg$1;
}

/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

declare abstract class AnsHostExecuteMsgBuilder {
    static updateContractAddresses: ({ toAdd, toRemove }: CamelCasedProperties<Extract<ExecuteMsg$2, {
        update_contract_addresses: unknown;
    }>["update_contract_addresses"]>) => ExecuteMsg$2;
    static updateAssetAddresses: ({ toAdd, toRemove }: CamelCasedProperties<Extract<ExecuteMsg$2, {
        update_asset_addresses: unknown;
    }>["update_asset_addresses"]>) => ExecuteMsg$2;
    static updateChannels: ({ toAdd, toRemove }: CamelCasedProperties<Extract<ExecuteMsg$2, {
        update_channels: unknown;
    }>["update_channels"]>) => ExecuteMsg$2;
    static updateDexes: ({ toAdd, toRemove }: CamelCasedProperties<Extract<ExecuteMsg$2, {
        update_dexes: unknown;
    }>["update_dexes"]>) => ExecuteMsg$2;
    static updatePools: ({ toAdd, toRemove }: CamelCasedProperties<Extract<ExecuteMsg$2, {
        update_pools: unknown;
    }>["update_pools"]>) => ExecuteMsg$2;
    static updateOwnership: (action: Action) => ExecuteMsg$2;
}
declare abstract class AnsHostQueryMsgBuilder {
    static config: () => QueryMsg$2;
    static assets: ({ names }: CamelCasedProperties<Extract<QueryMsg$2, {
        assets: unknown;
    }>["assets"]>) => QueryMsg$2;
    static assetList: ({ filter, limit, startAfter }: CamelCasedProperties<Extract<QueryMsg$2, {
        asset_list: unknown;
    }>["asset_list"]>) => QueryMsg$2;
    static assetInfos: ({ infos }: CamelCasedProperties<Extract<QueryMsg$2, {
        asset_infos: unknown;
    }>["asset_infos"]>) => QueryMsg$2;
    static assetInfoList: ({ filter, limit, startAfter }: CamelCasedProperties<Extract<QueryMsg$2, {
        asset_info_list: unknown;
    }>["asset_info_list"]>) => QueryMsg$2;
    static contracts: ({ entries }: CamelCasedProperties<Extract<QueryMsg$2, {
        contracts: unknown;
    }>["contracts"]>) => QueryMsg$2;
    static contractList: ({ filter, limit, startAfter }: CamelCasedProperties<Extract<QueryMsg$2, {
        contract_list: unknown;
    }>["contract_list"]>) => QueryMsg$2;
    static channels: ({ entries }: CamelCasedProperties<Extract<QueryMsg$2, {
        channels: unknown;
    }>["channels"]>) => QueryMsg$2;
    static channelList: ({ filter, limit, startAfter }: CamelCasedProperties<Extract<QueryMsg$2, {
        channel_list: unknown;
    }>["channel_list"]>) => QueryMsg$2;
    static registeredDexes: () => QueryMsg$2;
    static pools: ({ pairings }: CamelCasedProperties<Extract<QueryMsg$2, {
        pools: unknown;
    }>["pools"]>) => QueryMsg$2;
    static poolList: ({ filter, limit, startAfter }: CamelCasedProperties<Extract<QueryMsg$2, {
        pool_list: unknown;
    }>["pool_list"]>) => QueryMsg$2;
    static poolMetadatas: ({ ids }: CamelCasedProperties<Extract<QueryMsg$2, {
        pool_metadatas: unknown;
    }>["pool_metadatas"]>) => QueryMsg$2;
    static poolMetadataList: ({ filter, limit, startAfter }: CamelCasedProperties<Extract<QueryMsg$2, {
        pool_metadata_list: unknown;
    }>["pool_metadata_list"]>) => QueryMsg$2;
    static ownership: () => QueryMsg$2;
}

/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

interface AnsHostMsg {
    contractAddress: string;
    sender: string;
    updateContractAddresses: ({ toAdd, toRemove }: {
        toAdd: UncheckedContractEntry[][];
        toRemove: UncheckedContractEntry[];
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateAssetAddresses: ({ toAdd, toRemove }: {
        toAdd: string[][];
        toRemove: string[];
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateChannels: ({ toAdd, toRemove }: {
        toAdd: UncheckedChannelEntry[][];
        toRemove: UncheckedChannelEntry[];
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateDexes: ({ toAdd, toRemove }: {
        toAdd: string[];
        toRemove: string[];
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updatePools: ({ toAdd, toRemove }: {
        toAdd: PoolAddressBaseForString[][];
        toRemove: UniquePoolId[];
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateOwnership: (action: Action, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
}
declare class AnsHostMsgComposer implements AnsHostMsg {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    updateContractAddresses: ({ toAdd, toRemove }: {
        toAdd: UncheckedContractEntry[][];
        toRemove: UncheckedContractEntry[];
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateAssetAddresses: ({ toAdd, toRemove }: {
        toAdd: string[][];
        toRemove: string[];
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateChannels: ({ toAdd, toRemove }: {
        toAdd: UncheckedChannelEntry[][];
        toRemove: UncheckedChannelEntry[];
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateDexes: ({ toAdd, toRemove }: {
        toAdd: string[];
        toRemove: string[];
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updatePools: ({ toAdd, toRemove }: {
        toAdd: PoolAddressBaseForString[][];
        toRemove: UniquePoolId[];
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateOwnership: (action: Action, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
}

/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/
type Uint128 = string;
type Logo = {
    url: string;
} | {
    embedded: EmbeddedLogo;
};
type EmbeddedLogo = {
    svg: Binary;
} | {
    png: Binary;
};
type Binary = string;
interface InstantiateMsg {
    decimals: number;
    initial_balances: Cw20Coin[];
    marketing?: InstantiateMarketingInfo | null;
    mint?: MinterResponse | null;
    name: string;
    symbol: string;
}
interface Cw20Coin {
    address: string;
    amount: Uint128;
}
interface InstantiateMarketingInfo {
    description?: string | null;
    logo?: Logo | null;
    marketing?: string | null;
    project?: string | null;
}
interface MinterResponse {
    cap?: Uint128 | null;
    minter: string;
}
type ExecuteMsg = {
    transfer: {
        amount: Uint128;
        recipient: string;
    };
} | {
    burn: {
        amount: Uint128;
    };
} | {
    send: {
        amount: Uint128;
        contract: string;
        msg: Binary;
    };
} | {
    increase_allowance: {
        amount: Uint128;
        expires?: Expiration | null;
        spender: string;
    };
} | {
    decrease_allowance: {
        amount: Uint128;
        expires?: Expiration | null;
        spender: string;
    };
} | {
    transfer_from: {
        amount: Uint128;
        owner: string;
        recipient: string;
    };
} | {
    send_from: {
        amount: Uint128;
        contract: string;
        msg: Binary;
        owner: string;
    };
} | {
    burn_from: {
        amount: Uint128;
        owner: string;
    };
} | {
    mint: {
        amount: Uint128;
        recipient: string;
    };
} | {
    update_minter: {
        new_minter?: string | null;
    };
} | {
    update_marketing: {
        description?: string | null;
        marketing?: string | null;
        project?: string | null;
    };
} | {
    upload_logo: Logo;
};
type Expiration = {
    at_height: number;
} | {
    at_time: Timestamp;
} | {
    never: {};
};
type Timestamp = Uint64;
type Uint64 = string;
type QueryMsg = {
    balance: {
        address: string;
    };
} | {
    token_info: {};
} | {
    minter: {};
} | {
    allowance: {
        owner: string;
        spender: string;
    };
} | {
    all_allowances: {
        limit?: number | null;
        owner: string;
        start_after?: string | null;
    };
} | {
    all_spender_allowances: {
        limit?: number | null;
        spender: string;
        start_after?: string | null;
    };
} | {
    all_accounts: {
        limit?: number | null;
        start_after?: string | null;
    };
} | {
    marketing_info: {};
} | {
    download_logo: {};
};
interface AllAccountsResponse {
    accounts: string[];
    [k: string]: unknown;
}
interface AllAllowancesResponse {
    allowances: AllowanceInfo[];
    [k: string]: unknown;
}
interface AllowanceInfo {
    allowance: Uint128;
    expires: Expiration;
    spender: string;
}
interface AllSpenderAllowancesResponse {
    allowances: SpenderAllowanceInfo[];
    [k: string]: unknown;
}
interface SpenderAllowanceInfo {
    allowance: Uint128;
    expires: Expiration;
    owner: string;
}
interface AllowanceResponse {
    allowance: Uint128;
    expires: Expiration;
    [k: string]: unknown;
}
interface BalanceResponse {
    balance: Uint128;
}
interface DownloadLogoResponse {
    data: Binary;
    mime_type: string;
}
type LogoInfo = {
    url: string;
} | "embedded";
type Addr = string;
interface MarketingInfoResponse {
    description?: string | null;
    logo?: LogoInfo | null;
    marketing?: Addr | null;
    project?: string | null;
    [k: string]: unknown;
}
interface TokenInfoResponse {
    decimals: number;
    name: string;
    symbol: string;
    total_supply: Uint128;
}

type Cw20Base_types_Addr = Addr;
type Cw20Base_types_AllAccountsResponse = AllAccountsResponse;
type Cw20Base_types_AllAllowancesResponse = AllAllowancesResponse;
type Cw20Base_types_AllSpenderAllowancesResponse = AllSpenderAllowancesResponse;
type Cw20Base_types_AllowanceInfo = AllowanceInfo;
type Cw20Base_types_AllowanceResponse = AllowanceResponse;
type Cw20Base_types_BalanceResponse = BalanceResponse;
type Cw20Base_types_Binary = Binary;
type Cw20Base_types_Cw20Coin = Cw20Coin;
type Cw20Base_types_DownloadLogoResponse = DownloadLogoResponse;
type Cw20Base_types_EmbeddedLogo = EmbeddedLogo;
type Cw20Base_types_ExecuteMsg = ExecuteMsg;
type Cw20Base_types_Expiration = Expiration;
type Cw20Base_types_InstantiateMarketingInfo = InstantiateMarketingInfo;
type Cw20Base_types_InstantiateMsg = InstantiateMsg;
type Cw20Base_types_Logo = Logo;
type Cw20Base_types_LogoInfo = LogoInfo;
type Cw20Base_types_MarketingInfoResponse = MarketingInfoResponse;
type Cw20Base_types_MinterResponse = MinterResponse;
type Cw20Base_types_QueryMsg = QueryMsg;
type Cw20Base_types_SpenderAllowanceInfo = SpenderAllowanceInfo;
type Cw20Base_types_Timestamp = Timestamp;
type Cw20Base_types_TokenInfoResponse = TokenInfoResponse;
type Cw20Base_types_Uint128 = Uint128;
type Cw20Base_types_Uint64 = Uint64;
declare namespace Cw20Base_types {
  export type { Cw20Base_types_Addr as Addr, Cw20Base_types_AllAccountsResponse as AllAccountsResponse, Cw20Base_types_AllAllowancesResponse as AllAllowancesResponse, Cw20Base_types_AllSpenderAllowancesResponse as AllSpenderAllowancesResponse, Cw20Base_types_AllowanceInfo as AllowanceInfo, Cw20Base_types_AllowanceResponse as AllowanceResponse, Cw20Base_types_BalanceResponse as BalanceResponse, Cw20Base_types_Binary as Binary, Cw20Base_types_Cw20Coin as Cw20Coin, Cw20Base_types_DownloadLogoResponse as DownloadLogoResponse, Cw20Base_types_EmbeddedLogo as EmbeddedLogo, Cw20Base_types_ExecuteMsg as ExecuteMsg, Cw20Base_types_Expiration as Expiration, Cw20Base_types_InstantiateMarketingInfo as InstantiateMarketingInfo, Cw20Base_types_InstantiateMsg as InstantiateMsg, Cw20Base_types_Logo as Logo, Cw20Base_types_LogoInfo as LogoInfo, Cw20Base_types_MarketingInfoResponse as MarketingInfoResponse, Cw20Base_types_MinterResponse as MinterResponse, Cw20Base_types_QueryMsg as QueryMsg, Cw20Base_types_SpenderAllowanceInfo as SpenderAllowanceInfo, Cw20Base_types_Timestamp as Timestamp, Cw20Base_types_TokenInfoResponse as TokenInfoResponse, Cw20Base_types_Uint128 as Uint128, Cw20Base_types_Uint64 as Uint64 };
}

/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

interface Cw20BaseReadOnlyInterface {
    contractAddress: string;
    balance: ({ address }: {
        address: string;
    }) => Promise<BalanceResponse>;
    tokenInfo: () => Promise<TokenInfoResponse>;
    minter: () => Promise<MinterResponse>;
    allowance: ({ owner, spender }: {
        owner: string;
        spender: string;
    }) => Promise<AllowanceResponse>;
    allAllowances: ({ limit, owner, startAfter }: {
        limit?: number;
        owner: string;
        startAfter?: string;
    }) => Promise<AllAllowancesResponse>;
    allSpenderAllowances: ({ limit, spender, startAfter }: {
        limit?: number;
        spender: string;
        startAfter?: string;
    }) => Promise<AllSpenderAllowancesResponse>;
    allAccounts: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<AllAccountsResponse>;
    marketingInfo: () => Promise<MarketingInfoResponse>;
    downloadLogo: () => Promise<DownloadLogoResponse>;
}
declare class Cw20BaseQueryClient implements Cw20BaseReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    balance: ({ address }: {
        address: string;
    }) => Promise<BalanceResponse>;
    tokenInfo: () => Promise<TokenInfoResponse>;
    minter: () => Promise<MinterResponse>;
    allowance: ({ owner, spender }: {
        owner: string;
        spender: string;
    }) => Promise<AllowanceResponse>;
    allAllowances: ({ limit, owner, startAfter }: {
        limit?: number | undefined;
        owner: string;
        startAfter?: string | undefined;
    }) => Promise<AllAllowancesResponse>;
    allSpenderAllowances: ({ limit, spender, startAfter }: {
        limit?: number | undefined;
        spender: string;
        startAfter?: string | undefined;
    }) => Promise<AllSpenderAllowancesResponse>;
    allAccounts: ({ limit, startAfter }: {
        limit?: number | undefined;
        startAfter?: string | undefined;
    }) => Promise<AllAccountsResponse>;
    marketingInfo: () => Promise<MarketingInfoResponse>;
    downloadLogo: () => Promise<DownloadLogoResponse>;
}
interface Cw20BaseInterface extends Cw20BaseReadOnlyInterface {
    contractAddress: string;
    sender: string;
    transfer: ({ amount, recipient }: {
        amount: Uint128;
        recipient: string;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    burn: ({ amount }: {
        amount: Uint128;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    send: ({ amount, contract, msg }: {
        amount: Uint128;
        contract: string;
        msg: Binary;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    increaseAllowance: ({ amount, expires, spender }: {
        amount: Uint128;
        expires?: Expiration;
        spender: string;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    decreaseAllowance: ({ amount, expires, spender }: {
        amount: Uint128;
        expires?: Expiration;
        spender: string;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    transferFrom: ({ amount, owner, recipient }: {
        amount: Uint128;
        owner: string;
        recipient: string;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    sendFrom: ({ amount, contract, msg, owner }: {
        amount: Uint128;
        contract: string;
        msg: Binary;
        owner: string;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    burnFrom: ({ amount, owner }: {
        amount: Uint128;
        owner: string;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    mint: ({ amount, recipient }: {
        amount: Uint128;
        recipient: string;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    updateMinter: ({ newMinter }: {
        newMinter?: string;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    updateMarketing: ({ description, marketing, project }: {
        description?: string;
        marketing?: string;
        project?: string;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    uploadLogo: (logo: Logo, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
}
declare class Cw20BaseClient extends Cw20BaseQueryClient implements Cw20BaseInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    transfer: ({ amount, recipient }: {
        amount: Uint128;
        recipient: string;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    burn: ({ amount }: {
        amount: Uint128;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    send: ({ amount, contract, msg }: {
        amount: Uint128;
        contract: string;
        msg: Binary;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    increaseAllowance: ({ amount, expires, spender }: {
        amount: Uint128;
        expires?: Expiration | undefined;
        spender: string;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    decreaseAllowance: ({ amount, expires, spender }: {
        amount: Uint128;
        expires?: Expiration | undefined;
        spender: string;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    transferFrom: ({ amount, owner, recipient }: {
        amount: Uint128;
        owner: string;
        recipient: string;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    sendFrom: ({ amount, contract, msg, owner }: {
        amount: Uint128;
        contract: string;
        msg: Binary;
        owner: string;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    burnFrom: ({ amount, owner }: {
        amount: Uint128;
        owner: string;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    mint: ({ amount, recipient }: {
        amount: Uint128;
        recipient: string;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    updateMinter: ({ newMinter }: {
        newMinter?: string | undefined;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    updateMarketing: ({ description, marketing, project }: {
        description?: string | undefined;
        marketing?: string | undefined;
        project?: string | undefined;
    }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
    uploadLogo: (logo: Logo, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin$1[]) => Promise<ExecuteResult>;
}

/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

declare abstract class Cw20BaseExecuteMsgBuilder {
    static transfer: ({ amount, recipient }: CamelCasedProperties<Extract<ExecuteMsg, {
        transfer: unknown;
    }>["transfer"]>) => ExecuteMsg;
    static burn: ({ amount }: CamelCasedProperties<Extract<ExecuteMsg, {
        burn: unknown;
    }>["burn"]>) => ExecuteMsg;
    static send: ({ amount, contract, msg }: CamelCasedProperties<Extract<ExecuteMsg, {
        send: unknown;
    }>["send"]>) => ExecuteMsg;
    static increaseAllowance: ({ amount, expires, spender }: CamelCasedProperties<Extract<ExecuteMsg, {
        increase_allowance: unknown;
    }>["increase_allowance"]>) => ExecuteMsg;
    static decreaseAllowance: ({ amount, expires, spender }: CamelCasedProperties<Extract<ExecuteMsg, {
        decrease_allowance: unknown;
    }>["decrease_allowance"]>) => ExecuteMsg;
    static transferFrom: ({ amount, owner, recipient }: CamelCasedProperties<Extract<ExecuteMsg, {
        transfer_from: unknown;
    }>["transfer_from"]>) => ExecuteMsg;
    static sendFrom: ({ amount, contract, msg, owner }: CamelCasedProperties<Extract<ExecuteMsg, {
        send_from: unknown;
    }>["send_from"]>) => ExecuteMsg;
    static burnFrom: ({ amount, owner }: CamelCasedProperties<Extract<ExecuteMsg, {
        burn_from: unknown;
    }>["burn_from"]>) => ExecuteMsg;
    static mint: ({ amount, recipient }: CamelCasedProperties<Extract<ExecuteMsg, {
        mint: unknown;
    }>["mint"]>) => ExecuteMsg;
    static updateMinter: ({ newMinter }: CamelCasedProperties<Extract<ExecuteMsg, {
        update_minter: unknown;
    }>["update_minter"]>) => ExecuteMsg;
    static updateMarketing: ({ description, marketing, project }: CamelCasedProperties<Extract<ExecuteMsg, {
        update_marketing: unknown;
    }>["update_marketing"]>) => ExecuteMsg;
    static uploadLogo: (logo: Logo) => ExecuteMsg;
}
declare abstract class Cw20BaseQueryMsgBuilder {
    static balance: ({ address }: CamelCasedProperties<Extract<QueryMsg, {
        balance: unknown;
    }>["balance"]>) => QueryMsg;
    static tokenInfo: () => QueryMsg;
    static minter: () => QueryMsg;
    static allowance: ({ owner, spender }: CamelCasedProperties<Extract<QueryMsg, {
        allowance: unknown;
    }>["allowance"]>) => QueryMsg;
    static allAllowances: ({ limit, owner, startAfter }: CamelCasedProperties<Extract<QueryMsg, {
        all_allowances: unknown;
    }>["all_allowances"]>) => QueryMsg;
    static allSpenderAllowances: ({ limit, spender, startAfter }: CamelCasedProperties<Extract<QueryMsg, {
        all_spender_allowances: unknown;
    }>["all_spender_allowances"]>) => QueryMsg;
    static allAccounts: ({ limit, startAfter }: CamelCasedProperties<Extract<QueryMsg, {
        all_accounts: unknown;
    }>["all_accounts"]>) => QueryMsg;
    static marketingInfo: () => QueryMsg;
    static downloadLogo: () => QueryMsg;
}

/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

interface Cw20BaseMsg {
    contractAddress: string;
    sender: string;
    transfer: ({ amount, recipient }: {
        amount: Uint128;
        recipient: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    burn: ({ amount }: {
        amount: Uint128;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    send: ({ amount, contract, msg }: {
        amount: Uint128;
        contract: string;
        msg: Binary;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    increaseAllowance: ({ amount, expires, spender }: {
        amount: Uint128;
        expires?: Expiration;
        spender: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    decreaseAllowance: ({ amount, expires, spender }: {
        amount: Uint128;
        expires?: Expiration;
        spender: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    transferFrom: ({ amount, owner, recipient }: {
        amount: Uint128;
        owner: string;
        recipient: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    sendFrom: ({ amount, contract, msg, owner }: {
        amount: Uint128;
        contract: string;
        msg: Binary;
        owner: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    burnFrom: ({ amount, owner }: {
        amount: Uint128;
        owner: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    mint: ({ amount, recipient }: {
        amount: Uint128;
        recipient: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateMinter: ({ newMinter }: {
        newMinter?: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateMarketing: ({ description, marketing, project }: {
        description?: string;
        marketing?: string;
        project?: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    uploadLogo: (logo: Logo, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
}
declare class Cw20BaseMsgComposer implements Cw20BaseMsg {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    transfer: ({ amount, recipient }: {
        amount: Uint128;
        recipient: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    burn: ({ amount }: {
        amount: Uint128;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    send: ({ amount, contract, msg }: {
        amount: Uint128;
        contract: string;
        msg: Binary;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    increaseAllowance: ({ amount, expires, spender }: {
        amount: Uint128;
        expires?: Expiration | undefined;
        spender: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    decreaseAllowance: ({ amount, expires, spender }: {
        amount: Uint128;
        expires?: Expiration | undefined;
        spender: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    transferFrom: ({ amount, owner, recipient }: {
        amount: Uint128;
        owner: string;
        recipient: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    sendFrom: ({ amount, contract, msg, owner }: {
        amount: Uint128;
        contract: string;
        msg: Binary;
        owner: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    burnFrom: ({ amount, owner }: {
        amount: Uint128;
        owner: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    mint: ({ amount, recipient }: {
        amount: Uint128;
        recipient: string;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateMinter: ({ newMinter }: {
        newMinter?: string | undefined;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    updateMarketing: ({ description, marketing, project }: {
        description?: string | undefined;
        marketing?: string | undefined;
        project?: string | undefined;
    }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
    uploadLogo: (logo: Logo, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
}

/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

declare abstract class IbcClientExecuteMsgBuilder {
    static updateOwnership: (action: Action$1) => ExecuteMsg$3;
    static registerInfrastructure: ({ chain, host, note }: CamelCasedProperties<Extract<ExecuteMsg$3, {
        register_infrastructure: unknown;
    }>["register_infrastructure"]>) => ExecuteMsg$3;
    static sendFunds: ({ hostChain, memo, receiver }: CamelCasedProperties<Extract<ExecuteMsg$3, {
        send_funds: unknown;
    }>["send_funds"]>) => ExecuteMsg$3;
    static sendFundsWithActions: ({ actions, hostChain }: CamelCasedProperties<Extract<ExecuteMsg$3, {
        send_funds_with_actions: unknown;
    }>["send_funds_with_actions"]>) => ExecuteMsg$3;
    static register: ({ hostChain, installModules, namespace }: CamelCasedProperties<Extract<ExecuteMsg$3, {
        register: unknown;
    }>["register"]>) => ExecuteMsg$3;
    static moduleIbcAction: ({ callback, hostChain, msg, targetModule }: CamelCasedProperties<Extract<ExecuteMsg$3, {
        module_ibc_action: unknown;
    }>["module_ibc_action"]>) => ExecuteMsg$3;
    static ibcQuery: ({ callback, hostChain, queries }: CamelCasedProperties<Extract<ExecuteMsg$3, {
        ibc_query: unknown;
    }>["ibc_query"]>) => ExecuteMsg$3;
    static remoteAction: ({ action, hostChain }: CamelCasedProperties<Extract<ExecuteMsg$3, {
        remote_action: unknown;
    }>["remote_action"]>) => ExecuteMsg$3;
    static removeHost: ({ hostChain }: CamelCasedProperties<Extract<ExecuteMsg$3, {
        remove_host: unknown;
    }>["remove_host"]>) => ExecuteMsg$3;
    static callback: ({ initiator, initiatorMsg, result }: CamelCasedProperties<Extract<ExecuteMsg$3, {
        callback: unknown;
    }>["callback"]>) => ExecuteMsg$3;
}
declare abstract class IbcClientQueryMsgBuilder {
    static ownership: () => QueryMsg$3;
    static config: () => QueryMsg$3;
    static host: ({ chainName }: CamelCasedProperties<Extract<QueryMsg$3, {
        host: unknown;
    }>["host"]>) => QueryMsg$3;
    static listAccounts: ({ limit, start }: CamelCasedProperties<Extract<QueryMsg$3, {
        list_accounts: unknown;
    }>["list_accounts"]>) => QueryMsg$3;
    static account: ({ accountId, chainName }: CamelCasedProperties<Extract<QueryMsg$3, {
        account: unknown;
    }>["account"]>) => QueryMsg$3;
    static listRemoteHosts: () => QueryMsg$3;
    static listRemoteProxies: () => QueryMsg$3;
    static listRemoteAccountsByAccountId: ({ accountId }: CamelCasedProperties<Extract<QueryMsg$3, {
        list_remote_accounts_by_account_id: unknown;
    }>["list_remote_accounts_by_account_id"]>) => QueryMsg$3;
    static listIbcInfrastructures: () => QueryMsg$3;
}

/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

interface IbcClientMsg {
    contractAddress: string;
    sender: string;
    updateOwnership: (action: Action$1, funds_?: Coin$2[]) => MsgExecuteContractEncodeObject;
    registerInfrastructure: ({ chain, host, note }: {
        chain: TruncatedChainId;
        host: string;
        note: string;
    }, funds_?: Coin$2[]) => MsgExecuteContractEncodeObject;
    sendFunds: ({ hostChain, memo, receiver }: {
        hostChain: TruncatedChainId;
        memo?: string;
        receiver?: string;
    }, funds_?: Coin$2[]) => MsgExecuteContractEncodeObject;
    sendFundsWithActions: ({ actions, hostChain }: {
        actions: Binary$1[];
        hostChain: TruncatedChainId;
    }, funds_?: Coin$2[]) => MsgExecuteContractEncodeObject;
    register: ({ hostChain, installModules, namespace }: {
        hostChain: TruncatedChainId;
        installModules: ModuleInstallConfig[];
        namespace?: string;
    }, funds_?: Coin$2[]) => MsgExecuteContractEncodeObject;
    moduleIbcAction: ({ callback, hostChain, msg, targetModule }: {
        callback?: Callback;
        hostChain: TruncatedChainId;
        msg: Binary$1;
        targetModule: ModuleInfo;
    }, funds_?: Coin$2[]) => MsgExecuteContractEncodeObject;
    ibcQuery: ({ callback, hostChain, queries }: {
        callback: Callback;
        hostChain: TruncatedChainId;
        queries: QueryRequestForModuleQuery[];
    }, funds_?: Coin$2[]) => MsgExecuteContractEncodeObject;
    remoteAction: ({ action, hostChain }: {
        action: HostAction;
        hostChain: TruncatedChainId;
    }, funds_?: Coin$2[]) => MsgExecuteContractEncodeObject;
    removeHost: ({ hostChain }: {
        hostChain: TruncatedChainId;
    }, funds_?: Coin$2[]) => MsgExecuteContractEncodeObject;
    callback: ({ initiator, initiatorMsg, result }: {
        initiator: Addr$1;
        initiatorMsg: Binary$1;
        result: Callback2;
    }, funds_?: Coin$2[]) => MsgExecuteContractEncodeObject;
}
declare class IbcClientMsgComposer implements IbcClientMsg {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    updateOwnership: (action: Action$1, funds_?: Coin$2[]) => MsgExecuteContractEncodeObject;
    registerInfrastructure: ({ chain, host, note }: {
        chain: TruncatedChainId;
        host: string;
        note: string;
    }, funds_?: Coin$2[]) => MsgExecuteContractEncodeObject;
    sendFunds: ({ hostChain, memo, receiver }: {
        hostChain: TruncatedChainId;
        memo?: string | undefined;
        receiver?: string | undefined;
    }, funds_?: Coin$2[]) => MsgExecuteContractEncodeObject;
    sendFundsWithActions: ({ actions, hostChain }: {
        actions: Binary$1[];
        hostChain: TruncatedChainId;
    }, funds_?: Coin$2[]) => MsgExecuteContractEncodeObject;
    register: ({ hostChain, installModules, namespace }: {
        hostChain: TruncatedChainId;
        installModules: ModuleInstallConfig[];
        namespace?: string | undefined;
    }, funds_?: Coin$2[]) => MsgExecuteContractEncodeObject;
    moduleIbcAction: ({ callback, hostChain, msg, targetModule }: {
        callback?: Callback | undefined;
        hostChain: TruncatedChainId;
        msg: Binary$1;
        targetModule: ModuleInfo;
    }, funds_?: Coin$2[]) => MsgExecuteContractEncodeObject;
    ibcQuery: ({ callback, hostChain, queries }: {
        callback: Callback;
        hostChain: TruncatedChainId;
        queries: QueryRequestForModuleQuery[];
    }, funds_?: Coin$2[]) => MsgExecuteContractEncodeObject;
    remoteAction: ({ action, hostChain }: {
        action: HostAction;
        hostChain: TruncatedChainId;
    }, funds_?: Coin$2[]) => MsgExecuteContractEncodeObject;
    removeHost: ({ hostChain }: {
        hostChain: TruncatedChainId;
    }, funds_?: Coin$2[]) => MsgExecuteContractEncodeObject;
    callback: ({ initiator, initiatorMsg, result }: {
        initiator: Addr$1;
        initiatorMsg: Binary$1;
        result: Callback2;
    }, funds_?: Coin$2[]) => MsgExecuteContractEncodeObject;
}

/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

declare abstract class IcaClientExecuteMsgBuilder {
    static updateOwnership: (action: Action$2) => ExecuteMsg$4;
}
declare abstract class IcaClientQueryMsgBuilder {
    static config: () => QueryMsg$4;
    static icaAction: ({ accountAddress, actions, chain }: CamelCasedProperties<Extract<QueryMsg$4, {
        ica_action: unknown;
    }>["ica_action"]>) => QueryMsg$4;
    static ownership: () => QueryMsg$4;
}

/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

interface IcaClientMsg {
    contractAddress: string;
    sender: string;
    updateOwnership: (action: Action$2, funds_?: Coin$3[]) => MsgExecuteContractEncodeObject;
}
declare class IcaClientMsgComposer implements IcaClientMsg {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    updateOwnership: (action: Action$2, funds_?: Coin$3[]) => MsgExecuteContractEncodeObject;
}

/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

declare abstract class RegistryExecuteMsgBuilder {
    static removeModule: ({ module }: CamelCasedProperties<Extract<ExecuteMsg$5, {
        remove_module: unknown;
    }>["remove_module"]>) => ExecuteMsg$5;
    static yankModule: ({ module }: CamelCasedProperties<Extract<ExecuteMsg$5, {
        yank_module: unknown;
    }>["yank_module"]>) => ExecuteMsg$5;
    static proposeModules: ({ modules }: CamelCasedProperties<Extract<ExecuteMsg$5, {
        propose_modules: unknown;
    }>["propose_modules"]>) => ExecuteMsg$5;
    static updateModuleConfiguration: ({ moduleName, namespace, updateModule }: CamelCasedProperties<Extract<ExecuteMsg$5, {
        update_module_configuration: unknown;
    }>["update_module_configuration"]>) => ExecuteMsg$5;
    static approveOrRejectModules: ({ approves, rejects }: CamelCasedProperties<Extract<ExecuteMsg$5, {
        approve_or_reject_modules: unknown;
    }>["approve_or_reject_modules"]>) => ExecuteMsg$5;
    static claimNamespace: ({ accountId, namespace }: CamelCasedProperties<Extract<ExecuteMsg$5, {
        claim_namespace: unknown;
    }>["claim_namespace"]>) => ExecuteMsg$5;
    static forgoNamespace: ({ namespaces }: CamelCasedProperties<Extract<ExecuteMsg$5, {
        forgo_namespace: unknown;
    }>["forgo_namespace"]>) => ExecuteMsg$5;
    static addAccount: ({ creator, namespace }: CamelCasedProperties<Extract<ExecuteMsg$5, {
        add_account: unknown;
    }>["add_account"]>) => ExecuteMsg$5;
    static updateConfig: ({ namespaceRegistrationFee, securityEnabled }: CamelCasedProperties<Extract<ExecuteMsg$5, {
        update_config: unknown;
    }>["update_config"]>) => ExecuteMsg$5;
    static updateOwnership: (action: Action$3) => ExecuteMsg$5;
}
declare abstract class RegistryQueryMsgBuilder {
    static accounts: ({ accountIds }: CamelCasedProperties<Extract<QueryMsg$5, {
        accounts: unknown;
    }>["accounts"]>) => QueryMsg$5;
    static modules: ({ infos }: CamelCasedProperties<Extract<QueryMsg$5, {
        modules: unknown;
    }>["modules"]>) => QueryMsg$5;
    static namespaces: ({ accounts }: CamelCasedProperties<Extract<QueryMsg$5, {
        namespaces: unknown;
    }>["namespaces"]>) => QueryMsg$5;
    static namespace: ({ namespace }: {
        namespace: string;
    }) => QueryMsg$5;
    static config: () => QueryMsg$5;
    static accountList: ({ limit, startAfter }: CamelCasedProperties<Extract<QueryMsg$5, {
        account_list: unknown;
    }>["account_list"]>) => QueryMsg$5;
    static moduleList: ({ filter, limit, startAfter }: CamelCasedProperties<Extract<QueryMsg$5, {
        module_list: unknown;
    }>["module_list"]>) => QueryMsg$5;
    static namespaceList: ({ limit, startAfter }: CamelCasedProperties<Extract<QueryMsg$5, {
        namespace_list: unknown;
    }>["namespace_list"]>) => QueryMsg$5;
    static ownership: () => QueryMsg$5;
}

/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

interface RegistryMsg {
    contractAddress: string;
    sender: string;
    removeModule: ({ module }: {
        module: ModuleInfo$1;
    }, funds_?: Coin$4[]) => MsgExecuteContractEncodeObject;
    yankModule: ({ module }: {
        module: ModuleInfo$1;
    }, funds_?: Coin$4[]) => MsgExecuteContractEncodeObject;
    proposeModules: ({ modules }: {
        modules: ModuleInfo$1[][];
    }, funds_?: Coin$4[]) => MsgExecuteContractEncodeObject;
    updateModuleConfiguration: ({ moduleName, namespace, updateModule }: {
        moduleName: string;
        namespace: Namespace;
        updateModule: UpdateModule;
    }, funds_?: Coin$4[]) => MsgExecuteContractEncodeObject;
    approveOrRejectModules: ({ approves, rejects }: {
        approves: ModuleInfo$1[];
        rejects: ModuleInfo$1[];
    }, funds_?: Coin$4[]) => MsgExecuteContractEncodeObject;
    claimNamespace: ({ accountId, namespace }: {
        accountId: AccountId;
        namespace: string;
    }, funds_?: Coin$4[]) => MsgExecuteContractEncodeObject;
    forgoNamespace: ({ namespaces }: {
        namespaces: string[];
    }, funds_?: Coin$4[]) => MsgExecuteContractEncodeObject;
    addAccount: ({ creator, namespace }: {
        creator: string;
        namespace?: string;
    }, funds_?: Coin$4[]) => MsgExecuteContractEncodeObject;
    updateConfig: ({ namespaceRegistrationFee, securityEnabled }: {
        namespaceRegistrationFee?: ClearableForCoin;
        securityEnabled?: boolean;
    }, funds_?: Coin$4[]) => MsgExecuteContractEncodeObject;
    updateOwnership: (action: Action$3, funds_?: Coin$4[]) => MsgExecuteContractEncodeObject;
}
declare class RegistryMsgComposer implements RegistryMsg {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    removeModule: ({ module }: {
        module: ModuleInfo$1;
    }, funds_?: Coin$4[]) => MsgExecuteContractEncodeObject;
    yankModule: ({ module }: {
        module: ModuleInfo$1;
    }, funds_?: Coin$4[]) => MsgExecuteContractEncodeObject;
    proposeModules: ({ modules }: {
        modules: ModuleInfo$1[][];
    }, funds_?: Coin$4[]) => MsgExecuteContractEncodeObject;
    updateModuleConfiguration: ({ moduleName, namespace, updateModule }: {
        moduleName: string;
        namespace: Namespace;
        updateModule: UpdateModule;
    }, funds_?: Coin$4[]) => MsgExecuteContractEncodeObject;
    approveOrRejectModules: ({ approves, rejects }: {
        approves: ModuleInfo$1[];
        rejects: ModuleInfo$1[];
    }, funds_?: Coin$4[]) => MsgExecuteContractEncodeObject;
    claimNamespace: ({ accountId, namespace }: {
        accountId: AccountId;
        namespace: string;
    }, funds_?: Coin$4[]) => MsgExecuteContractEncodeObject;
    forgoNamespace: ({ namespaces }: {
        namespaces: string[];
    }, funds_?: Coin$4[]) => MsgExecuteContractEncodeObject;
    addAccount: ({ creator, namespace }: {
        creator: string;
        namespace?: string | undefined;
    }, funds_?: Coin$4[]) => MsgExecuteContractEncodeObject;
    updateConfig: ({ namespaceRegistrationFee, securityEnabled }: {
        namespaceRegistrationFee?: ClearableForCoin | undefined;
        securityEnabled?: boolean | undefined;
    }, funds_?: Coin$4[]) => MsgExecuteContractEncodeObject;
    updateOwnership: (action: Action$3, funds_?: Coin$4[]) => MsgExecuteContractEncodeObject;
}

export { AccountExecuteMsgBuilder, AccountQueryMsgBuilder, AnsHostExecuteMsgBuilder, type AnsHostMsg, AnsHostMsgComposer, AnsHostQueryMsgBuilder, Cw20BaseClient, Cw20BaseExecuteMsgBuilder, type Cw20BaseInterface, type Cw20BaseMsg, Cw20BaseMsgComposer, Cw20BaseQueryClient, Cw20BaseQueryMsgBuilder, type Cw20BaseReadOnlyInterface, Cw20Base_types as Cw20BaseTypes, IbcClientExecuteMsgBuilder, type IbcClientMsg, IbcClientMsgComposer, IbcClientQueryMsgBuilder, IcaClientExecuteMsgBuilder, type IcaClientMsg, IcaClientMsgComposer, IcaClientQueryMsgBuilder, RegistryExecuteMsgBuilder, type RegistryMsg, RegistryMsgComposer, RegistryQueryMsgBuilder };

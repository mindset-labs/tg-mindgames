import { j as AccountId, C as CosmosMsgForEmpty, E as ExecuteMsg, G as GovAction } from '../Registry.types-tb_Smu0e.js';
import { f as ContractMsg, A as AccountId$1, l as MaybeArray, E as Evaluate } from '../types-DL_NvWZJ.js';
import { P as PublicClientConfig, h as Client } from '../create-public-client-B8W9RZt-.js';
export { f as AbstractBaseClient, e as AbstractBaseClientConfig, b as ApiClient, A as ApiClientConfig, B as BaseClient, C as ClientConfig, E as Extended, a as PublicClient, g as createAbstractBaseClient, d as createApiClient, i as createClient, c as createPublicClient } from '../create-public-client-B8W9RZt-.js';
import { E as ExtractAndPartializeParameters, W as WithCosmWasmSignOptions } from '../get-registry-query-client-from-api-kZlB8Zat.js';
import * as _cosmjs_cosmwasm_stargate from '@cosmjs/cosmwasm-stargate';
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { M as ModuleType } from '../module-type-Dq9dh99O.js';
import { g as getAccountAddressFromApi, b as getAccountQueryClientFromApi, d as getModuleAddress, i as getModules, f as getModuleInstantiate2AddressFromApi, k as getNamespace, m as getOwner, s as getSubAccountIds, u as getSubAccountSequences, q as getRemoteAccounts, o as getRemoteAccountIds, O as createAccount, L as createAccountMonarchy, Y as getAnsHostClient, Q as getAnsHostClientFromApi, V as getAnsHostClientFromRegistry, a6 as getRegistryClient, a4 as getRegistryClientFromApi, _ as getAccountClient, a2 as getSigningCosmWasmClient, a0 as getSenderAddress, a7 as BaseAccountWalletParameters, v as claimNamespace, x as createSubAccount, y as deposit, J as withdraw, I as sendFunds, z as execute, B as getAccountClientFromApi, F as revokeNamespace, H as upgradeModules } from '../withdraw-CL3Wo4AA.js';
import * as cosmjs_types_cosmos_tx_v1beta1_service from 'cosmjs-types/cosmos/tx/v1beta1/service';
import * as _cosmjs_stargate from '@cosmjs/stargate';
import { Coin } from '@cosmjs/stargate';
import { e as ExecuteMsg$1, M as ModuleInstallConfig, v as AccountClient } from '../Registry.client-DeRpB8OW.js';
import { OverrideProperties } from 'type-fest';
import { c as MergedModuleInstallConfig, A as Asset } from '../types-CdpDSdJ3.js';
import '@abstract-money/cli/cosmjs';

type QueryModuleParameters<TModuleMsg extends ContractMsg = ContractMsg> = {
    accountId: AccountId;
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
} & {
    moduleId: string;
    moduleType?: ModuleType;
    queryMsg: TModuleMsg;
};
declare function queryModule<TModuleMsg extends ContractMsg = ContractMsg>({ accountId, cosmWasmClient, apiUrl, moduleId, moduleType, queryMsg, }: QueryModuleParameters<TModuleMsg>): Promise<ContractMsg>;

type GetAccountIdParameters = {
    accountId: AccountId;
    cosmWasmClient: CosmWasmClient;
};
/**
 * Get the account id with the chain name set.
 * @param accountId
 * @param cosmWasmClient
 */
declare function getAccountId({ accountId, cosmWasmClient, }: GetAccountIdParameters): Promise<AccountId$1>;

type GetAccountSettingsParameters = {
    accountId: AccountId;
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
};
/**
 * @deprecated
 * @param accountId
 * @param cosmWasmClient
 * @param apiUrl
 */
declare function getAccountSettings({ accountId, cosmWasmClient, apiUrl, }: GetAccountSettingsParameters): Promise<{
    ibcEnabled: boolean;
}>;

type GetRegistryAccountIdParameters = {
    accountId: AccountId;
};
declare function getRegistryAccountId({ accountId, }: GetRegistryAccountIdParameters): AccountId;

type SimulateExecuteRemoteParameters = {
    accountId: AccountId;
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
    hostChainName: string;
    msgs: MaybeArray<CosmosMsgForEmpty>;
};
/**
 * Simulate messages to be executed on a remote account on a remote chain. This should be run before calling `{@link AccountPublicClient#executeRemote}`
 * @param accountId
 * @param cosmWasmClient
 * @param apiUrl
 * @param remoteChainName
 * @experimental
 */
declare function simulateExecuteRemote({ accountId, cosmWasmClient, apiUrl, hostChainName, msgs, }: SimulateExecuteRemoteParameters): Promise<cosmjs_types_cosmos_tx_v1beta1_service.SimulateResponse>;

type SimulateExecuteRemoteAccountParameters = {
    accountId: AccountId;
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
    hostChainName: string;
    accountMsg: ExecuteMsg;
};
/**
 * Simulate messages to be executed on a remote account on a remote chain. This should be run before calling `{@link AccountPublicClient#executeRemote}`
 * @param accountId
 * @param cosmWasmClient
 * @param apiUrl
 * @param hostChainName
 * @param accountMsg
 * @experimental
 */
declare function simulateExecuteRemoteAccount({ accountId, cosmWasmClient, apiUrl, hostChainName, accountMsg, }: SimulateExecuteRemoteAccountParameters): Promise<cosmjs_types_cosmos_tx_v1beta1_service.SimulateResponse>;

type ExtractAndPartializeDecoratedParametersFromParameters$2<fn extends (parameters: any) => any> = ExtractAndPartializeParameters<fn, 'cosmWasmClient' | 'accountId' | 'apiUrl'>;
/**
 * The public query client actions for an Abstract account.
 */
type AccountPublicActions = {
    getRegistryAccountId(): ReturnType<typeof getRegistryAccountId>;
    getAccountId(): ReturnType<typeof getAccountId>;
    getAccountAddress(parameters?: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getAccountAddressFromApi>): ReturnType<typeof getAccountAddressFromApi>;
    getAccountSettings(parameters?: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getAccountSettings>): ReturnType<typeof getAccountSettings>;
    getAccountQueryClientFromApi(parameters?: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getAccountQueryClientFromApi>): ReturnType<typeof getAccountQueryClientFromApi>;
    getModuleAddress(parameters: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getModuleAddress>): ReturnType<typeof getModuleAddress>;
    getModules(parameters?: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getModules>): ReturnType<typeof getModules>;
    predictModuleAddress(parameters: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getModuleInstantiate2AddressFromApi>): ReturnType<typeof getModuleInstantiate2AddressFromApi>;
    getNamespace(parameters?: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getNamespace>): ReturnType<typeof getNamespace>;
    getOwner(parameters?: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getOwner>): ReturnType<typeof getOwner>;
    getSubAccountIds(parameters?: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getSubAccountIds>): ReturnType<typeof getSubAccountIds>;
    getSubAccountSequences(parameters?: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getSubAccountSequences>): ReturnType<typeof getSubAccountSequences>;
    getRemoteAccounts(parameters?: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getRemoteAccounts>): ReturnType<typeof getRemoteAccounts>;
    getRemoteAccountIds(parameters?: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof getRemoteAccountIds>): ReturnType<typeof getRemoteAccountIds>;
    simulateExecuteRemoteAccount(parameters: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof simulateExecuteRemoteAccount>): ReturnType<typeof simulateExecuteRemoteAccount>;
    simulateExecuteRemote(parameters: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof simulateExecuteRemote>): ReturnType<typeof simulateExecuteRemote>;
    queryModule<TModuleMsg extends ContractMsg>(parameters: ExtractAndPartializeDecoratedParametersFromParameters$2<typeof queryModule<TModuleMsg>>): ReturnType<typeof queryModule<TModuleMsg>>;
};

type AccountPublicClientConfig = PublicClientConfig & {
    accountId: AccountId;
};
/**
 * A query client for querying a specific account in the Abstract infrastructure.
 */
type AccountPublicClient = Evaluate<Client<AccountPublicActions>>;
declare function createAccountPublicClient(parameters: AccountPublicClientConfig): AccountPublicClient;

type ExtractAndPartializeDecoratedParametersFromParameters$1<fn extends (payload: any) => any> = ExtractAndPartializeParameters<fn, 'signingCosmWasmClient' | 'sender' | 'apiUrl'>;
type WalletActions = {
    createAccount(parameters: ExtractAndPartializeDecoratedParametersFromParameters$1<typeof createAccount>): ReturnType<typeof createAccount>;
    createAccountMonarchy(parameters: ExtractAndPartializeDecoratedParametersFromParameters$1<typeof createAccountMonarchy>): ReturnType<typeof createAccountMonarchy>;
    getAnsHostClient(parameters: ExtractAndPartializeDecoratedParametersFromParameters$1<typeof getAnsHostClient>): ReturnType<typeof getAnsHostClient>;
    getAnsHostClientFromApi(parameters?: ExtractAndPartializeDecoratedParametersFromParameters$1<typeof getAnsHostClientFromApi>): ReturnType<typeof getAnsHostClientFromApi>;
    getAnsHostClientFromRegistry(parameters: ExtractAndPartializeDecoratedParametersFromParameters$1<typeof getAnsHostClientFromRegistry>): ReturnType<typeof getAnsHostClientFromRegistry>;
    getRegistryClient(parameters: ExtractAndPartializeDecoratedParametersFromParameters$1<typeof getRegistryClient>): ReturnType<typeof getRegistryClient>;
    getRegistryClientFromApi(parameters?: ExtractAndPartializeDecoratedParametersFromParameters$1<typeof getRegistryClientFromApi>): ReturnType<typeof getRegistryClientFromApi>;
    getAccountClient(parameters: ExtractAndPartializeDecoratedParametersFromParameters$1<typeof getAccountClient>): ReturnType<typeof getAccountClient>;
    getSigningCosmWasmClient(): ReturnType<typeof getSigningCosmWasmClient>;
    getSenderAddress(): ReturnType<typeof getSenderAddress>;
};

type WalletClientConfig = Omit<PublicClientConfig, 'cosmWasmClient'> & {
    signingCosmWasmClient: SigningCosmWasmClient;
    sender: string;
};
type WalletClient = Evaluate<Client<WalletActions>>;
/**
 * Create a signing client to interact with the Abstract infrastructure.
 * @param parameters
 */
declare function createWalletClient(parameters: WalletClientConfig): WalletClient;

type CreateRemoteAccountParameters = Omit<WithCosmWasmSignOptions<BaseAccountWalletParameters & Omit<Extract<ExecuteMsg$1, {
    register: unknown;
}>['register'], 'host_chain' | 'install_modules'> & {
    hostChainName: string;
    installModules?: ModuleInstallConfig[];
}>, 'funds'>;
/**
 * Create a remote account.
 * @param accountId
 * @param signingCosmWasmClient
 * @param apiUrl
 * @param sender
 * @param hostChainName
 * @param registerMsgParams
 * @param fee
 * @param memo
 */
declare function createRemoteAccount({ accountId, signingCosmWasmClient, apiUrl, sender, fee, memo, hostChainName, installModules, namespace, }: CreateRemoteAccountParameters): Promise<_cosmjs_stargate.DeliverTxResponse>;

type EnableIbcParameters = WithCosmWasmSignOptions<{
    accountId: AccountId;
    signingCosmWasmClient: SigningCosmWasmClient;
    apiUrl: string;
    sender: string;
}>;
declare function enableIbc({ ...parameters }: EnableIbcParameters): Promise<ExecuteResult>;

type Base64EncodedJson$1 = string;
type ExecuteOnModuleParameters = WithCosmWasmSignOptions<BaseAccountWalletParameters & {
    moduleId: string;
    moduleType?: ModuleType;
    moduleMsg: Record<string, unknown> | Base64EncodedJson$1;
    moduleFunds?: Coin[];
}>;
/**
 * Execute a message on a module as the admin of the Account. Must be called by the owner.
 * @param accountId
 * @param signingCosmWasmClient
 * @param apiUrl
 * @param sender
 * @param moduleId - The ID of the module on which the message should be executed.
 * @param moduleType - The type of the module.
 * @param moduleFunds - Funds to be sent from the account
 * @param msg - The execution message.
 * @param fee
 * @param memo
 */
declare function executeOnModule({ accountId, signingCosmWasmClient, apiUrl, sender, moduleId, moduleType, moduleMsg, moduleFunds, fee, memo, funds, }: ExecuteOnModuleParameters): Promise<_cosmjs_stargate.DeliverTxResponse>;

type ExecuteOnRemoteParameters$1 = Omit<WithCosmWasmSignOptions<BaseAccountWalletParameters & {
    hostChainName: string;
    accountMsg: MaybeArray<ExecuteMsg>;
}>, 'funds'>;
/**
 * Execute one message on a remote chain on the remote account itself as the account.
 * @param accountId
 * @param signingCosmWasmClient
 * @param apiUrl
 * @param sender
 * @param accountMsg
 * @param callbackInfo
 * @param hostChainName
 * @param fee
 * @param memo
 */
declare function executeOnRemoteAccount({ accountId, signingCosmWasmClient, apiUrl, sender, accountMsg, hostChainName, fee, memo, }: ExecuteOnRemoteParameters$1): Promise<_cosmjs_stargate.DeliverTxResponse>;

type Base64EncodedJson = string;
type ExecuteOnRemoteModuleParameters = Omit<WithCosmWasmSignOptions<BaseAccountWalletParameters & {
    hostChainName: string;
    moduleId: string;
    moduleType?: ModuleType;
    moduleMsg: Record<string, unknown> | Base64EncodedJson;
}>, 'funds'>;
/**
 * Execute a message on a remote module as the admin of the Account. Must be called by the owner.
 * @param accountId
 * @param signingCosmWasmClient
 * @param apiUrl
 * @param sender
 * @param moduleId
 * @param moduleType
 * @param msg
 * @param hostChainName
 * @param fee
 * @param memo
 * @todo: ensure that remote module exists and is valid
 */
declare function executeOnRemoteModule({ accountId, signingCosmWasmClient, apiUrl, sender, moduleId, moduleType, moduleMsg, hostChainName, fee, memo, }: ExecuteOnRemoteModuleParameters): Promise<_cosmjs_stargate.DeliverTxResponse>;

type ExecuteOnRemoteParameters = Omit<WithCosmWasmSignOptions<BaseAccountWalletParameters & {
    hostChainName: string;
    msgs: MaybeArray<CosmosMsgForEmpty>;
}>, 'funds'>;
/**
 * Execute a message on a remote account as the admin of the Account. Must be called by the owner.
 * This message will execute on the proxy of the account.
 * @param accountId
 * @param signingCosmWasmClient
 * @param apiUrl
 * @param sender
 * @param hostChainName
 * @param msgs
 * @param fee
 * @param memo
 */
declare function executeRemote({ accountId, signingCosmWasmClient, apiUrl, sender, msgs, hostChainName, fee, memo, }: ExecuteOnRemoteParameters): Promise<_cosmjs_stargate.DeliverTxResponse>;

type InstallModulesParameters = WithCosmWasmSignOptions<BaseAccountWalletParameters & OverrideProperties<Parameters<typeof AccountClient.prototype.installModules>[0], {
    modules: MergedModuleInstallConfig[];
}>>;
declare function installModules({ accountId, signingCosmWasmClient, apiUrl, sender, fee, memo, funds, modules, ...rest }: InstallModulesParameters): Promise<ExecuteResult>;

type RequestFundsFromRemoteParameters = Omit<WithCosmWasmSignOptions<BaseAccountWalletParameters & {
    hostChainName: string;
}>, 'funds'>;
/**
 * Request funds from a remote chain.
 * @param accountId
 * @param subAccountId
 * @param signingCosmWasmClient
 * @param apiUrl
 * @param sender
 * @param fee
 * @param memo
 */
declare function requestFundsFromRemote({ accountId, signingCosmWasmClient, apiUrl, sender, hostChainName, fee, memo, }: RequestFundsFromRemoteParameters): Promise<_cosmjs_stargate.DeliverTxResponse>;

type SendFundsToRemoteParameters = Omit<WithCosmWasmSignOptions<BaseAccountWalletParameters & {
    hostChainName: string;
    assets: MaybeArray<Asset>;
}>, 'funds'>;
/**
 * Send funds to a remote chain.
 * @param accountId
 * @param subAccountId
 * @param signingCosmWasmClient
 * @param apiUrl
 * @param sender
 * @param fee
 * @param memo
 */
declare function sendFundsToRemote({ accountId, signingCosmWasmClient, apiUrl, sender, hostChainName, assets, fee, memo, }: SendFundsToRemoteParameters): Promise<_cosmjs_stargate.DeliverTxResponse>;

type UninstallModulesParameters = WithCosmWasmSignOptions<BaseAccountWalletParameters & Parameters<typeof AccountClient.prototype.uninstallModule>[0]>;
declare function uninstallModule({ accountId, signingCosmWasmClient, apiUrl, sender, fee, memo, funds, ...rest }: UninstallModulesParameters): Promise<_cosmjs_cosmwasm_stargate.ExecuteResult>;

type UpdateInfoParameters = WithCosmWasmSignOptions<BaseAccountWalletParameters & Parameters<typeof AccountClient.prototype.updateInfo>[0]>;
declare function updateInfo({ accountId, signingCosmWasmClient, apiUrl, sender, fee, memo, funds, ...rest }: UpdateInfoParameters): Promise<_cosmjs_cosmwasm_stargate.ExecuteResult>;

type UpdateOwnershipParameters = WithCosmWasmSignOptions<BaseAccountWalletParameters & {
    update: GovAction;
}>;
declare function updateOwnership({ accountId, signingCosmWasmClient, apiUrl, sender, fee, memo, funds, update, }: UpdateOwnershipParameters): Promise<_cosmjs_cosmwasm_stargate.ExecuteResult>;

type UpdateStatusParameters = WithCosmWasmSignOptions<BaseAccountWalletParameters & Parameters<typeof AccountClient.prototype.updateStatus>[0]>;
declare function updateStatus({ accountId, signingCosmWasmClient, apiUrl, sender, fee, memo, funds, ...rest }: UpdateStatusParameters): Promise<_cosmjs_cosmwasm_stargate.ExecuteResult>;

type ExtractAndPartializeDecoratedParametersFromParameters<fn extends (payload: any) => any> = ExtractAndPartializeParameters<fn, 'accountId' | 'signingCosmWasmClient' | 'apiUrl' | 'sender'>;
/**
 * The wallet (mutating) actions for an Abstract account.
 */
type AccountWalletActions = {
    claimNamespace(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof claimNamespace>): ReturnType<typeof claimNamespace>;
    createSubAccount(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof createSubAccount>): ReturnType<typeof createSubAccount>;
    createRemoteAccount(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof createRemoteAccount>): ReturnType<typeof createRemoteAccount>;
    deposit(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof deposit>): ReturnType<typeof deposit>;
    /**
     * @deprecated
     * @see sendFunds
     */
    withdraw(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof withdraw>): ReturnType<typeof withdraw>;
    sendFunds(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof sendFunds>): ReturnType<typeof sendFunds>;
    execute(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof execute>): ReturnType<typeof execute>;
    executeOnModule(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof executeOnModule>): ReturnType<typeof executeOnModule>;
    executeOnRemote(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof executeOnRemoteAccount>): ReturnType<typeof executeOnRemoteAccount>;
    executeOnRemoteModule(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof executeOnRemoteModule>): ReturnType<typeof executeOnRemoteModule>;
    executeRemote(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof executeRemote>): ReturnType<typeof executeRemote>;
    sendFundsToRemote(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof sendFundsToRemote>): ReturnType<typeof sendFundsToRemote>;
    requestFundsFromRemote(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof requestFundsFromRemote>): ReturnType<typeof requestFundsFromRemote>;
    getAccountClientFromApi(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof getAccountClientFromApi>): ReturnType<typeof getAccountClientFromApi>;
    revokeNamespace(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof revokeNamespace>): ReturnType<typeof revokeNamespace>;
    updateInfo(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof updateInfo>): ReturnType<typeof updateInfo>;
    upgradeModules(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof upgradeModules>): ReturnType<typeof upgradeModules>;
    installModules(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof installModules>): ReturnType<typeof installModules>;
    uninstallModule(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof uninstallModule>): ReturnType<typeof uninstallModule>;
    updateStatus(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof updateStatus>): ReturnType<typeof updateStatus>;
    updateOwnership(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof updateOwnership>): ReturnType<typeof updateOwnership>;
    enableIbc(parameters: ExtractAndPartializeDecoratedParametersFromParameters<typeof enableIbc>): ReturnType<typeof enableIbc>;
};

type AccountWalletClientConfig = WalletClientConfig & {
    accountId: AccountId;
};
/**
 * A signing client interact with a specific account in the Abstract infrastructure.
 */
type AccountWalletClient = Evaluate<Client<AccountWalletActions & WalletActions>>;
declare function createAccountWalletClient(parameters: AccountWalletClientConfig): AccountWalletClient;

export { type AccountPublicClient, type AccountPublicClientConfig, type AccountWalletClient, type AccountWalletClientConfig, Client, PublicClientConfig, type WalletClient, type WalletClientConfig, createAccountPublicClient, createAccountWalletClient, createWalletClient };

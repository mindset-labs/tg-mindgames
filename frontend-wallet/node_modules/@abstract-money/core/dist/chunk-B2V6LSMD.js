// src/codegen/abstract/cosmwasm-codegen/Account.client.ts
var AccountQueryClient = class {
  constructor(client, contractAddress) {
    this.config = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        config: {}
      });
    };
    this.moduleVersions = async ({
      ids
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        module_versions: {
          ids
        }
      });
    };
    this.moduleAddresses = async ({
      ids
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        module_addresses: {
          ids
        }
      });
    };
    this.moduleInfos = async ({
      limit,
      startAfter
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        module_infos: {
          limit,
          start_after: startAfter
        }
      });
    };
    this.info = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        info: {}
      });
    };
    this.subAccountIds = async ({
      limit,
      startAfter
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        sub_account_ids: {
          limit,
          start_after: startAfter
        }
      });
    };
    this.topLevelOwner = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        top_level_owner: {}
      });
    };
    this.ownership = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        ownership: {}
      });
    };
    this.authenticatorByID = async ({
      id
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        authenticator_by_i_d: {
          id
        }
      });
    };
    this.authenticatorIDs = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        authenticator_i_ds: {}
      });
    };
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.moduleVersions = this.moduleVersions.bind(this);
    this.moduleAddresses = this.moduleAddresses.bind(this);
    this.moduleInfos = this.moduleInfos.bind(this);
    this.info = this.info.bind(this);
    this.subAccountIds = this.subAccountIds.bind(this);
    this.topLevelOwner = this.topLevelOwner.bind(this);
    this.ownership = this.ownership.bind(this);
    this.authenticatorByID = this.authenticatorByID.bind(this);
    this.authenticatorIDs = this.authenticatorIDs.bind(this);
  }
};
var AccountClient = class extends AccountQueryClient {
  constructor(client, sender, contractAddress) {
    super(client, contractAddress);
    this.execute = async ({
      msgs
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        execute: {
          msgs
        }
      }, fee_, memo_, funds_);
    };
    this.executeWithData = async ({
      msg
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        execute_with_data: {
          msg
        }
      }, fee_, memo_, funds_);
    };
    this.executeOnModule = async ({
      execMsg,
      funds,
      moduleId
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        execute_on_module: {
          exec_msg: execMsg,
          funds,
          module_id: moduleId
        }
      }, fee_, memo_, funds_);
    };
    this.adminExecute = async ({
      addr,
      msg
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        admin_execute: {
          addr,
          msg
        }
      }, fee_, memo_, funds_);
    };
    this.adminExecuteOnModule = async ({
      moduleId,
      msg
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        admin_execute_on_module: {
          module_id: moduleId,
          msg
        }
      }, fee_, memo_, funds_);
    };
    this.icaAction = async ({
      actionQueryMsg
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        ica_action: {
          action_query_msg: actionQueryMsg
        }
      }, fee_, memo_, funds_);
    };
    this.updateInternalConfig = async (internalConfigAction, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        update_internal_config: internalConfigAction
      }, fee_, memo_, funds_);
    };
    this.installModules = async ({
      modules
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        install_modules: {
          modules
        }
      }, fee_, memo_, funds_);
    };
    this.uninstallModule = async ({
      moduleId
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        uninstall_module: {
          module_id: moduleId
        }
      }, fee_, memo_, funds_);
    };
    this.upgrade = async ({
      modules
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        upgrade: {
          modules
        }
      }, fee_, memo_, funds_);
    };
    this.createSubAccount = async ({
      accountId,
      description,
      installModules,
      link,
      name,
      namespace
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        create_sub_account: {
          account_id: accountId,
          description,
          install_modules: installModules,
          link,
          name,
          namespace
        }
      }, fee_, memo_, funds_);
    };
    this.updateInfo = async ({
      description,
      link,
      name
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        update_info: {
          description,
          link,
          name
        }
      }, fee_, memo_, funds_);
    };
    this.updateStatus = async ({
      isSuspended
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        update_status: {
          is_suspended: isSuspended
        }
      }, fee_, memo_, funds_);
    };
    this.updateSubAccount = async (updateSubAccountAction, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        update_sub_account: updateSubAccountAction
      }, fee_, memo_, funds_);
    };
    this.updateOwnership = async (govAction, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        update_ownership: govAction
      }, fee_, memo_, funds_);
    };
    this.addAuthMethod = async ({
      addAuthenticator
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        add_auth_method: {
          add_authenticator: addAuthenticator
        }
      }, fee_, memo_, funds_);
    };
    this.removeAuthMethod = async ({
      id
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        remove_auth_method: {
          id
        }
      }, fee_, memo_, funds_);
    };
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.execute = this.execute.bind(this);
    this.executeWithData = this.executeWithData.bind(this);
    this.executeOnModule = this.executeOnModule.bind(this);
    this.adminExecute = this.adminExecute.bind(this);
    this.adminExecuteOnModule = this.adminExecuteOnModule.bind(this);
    this.icaAction = this.icaAction.bind(this);
    this.updateInternalConfig = this.updateInternalConfig.bind(this);
    this.installModules = this.installModules.bind(this);
    this.uninstallModule = this.uninstallModule.bind(this);
    this.upgrade = this.upgrade.bind(this);
    this.createSubAccount = this.createSubAccount.bind(this);
    this.updateInfo = this.updateInfo.bind(this);
    this.updateStatus = this.updateStatus.bind(this);
    this.updateSubAccount = this.updateSubAccount.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
    this.addAuthMethod = this.addAuthMethod.bind(this);
    this.removeAuthMethod = this.removeAuthMethod.bind(this);
  }
};

// src/codegen/abstract/cosmwasm-codegen/Account.message-builder.ts
var AccountExecuteMsgBuilder = class {
};
AccountExecuteMsgBuilder.execute = ({
  msgs
}) => {
  return {
    execute: {
      msgs
    }
  };
};
AccountExecuteMsgBuilder.executeWithData = ({
  msg
}) => {
  return {
    execute_with_data: {
      msg
    }
  };
};
AccountExecuteMsgBuilder.executeOnModule = ({
  execMsg,
  funds,
  moduleId
}) => {
  return {
    execute_on_module: {
      exec_msg: execMsg,
      funds,
      module_id: moduleId
    }
  };
};
AccountExecuteMsgBuilder.adminExecute = ({
  addr,
  msg
}) => {
  return {
    admin_execute: {
      addr,
      msg
    }
  };
};
AccountExecuteMsgBuilder.adminExecuteOnModule = ({
  moduleId,
  msg
}) => {
  return {
    admin_execute_on_module: {
      module_id: moduleId,
      msg
    }
  };
};
AccountExecuteMsgBuilder.icaAction = ({
  actionQueryMsg
}) => {
  return {
    ica_action: {
      action_query_msg: actionQueryMsg
    }
  };
};
AccountExecuteMsgBuilder.updateInternalConfig = (internalConfigAction) => {
  return {
    update_internal_config: internalConfigAction
  };
};
AccountExecuteMsgBuilder.installModules = ({
  modules
}) => {
  return {
    install_modules: {
      modules
    }
  };
};
AccountExecuteMsgBuilder.uninstallModule = ({
  moduleId
}) => {
  return {
    uninstall_module: {
      module_id: moduleId
    }
  };
};
AccountExecuteMsgBuilder.upgrade = ({
  modules
}) => {
  return {
    upgrade: {
      modules
    }
  };
};
AccountExecuteMsgBuilder.createSubAccount = ({
  accountId,
  description,
  installModules,
  link,
  name,
  namespace
}) => {
  return {
    create_sub_account: {
      account_id: accountId,
      description,
      install_modules: installModules,
      link,
      name,
      namespace
    }
  };
};
AccountExecuteMsgBuilder.updateInfo = ({
  description,
  link,
  name
}) => {
  return {
    update_info: {
      description,
      link,
      name
    }
  };
};
AccountExecuteMsgBuilder.updateStatus = ({
  isSuspended
}) => {
  return {
    update_status: {
      is_suspended: isSuspended
    }
  };
};
AccountExecuteMsgBuilder.updateSubAccount = (updateSubAccountAction) => {
  return {
    update_sub_account: updateSubAccountAction
  };
};
AccountExecuteMsgBuilder.updateOwnership = (govAction) => {
  return {
    update_ownership: govAction
  };
};
AccountExecuteMsgBuilder.addAuthMethod = ({
  addAuthenticator
}) => {
  return {
    add_auth_method: {
      add_authenticator: addAuthenticator
    }
  };
};
AccountExecuteMsgBuilder.removeAuthMethod = ({
  id
}) => {
  return {
    remove_auth_method: {
      id
    }
  };
};
var AccountQueryMsgBuilder = class {
};
AccountQueryMsgBuilder.config = () => {
  return {
    config: {}
  };
};
AccountQueryMsgBuilder.moduleVersions = ({
  ids
}) => {
  return {
    module_versions: {
      ids
    }
  };
};
AccountQueryMsgBuilder.moduleAddresses = ({
  ids
}) => {
  return {
    module_addresses: {
      ids
    }
  };
};
AccountQueryMsgBuilder.moduleInfos = ({
  limit,
  startAfter
}) => {
  return {
    module_infos: {
      limit,
      start_after: startAfter
    }
  };
};
AccountQueryMsgBuilder.info = () => {
  return {
    info: {}
  };
};
AccountQueryMsgBuilder.subAccountIds = ({
  limit,
  startAfter
}) => {
  return {
    sub_account_ids: {
      limit,
      start_after: startAfter
    }
  };
};
AccountQueryMsgBuilder.topLevelOwner = () => {
  return {
    top_level_owner: {}
  };
};
AccountQueryMsgBuilder.ownership = () => {
  return {
    ownership: {}
  };
};
AccountQueryMsgBuilder.authenticatorByID = ({
  id
}) => {
  return {
    authenticator_by_i_d: {
      id
    }
  };
};
AccountQueryMsgBuilder.authenticatorIDs = () => {
  return {
    authenticator_i_ds: {}
  };
};

// src/codegen/abstract/cosmwasm-codegen/Account.message-composer.ts
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
var AccountMsgComposer = class {
  constructor(sender, contractAddress) {
    this.execute = ({
      msgs
    }, funds_) => {
      const _msg = {
        execute: {
          msgs
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf8(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.executeWithData = ({
      msg
    }, funds_) => {
      const _msg = {
        execute_with_data: {
          msg
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf8(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.executeOnModule = ({
      execMsg,
      funds,
      moduleId
    }, funds_) => {
      const _msg = {
        execute_on_module: {
          exec_msg: execMsg,
          funds,
          module_id: moduleId
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf8(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.adminExecute = ({
      addr,
      msg
    }, funds_) => {
      const _msg = {
        admin_execute: {
          addr,
          msg
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf8(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.adminExecuteOnModule = ({
      moduleId,
      msg
    }, funds_) => {
      const _msg = {
        admin_execute_on_module: {
          module_id: moduleId,
          msg
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf8(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.icaAction = ({
      actionQueryMsg
    }, funds_) => {
      const _msg = {
        ica_action: {
          action_query_msg: actionQueryMsg
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf8(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.updateInternalConfig = (internalConfigAction, funds_) => {
      const _msg = {
        update_internal_config: {}
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf8(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.installModules = ({
      modules
    }, funds_) => {
      const _msg = {
        install_modules: {
          modules
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf8(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.uninstallModule = ({
      moduleId
    }, funds_) => {
      const _msg = {
        uninstall_module: {
          module_id: moduleId
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf8(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.upgrade = ({
      modules
    }, funds_) => {
      const _msg = {
        upgrade: {
          modules
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf8(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.createSubAccount = ({
      accountId,
      description,
      installModules,
      link,
      name,
      namespace
    }, funds_) => {
      const _msg = {
        create_sub_account: {
          account_id: accountId,
          description,
          install_modules: installModules,
          link,
          name,
          namespace
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf8(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.updateInfo = ({
      description,
      link,
      name
    }, funds_) => {
      const _msg = {
        update_info: {
          description,
          link,
          name
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf8(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.updateStatus = ({
      isSuspended
    }, funds_) => {
      const _msg = {
        update_status: {
          is_suspended: isSuspended
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf8(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.updateSubAccount = (updateSubAccountAction, funds_) => {
      const _msg = {
        update_sub_account: {}
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf8(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.updateOwnership = (govAction, funds_) => {
      const _msg = {
        update_ownership: {}
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf8(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.addAuthMethod = ({
      addAuthenticator
    }, funds_) => {
      const _msg = {
        add_auth_method: {
          add_authenticator: addAuthenticator
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf8(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.removeAuthMethod = ({
      id
    }, funds_) => {
      const _msg = {
        remove_auth_method: {
          id
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf8(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.execute = this.execute.bind(this);
    this.executeWithData = this.executeWithData.bind(this);
    this.executeOnModule = this.executeOnModule.bind(this);
    this.adminExecute = this.adminExecute.bind(this);
    this.adminExecuteOnModule = this.adminExecuteOnModule.bind(this);
    this.icaAction = this.icaAction.bind(this);
    this.updateInternalConfig = this.updateInternalConfig.bind(this);
    this.installModules = this.installModules.bind(this);
    this.uninstallModule = this.uninstallModule.bind(this);
    this.upgrade = this.upgrade.bind(this);
    this.createSubAccount = this.createSubAccount.bind(this);
    this.updateInfo = this.updateInfo.bind(this);
    this.updateStatus = this.updateStatus.bind(this);
    this.updateSubAccount = this.updateSubAccount.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
    this.addAuthMethod = this.addAuthMethod.bind(this);
    this.removeAuthMethod = this.removeAuthMethod.bind(this);
  }
};

// src/codegen/abstract/cosmwasm-codegen/Account.types.ts
var Account_types_exports = {};

// src/codegen/abstract/cosmwasm-codegen/AnsHost.client.ts
var AnsHostQueryClient = class {
  constructor(client, contractAddress) {
    this.config = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        config: {}
      });
    };
    this.assets = async ({
      names
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        assets: {
          names
        }
      });
    };
    this.assetList = async ({
      filter,
      limit,
      startAfter
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        asset_list: {
          filter,
          limit,
          start_after: startAfter
        }
      });
    };
    this.assetInfos = async ({
      infos
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        asset_infos: {
          infos
        }
      });
    };
    this.assetInfoList = async ({
      filter,
      limit,
      startAfter
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        asset_info_list: {
          filter,
          limit,
          start_after: startAfter
        }
      });
    };
    this.contracts = async ({
      entries
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        contracts: {
          entries
        }
      });
    };
    this.contractList = async ({
      filter,
      limit,
      startAfter
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        contract_list: {
          filter,
          limit,
          start_after: startAfter
        }
      });
    };
    this.channels = async ({
      entries
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        channels: {
          entries
        }
      });
    };
    this.channelList = async ({
      filter,
      limit,
      startAfter
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        channel_list: {
          filter,
          limit,
          start_after: startAfter
        }
      });
    };
    this.registeredDexes = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        registered_dexes: {}
      });
    };
    this.pools = async ({
      pairings
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        pools: {
          pairings
        }
      });
    };
    this.poolList = async ({
      filter,
      limit,
      startAfter
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        pool_list: {
          filter,
          limit,
          start_after: startAfter
        }
      });
    };
    this.poolMetadatas = async ({
      ids
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        pool_metadatas: {
          ids
        }
      });
    };
    this.poolMetadataList = async ({
      filter,
      limit,
      startAfter
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        pool_metadata_list: {
          filter,
          limit,
          start_after: startAfter
        }
      });
    };
    this.ownership = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        ownership: {}
      });
    };
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.assets = this.assets.bind(this);
    this.assetList = this.assetList.bind(this);
    this.assetInfos = this.assetInfos.bind(this);
    this.assetInfoList = this.assetInfoList.bind(this);
    this.contracts = this.contracts.bind(this);
    this.contractList = this.contractList.bind(this);
    this.channels = this.channels.bind(this);
    this.channelList = this.channelList.bind(this);
    this.registeredDexes = this.registeredDexes.bind(this);
    this.pools = this.pools.bind(this);
    this.poolList = this.poolList.bind(this);
    this.poolMetadatas = this.poolMetadatas.bind(this);
    this.poolMetadataList = this.poolMetadataList.bind(this);
    this.ownership = this.ownership.bind(this);
  }
};
var AnsHostClient = class extends AnsHostQueryClient {
  constructor(client, sender, contractAddress) {
    super(client, contractAddress);
    this.updateContractAddresses = async ({
      toAdd,
      toRemove
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        update_contract_addresses: {
          to_add: toAdd,
          to_remove: toRemove
        }
      }, fee_, memo_, funds_);
    };
    this.updateAssetAddresses = async ({
      toAdd,
      toRemove
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        update_asset_addresses: {
          to_add: toAdd,
          to_remove: toRemove
        }
      }, fee_, memo_, funds_);
    };
    this.updateChannels = async ({
      toAdd,
      toRemove
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        update_channels: {
          to_add: toAdd,
          to_remove: toRemove
        }
      }, fee_, memo_, funds_);
    };
    this.updateDexes = async ({
      toAdd,
      toRemove
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        update_dexes: {
          to_add: toAdd,
          to_remove: toRemove
        }
      }, fee_, memo_, funds_);
    };
    this.updatePools = async ({
      toAdd,
      toRemove
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        update_pools: {
          to_add: toAdd,
          to_remove: toRemove
        }
      }, fee_, memo_, funds_);
    };
    this.updateOwnership = async (action, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        update_ownership: action
      }, fee_, memo_, funds_);
    };
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateContractAddresses = this.updateContractAddresses.bind(this);
    this.updateAssetAddresses = this.updateAssetAddresses.bind(this);
    this.updateChannels = this.updateChannels.bind(this);
    this.updateDexes = this.updateDexes.bind(this);
    this.updatePools = this.updatePools.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }
};

// src/codegen/abstract/cosmwasm-codegen/AnsHost.message-builder.ts
var AnsHostExecuteMsgBuilder = class {
};
AnsHostExecuteMsgBuilder.updateContractAddresses = ({
  toAdd,
  toRemove
}) => {
  return {
    update_contract_addresses: {
      to_add: toAdd,
      to_remove: toRemove
    }
  };
};
AnsHostExecuteMsgBuilder.updateAssetAddresses = ({
  toAdd,
  toRemove
}) => {
  return {
    update_asset_addresses: {
      to_add: toAdd,
      to_remove: toRemove
    }
  };
};
AnsHostExecuteMsgBuilder.updateChannels = ({
  toAdd,
  toRemove
}) => {
  return {
    update_channels: {
      to_add: toAdd,
      to_remove: toRemove
    }
  };
};
AnsHostExecuteMsgBuilder.updateDexes = ({
  toAdd,
  toRemove
}) => {
  return {
    update_dexes: {
      to_add: toAdd,
      to_remove: toRemove
    }
  };
};
AnsHostExecuteMsgBuilder.updatePools = ({
  toAdd,
  toRemove
}) => {
  return {
    update_pools: {
      to_add: toAdd,
      to_remove: toRemove
    }
  };
};
AnsHostExecuteMsgBuilder.updateOwnership = (action) => {
  return {
    update_ownership: action
  };
};
var AnsHostQueryMsgBuilder = class {
};
AnsHostQueryMsgBuilder.config = () => {
  return {
    config: {}
  };
};
AnsHostQueryMsgBuilder.assets = ({
  names
}) => {
  return {
    assets: {
      names
    }
  };
};
AnsHostQueryMsgBuilder.assetList = ({
  filter,
  limit,
  startAfter
}) => {
  return {
    asset_list: {
      filter,
      limit,
      start_after: startAfter
    }
  };
};
AnsHostQueryMsgBuilder.assetInfos = ({
  infos
}) => {
  return {
    asset_infos: {
      infos
    }
  };
};
AnsHostQueryMsgBuilder.assetInfoList = ({
  filter,
  limit,
  startAfter
}) => {
  return {
    asset_info_list: {
      filter,
      limit,
      start_after: startAfter
    }
  };
};
AnsHostQueryMsgBuilder.contracts = ({
  entries
}) => {
  return {
    contracts: {
      entries
    }
  };
};
AnsHostQueryMsgBuilder.contractList = ({
  filter,
  limit,
  startAfter
}) => {
  return {
    contract_list: {
      filter,
      limit,
      start_after: startAfter
    }
  };
};
AnsHostQueryMsgBuilder.channels = ({
  entries
}) => {
  return {
    channels: {
      entries
    }
  };
};
AnsHostQueryMsgBuilder.channelList = ({
  filter,
  limit,
  startAfter
}) => {
  return {
    channel_list: {
      filter,
      limit,
      start_after: startAfter
    }
  };
};
AnsHostQueryMsgBuilder.registeredDexes = () => {
  return {
    registered_dexes: {}
  };
};
AnsHostQueryMsgBuilder.pools = ({
  pairings
}) => {
  return {
    pools: {
      pairings
    }
  };
};
AnsHostQueryMsgBuilder.poolList = ({
  filter,
  limit,
  startAfter
}) => {
  return {
    pool_list: {
      filter,
      limit,
      start_after: startAfter
    }
  };
};
AnsHostQueryMsgBuilder.poolMetadatas = ({
  ids
}) => {
  return {
    pool_metadatas: {
      ids
    }
  };
};
AnsHostQueryMsgBuilder.poolMetadataList = ({
  filter,
  limit,
  startAfter
}) => {
  return {
    pool_metadata_list: {
      filter,
      limit,
      start_after: startAfter
    }
  };
};
AnsHostQueryMsgBuilder.ownership = () => {
  return {
    ownership: {}
  };
};

// src/codegen/abstract/cosmwasm-codegen/AnsHost.message-composer.ts
import { MsgExecuteContract as MsgExecuteContract2 } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 as toUtf82 } from "@cosmjs/encoding";
var AnsHostMsgComposer = class {
  constructor(sender, contractAddress) {
    this.updateContractAddresses = ({
      toAdd,
      toRemove
    }, funds_) => {
      const _msg = {
        update_contract_addresses: {
          to_add: toAdd,
          to_remove: toRemove
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract2.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf82(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.updateAssetAddresses = ({
      toAdd,
      toRemove
    }, funds_) => {
      const _msg = {
        update_asset_addresses: {
          to_add: toAdd,
          to_remove: toRemove
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract2.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf82(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.updateChannels = ({
      toAdd,
      toRemove
    }, funds_) => {
      const _msg = {
        update_channels: {
          to_add: toAdd,
          to_remove: toRemove
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract2.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf82(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.updateDexes = ({
      toAdd,
      toRemove
    }, funds_) => {
      const _msg = {
        update_dexes: {
          to_add: toAdd,
          to_remove: toRemove
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract2.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf82(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.updatePools = ({
      toAdd,
      toRemove
    }, funds_) => {
      const _msg = {
        update_pools: {
          to_add: toAdd,
          to_remove: toRemove
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract2.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf82(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.updateOwnership = (action, funds_) => {
      const _msg = {
        update_ownership: {}
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract2.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf82(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateContractAddresses = this.updateContractAddresses.bind(this);
    this.updateAssetAddresses = this.updateAssetAddresses.bind(this);
    this.updateChannels = this.updateChannels.bind(this);
    this.updateDexes = this.updateDexes.bind(this);
    this.updatePools = this.updatePools.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }
};

// src/codegen/abstract/cosmwasm-codegen/AnsHost.types.ts
var AnsHost_types_exports = {};

// src/codegen/abstract/cosmwasm-codegen/Cw20Base.client.ts
var Cw20BaseQueryClient = class {
  constructor(client, contractAddress) {
    this.balance = async ({
      address
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        balance: {
          address
        }
      });
    };
    this.tokenInfo = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        token_info: {}
      });
    };
    this.minter = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        minter: {}
      });
    };
    this.allowance = async ({
      owner,
      spender
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        allowance: {
          owner,
          spender
        }
      });
    };
    this.allAllowances = async ({
      limit,
      owner,
      startAfter
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        all_allowances: {
          limit,
          owner,
          start_after: startAfter
        }
      });
    };
    this.allSpenderAllowances = async ({
      limit,
      spender,
      startAfter
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        all_spender_allowances: {
          limit,
          spender,
          start_after: startAfter
        }
      });
    };
    this.allAccounts = async ({
      limit,
      startAfter
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        all_accounts: {
          limit,
          start_after: startAfter
        }
      });
    };
    this.marketingInfo = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        marketing_info: {}
      });
    };
    this.downloadLogo = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        download_logo: {}
      });
    };
    this.client = client;
    this.contractAddress = contractAddress;
    this.balance = this.balance.bind(this);
    this.tokenInfo = this.tokenInfo.bind(this);
    this.minter = this.minter.bind(this);
    this.allowance = this.allowance.bind(this);
    this.allAllowances = this.allAllowances.bind(this);
    this.allSpenderAllowances = this.allSpenderAllowances.bind(this);
    this.allAccounts = this.allAccounts.bind(this);
    this.marketingInfo = this.marketingInfo.bind(this);
    this.downloadLogo = this.downloadLogo.bind(this);
  }
};
var Cw20BaseClient = class extends Cw20BaseQueryClient {
  constructor(client, sender, contractAddress) {
    super(client, contractAddress);
    this.transfer = async ({
      amount,
      recipient
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        transfer: {
          amount,
          recipient
        }
      }, fee_, memo_, funds_);
    };
    this.burn = async ({
      amount
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        burn: {
          amount
        }
      }, fee_, memo_, funds_);
    };
    this.send = async ({
      amount,
      contract,
      msg
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        send: {
          amount,
          contract,
          msg
        }
      }, fee_, memo_, funds_);
    };
    this.increaseAllowance = async ({
      amount,
      expires,
      spender
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        increase_allowance: {
          amount,
          expires,
          spender
        }
      }, fee_, memo_, funds_);
    };
    this.decreaseAllowance = async ({
      amount,
      expires,
      spender
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        decrease_allowance: {
          amount,
          expires,
          spender
        }
      }, fee_, memo_, funds_);
    };
    this.transferFrom = async ({
      amount,
      owner,
      recipient
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        transfer_from: {
          amount,
          owner,
          recipient
        }
      }, fee_, memo_, funds_);
    };
    this.sendFrom = async ({
      amount,
      contract,
      msg,
      owner
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        send_from: {
          amount,
          contract,
          msg,
          owner
        }
      }, fee_, memo_, funds_);
    };
    this.burnFrom = async ({
      amount,
      owner
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        burn_from: {
          amount,
          owner
        }
      }, fee_, memo_, funds_);
    };
    this.mint = async ({
      amount,
      recipient
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        mint: {
          amount,
          recipient
        }
      }, fee_, memo_, funds_);
    };
    this.updateMinter = async ({
      newMinter
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        update_minter: {
          new_minter: newMinter
        }
      }, fee_, memo_, funds_);
    };
    this.updateMarketing = async ({
      description,
      marketing,
      project
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        update_marketing: {
          description,
          marketing,
          project
        }
      }, fee_, memo_, funds_);
    };
    this.uploadLogo = async (logo, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        upload_logo: logo
      }, fee_, memo_, funds_);
    };
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.transfer = this.transfer.bind(this);
    this.burn = this.burn.bind(this);
    this.send = this.send.bind(this);
    this.increaseAllowance = this.increaseAllowance.bind(this);
    this.decreaseAllowance = this.decreaseAllowance.bind(this);
    this.transferFrom = this.transferFrom.bind(this);
    this.sendFrom = this.sendFrom.bind(this);
    this.burnFrom = this.burnFrom.bind(this);
    this.mint = this.mint.bind(this);
    this.updateMinter = this.updateMinter.bind(this);
    this.updateMarketing = this.updateMarketing.bind(this);
    this.uploadLogo = this.uploadLogo.bind(this);
  }
};

// src/codegen/abstract/cosmwasm-codegen/Cw20Base.message-builder.ts
var Cw20BaseExecuteMsgBuilder = class {
};
Cw20BaseExecuteMsgBuilder.transfer = ({
  amount,
  recipient
}) => {
  return {
    transfer: {
      amount,
      recipient
    }
  };
};
Cw20BaseExecuteMsgBuilder.burn = ({
  amount
}) => {
  return {
    burn: {
      amount
    }
  };
};
Cw20BaseExecuteMsgBuilder.send = ({
  amount,
  contract,
  msg
}) => {
  return {
    send: {
      amount,
      contract,
      msg
    }
  };
};
Cw20BaseExecuteMsgBuilder.increaseAllowance = ({
  amount,
  expires,
  spender
}) => {
  return {
    increase_allowance: {
      amount,
      expires,
      spender
    }
  };
};
Cw20BaseExecuteMsgBuilder.decreaseAllowance = ({
  amount,
  expires,
  spender
}) => {
  return {
    decrease_allowance: {
      amount,
      expires,
      spender
    }
  };
};
Cw20BaseExecuteMsgBuilder.transferFrom = ({
  amount,
  owner,
  recipient
}) => {
  return {
    transfer_from: {
      amount,
      owner,
      recipient
    }
  };
};
Cw20BaseExecuteMsgBuilder.sendFrom = ({
  amount,
  contract,
  msg,
  owner
}) => {
  return {
    send_from: {
      amount,
      contract,
      msg,
      owner
    }
  };
};
Cw20BaseExecuteMsgBuilder.burnFrom = ({
  amount,
  owner
}) => {
  return {
    burn_from: {
      amount,
      owner
    }
  };
};
Cw20BaseExecuteMsgBuilder.mint = ({
  amount,
  recipient
}) => {
  return {
    mint: {
      amount,
      recipient
    }
  };
};
Cw20BaseExecuteMsgBuilder.updateMinter = ({
  newMinter
}) => {
  return {
    update_minter: {
      new_minter: newMinter
    }
  };
};
Cw20BaseExecuteMsgBuilder.updateMarketing = ({
  description,
  marketing,
  project
}) => {
  return {
    update_marketing: {
      description,
      marketing,
      project
    }
  };
};
Cw20BaseExecuteMsgBuilder.uploadLogo = (logo) => {
  return {
    upload_logo: logo
  };
};
var Cw20BaseQueryMsgBuilder = class {
};
Cw20BaseQueryMsgBuilder.balance = ({
  address
}) => {
  return {
    balance: {
      address
    }
  };
};
Cw20BaseQueryMsgBuilder.tokenInfo = () => {
  return {
    token_info: {}
  };
};
Cw20BaseQueryMsgBuilder.minter = () => {
  return {
    minter: {}
  };
};
Cw20BaseQueryMsgBuilder.allowance = ({
  owner,
  spender
}) => {
  return {
    allowance: {
      owner,
      spender
    }
  };
};
Cw20BaseQueryMsgBuilder.allAllowances = ({
  limit,
  owner,
  startAfter
}) => {
  return {
    all_allowances: {
      limit,
      owner,
      start_after: startAfter
    }
  };
};
Cw20BaseQueryMsgBuilder.allSpenderAllowances = ({
  limit,
  spender,
  startAfter
}) => {
  return {
    all_spender_allowances: {
      limit,
      spender,
      start_after: startAfter
    }
  };
};
Cw20BaseQueryMsgBuilder.allAccounts = ({
  limit,
  startAfter
}) => {
  return {
    all_accounts: {
      limit,
      start_after: startAfter
    }
  };
};
Cw20BaseQueryMsgBuilder.marketingInfo = () => {
  return {
    marketing_info: {}
  };
};
Cw20BaseQueryMsgBuilder.downloadLogo = () => {
  return {
    download_logo: {}
  };
};

// src/codegen/abstract/cosmwasm-codegen/Cw20Base.message-composer.ts
import { MsgExecuteContract as MsgExecuteContract3 } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 as toUtf83 } from "@cosmjs/encoding";
var Cw20BaseMsgComposer = class {
  constructor(sender, contractAddress) {
    this.transfer = ({
      amount,
      recipient
    }, funds_) => {
      const _msg = {
        transfer: {
          amount,
          recipient
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract3.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf83(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.burn = ({
      amount
    }, funds_) => {
      const _msg = {
        burn: {
          amount
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract3.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf83(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.send = ({
      amount,
      contract,
      msg
    }, funds_) => {
      const _msg = {
        send: {
          amount,
          contract,
          msg
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract3.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf83(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.increaseAllowance = ({
      amount,
      expires,
      spender
    }, funds_) => {
      const _msg = {
        increase_allowance: {
          amount,
          expires,
          spender
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract3.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf83(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.decreaseAllowance = ({
      amount,
      expires,
      spender
    }, funds_) => {
      const _msg = {
        decrease_allowance: {
          amount,
          expires,
          spender
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract3.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf83(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.transferFrom = ({
      amount,
      owner,
      recipient
    }, funds_) => {
      const _msg = {
        transfer_from: {
          amount,
          owner,
          recipient
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract3.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf83(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.sendFrom = ({
      amount,
      contract,
      msg,
      owner
    }, funds_) => {
      const _msg = {
        send_from: {
          amount,
          contract,
          msg,
          owner
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract3.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf83(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.burnFrom = ({
      amount,
      owner
    }, funds_) => {
      const _msg = {
        burn_from: {
          amount,
          owner
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract3.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf83(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.mint = ({
      amount,
      recipient
    }, funds_) => {
      const _msg = {
        mint: {
          amount,
          recipient
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract3.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf83(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.updateMinter = ({
      newMinter
    }, funds_) => {
      const _msg = {
        update_minter: {
          new_minter: newMinter
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract3.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf83(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.updateMarketing = ({
      description,
      marketing,
      project
    }, funds_) => {
      const _msg = {
        update_marketing: {
          description,
          marketing,
          project
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract3.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf83(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.uploadLogo = (logo, funds_) => {
      const _msg = {
        upload_logo: {}
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract3.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf83(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.transfer = this.transfer.bind(this);
    this.burn = this.burn.bind(this);
    this.send = this.send.bind(this);
    this.increaseAllowance = this.increaseAllowance.bind(this);
    this.decreaseAllowance = this.decreaseAllowance.bind(this);
    this.transferFrom = this.transferFrom.bind(this);
    this.sendFrom = this.sendFrom.bind(this);
    this.burnFrom = this.burnFrom.bind(this);
    this.mint = this.mint.bind(this);
    this.updateMinter = this.updateMinter.bind(this);
    this.updateMarketing = this.updateMarketing.bind(this);
    this.uploadLogo = this.uploadLogo.bind(this);
  }
};

// src/codegen/abstract/cosmwasm-codegen/Cw20Base.types.ts
var Cw20Base_types_exports = {};

// src/codegen/abstract/cosmwasm-codegen/IbcClient.client.ts
var IbcClientQueryClient = class {
  constructor(client, contractAddress) {
    this.ownership = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        ownership: {}
      });
    };
    this.config = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        config: {}
      });
    };
    this.host = async ({
      chainName
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        host: {
          chain_name: chainName
        }
      });
    };
    this.listAccounts = async ({
      limit,
      start
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        list_accounts: {
          limit,
          start
        }
      });
    };
    this.account = async ({
      accountId,
      chainName
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        account: {
          account_id: accountId,
          chain_name: chainName
        }
      });
    };
    this.listRemoteHosts = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        list_remote_hosts: {}
      });
    };
    this.listRemoteProxies = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        list_remote_proxies: {}
      });
    };
    this.listRemoteAccountsByAccountId = async ({
      accountId
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        list_remote_accounts_by_account_id: {
          account_id: accountId
        }
      });
    };
    this.listIbcInfrastructures = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        list_ibc_infrastructures: {}
      });
    };
    this.client = client;
    this.contractAddress = contractAddress;
    this.ownership = this.ownership.bind(this);
    this.config = this.config.bind(this);
    this.host = this.host.bind(this);
    this.listAccounts = this.listAccounts.bind(this);
    this.account = this.account.bind(this);
    this.listRemoteHosts = this.listRemoteHosts.bind(this);
    this.listRemoteProxies = this.listRemoteProxies.bind(this);
    this.listRemoteAccountsByAccountId = this.listRemoteAccountsByAccountId.bind(this);
    this.listIbcInfrastructures = this.listIbcInfrastructures.bind(this);
  }
};
var IbcClientClient = class extends IbcClientQueryClient {
  constructor(client, sender, contractAddress) {
    super(client, contractAddress);
    this.updateOwnership = async (action, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        update_ownership: action
      }, fee_, memo_, funds_);
    };
    this.registerInfrastructure = async ({
      chain,
      host,
      note
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        register_infrastructure: {
          chain,
          host,
          note
        }
      }, fee_, memo_, funds_);
    };
    this.sendFunds = async ({
      hostChain,
      memo,
      receiver
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        send_funds: {
          host_chain: hostChain,
          memo,
          receiver
        }
      }, fee_, memo_, funds_);
    };
    this.sendFundsWithActions = async ({
      actions,
      hostChain
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        send_funds_with_actions: {
          actions,
          host_chain: hostChain
        }
      }, fee_, memo_, funds_);
    };
    this.register = async ({
      hostChain,
      installModules,
      namespace
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        register: {
          host_chain: hostChain,
          install_modules: installModules,
          namespace
        }
      }, fee_, memo_, funds_);
    };
    this.moduleIbcAction = async ({
      callback,
      hostChain,
      msg,
      targetModule
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        module_ibc_action: {
          callback,
          host_chain: hostChain,
          msg,
          target_module: targetModule
        }
      }, fee_, memo_, funds_);
    };
    this.ibcQuery = async ({
      callback,
      hostChain,
      queries
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        ibc_query: {
          callback,
          host_chain: hostChain,
          queries
        }
      }, fee_, memo_, funds_);
    };
    this.remoteAction = async ({
      action,
      hostChain
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        remote_action: {
          action,
          host_chain: hostChain
        }
      }, fee_, memo_, funds_);
    };
    this.removeHost = async ({
      hostChain
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        remove_host: {
          host_chain: hostChain
        }
      }, fee_, memo_, funds_);
    };
    this.callback = async ({
      initiator,
      initiatorMsg,
      result
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        callback: {
          initiator,
          initiator_msg: initiatorMsg,
          result
        }
      }, fee_, memo_, funds_);
    };
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateOwnership = this.updateOwnership.bind(this);
    this.registerInfrastructure = this.registerInfrastructure.bind(this);
    this.sendFunds = this.sendFunds.bind(this);
    this.sendFundsWithActions = this.sendFundsWithActions.bind(this);
    this.register = this.register.bind(this);
    this.moduleIbcAction = this.moduleIbcAction.bind(this);
    this.ibcQuery = this.ibcQuery.bind(this);
    this.remoteAction = this.remoteAction.bind(this);
    this.removeHost = this.removeHost.bind(this);
    this.callback = this.callback.bind(this);
  }
};

// src/codegen/abstract/cosmwasm-codegen/IbcClient.message-builder.ts
var IbcClientExecuteMsgBuilder = class {
};
IbcClientExecuteMsgBuilder.updateOwnership = (action) => {
  return {
    update_ownership: action
  };
};
IbcClientExecuteMsgBuilder.registerInfrastructure = ({
  chain,
  host,
  note
}) => {
  return {
    register_infrastructure: {
      chain,
      host,
      note
    }
  };
};
IbcClientExecuteMsgBuilder.sendFunds = ({
  hostChain,
  memo,
  receiver
}) => {
  return {
    send_funds: {
      host_chain: hostChain,
      memo,
      receiver
    }
  };
};
IbcClientExecuteMsgBuilder.sendFundsWithActions = ({
  actions,
  hostChain
}) => {
  return {
    send_funds_with_actions: {
      actions,
      host_chain: hostChain
    }
  };
};
IbcClientExecuteMsgBuilder.register = ({
  hostChain,
  installModules,
  namespace
}) => {
  return {
    register: {
      host_chain: hostChain,
      install_modules: installModules,
      namespace
    }
  };
};
IbcClientExecuteMsgBuilder.moduleIbcAction = ({
  callback,
  hostChain,
  msg,
  targetModule
}) => {
  return {
    module_ibc_action: {
      callback,
      host_chain: hostChain,
      msg,
      target_module: targetModule
    }
  };
};
IbcClientExecuteMsgBuilder.ibcQuery = ({
  callback,
  hostChain,
  queries
}) => {
  return {
    ibc_query: {
      callback,
      host_chain: hostChain,
      queries
    }
  };
};
IbcClientExecuteMsgBuilder.remoteAction = ({
  action,
  hostChain
}) => {
  return {
    remote_action: {
      action,
      host_chain: hostChain
    }
  };
};
IbcClientExecuteMsgBuilder.removeHost = ({
  hostChain
}) => {
  return {
    remove_host: {
      host_chain: hostChain
    }
  };
};
IbcClientExecuteMsgBuilder.callback = ({
  initiator,
  initiatorMsg,
  result
}) => {
  return {
    callback: {
      initiator,
      initiator_msg: initiatorMsg,
      result
    }
  };
};
var IbcClientQueryMsgBuilder = class {
};
IbcClientQueryMsgBuilder.ownership = () => {
  return {
    ownership: {}
  };
};
IbcClientQueryMsgBuilder.config = () => {
  return {
    config: {}
  };
};
IbcClientQueryMsgBuilder.host = ({
  chainName
}) => {
  return {
    host: {
      chain_name: chainName
    }
  };
};
IbcClientQueryMsgBuilder.listAccounts = ({
  limit,
  start
}) => {
  return {
    list_accounts: {
      limit,
      start
    }
  };
};
IbcClientQueryMsgBuilder.account = ({
  accountId,
  chainName
}) => {
  return {
    account: {
      account_id: accountId,
      chain_name: chainName
    }
  };
};
IbcClientQueryMsgBuilder.listRemoteHosts = () => {
  return {
    list_remote_hosts: {}
  };
};
IbcClientQueryMsgBuilder.listRemoteProxies = () => {
  return {
    list_remote_proxies: {}
  };
};
IbcClientQueryMsgBuilder.listRemoteAccountsByAccountId = ({
  accountId
}) => {
  return {
    list_remote_accounts_by_account_id: {
      account_id: accountId
    }
  };
};
IbcClientQueryMsgBuilder.listIbcInfrastructures = () => {
  return {
    list_ibc_infrastructures: {}
  };
};

// src/codegen/abstract/cosmwasm-codegen/IbcClient.message-composer.ts
import { MsgExecuteContract as MsgExecuteContract4 } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 as toUtf84 } from "@cosmjs/encoding";
var IbcClientMsgComposer = class {
  constructor(sender, contractAddress) {
    this.updateOwnership = (action, funds_) => {
      const _msg = {
        update_ownership: {}
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract4.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf84(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.registerInfrastructure = ({
      chain,
      host,
      note
    }, funds_) => {
      const _msg = {
        register_infrastructure: {
          chain,
          host,
          note
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract4.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf84(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.sendFunds = ({
      hostChain,
      memo,
      receiver
    }, funds_) => {
      const _msg = {
        send_funds: {
          host_chain: hostChain,
          memo,
          receiver
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract4.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf84(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.sendFundsWithActions = ({
      actions,
      hostChain
    }, funds_) => {
      const _msg = {
        send_funds_with_actions: {
          actions,
          host_chain: hostChain
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract4.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf84(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.register = ({
      hostChain,
      installModules,
      namespace
    }, funds_) => {
      const _msg = {
        register: {
          host_chain: hostChain,
          install_modules: installModules,
          namespace
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract4.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf84(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.moduleIbcAction = ({
      callback,
      hostChain,
      msg,
      targetModule
    }, funds_) => {
      const _msg = {
        module_ibc_action: {
          callback,
          host_chain: hostChain,
          msg,
          target_module: targetModule
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract4.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf84(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.ibcQuery = ({
      callback,
      hostChain,
      queries
    }, funds_) => {
      const _msg = {
        ibc_query: {
          callback,
          host_chain: hostChain,
          queries
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract4.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf84(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.remoteAction = ({
      action,
      hostChain
    }, funds_) => {
      const _msg = {
        remote_action: {
          action,
          host_chain: hostChain
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract4.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf84(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.removeHost = ({
      hostChain
    }, funds_) => {
      const _msg = {
        remove_host: {
          host_chain: hostChain
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract4.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf84(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.callback = ({
      initiator,
      initiatorMsg,
      result
    }, funds_) => {
      const _msg = {
        callback: {
          initiator,
          initiator_msg: initiatorMsg,
          result
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract4.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf84(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateOwnership = this.updateOwnership.bind(this);
    this.registerInfrastructure = this.registerInfrastructure.bind(this);
    this.sendFunds = this.sendFunds.bind(this);
    this.sendFundsWithActions = this.sendFundsWithActions.bind(this);
    this.register = this.register.bind(this);
    this.moduleIbcAction = this.moduleIbcAction.bind(this);
    this.ibcQuery = this.ibcQuery.bind(this);
    this.remoteAction = this.remoteAction.bind(this);
    this.removeHost = this.removeHost.bind(this);
    this.callback = this.callback.bind(this);
  }
};

// src/codegen/abstract/cosmwasm-codegen/IbcClient.types.ts
var IbcClient_types_exports = {};

// src/codegen/abstract/cosmwasm-codegen/IcaClient.client.ts
var IcaClientQueryClient = class {
  constructor(client, contractAddress) {
    this.config = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        config: {}
      });
    };
    this.icaAction = async ({
      accountAddress,
      actions,
      chain
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        ica_action: {
          account_address: accountAddress,
          actions,
          chain
        }
      });
    };
    this.ownership = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        ownership: {}
      });
    };
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.icaAction = this.icaAction.bind(this);
    this.ownership = this.ownership.bind(this);
  }
};
var IcaClientClient = class extends IcaClientQueryClient {
  constructor(client, sender, contractAddress) {
    super(client, contractAddress);
    this.updateOwnership = async (action, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        update_ownership: action
      }, fee_, memo_, funds_);
    };
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateOwnership = this.updateOwnership.bind(this);
  }
};

// src/codegen/abstract/cosmwasm-codegen/IcaClient.message-builder.ts
var IcaClientExecuteMsgBuilder = class {
};
IcaClientExecuteMsgBuilder.updateOwnership = (action) => {
  return {
    update_ownership: action
  };
};
var IcaClientQueryMsgBuilder = class {
};
IcaClientQueryMsgBuilder.config = () => {
  return {
    config: {}
  };
};
IcaClientQueryMsgBuilder.icaAction = ({
  accountAddress,
  actions,
  chain
}) => {
  return {
    ica_action: {
      account_address: accountAddress,
      actions,
      chain
    }
  };
};
IcaClientQueryMsgBuilder.ownership = () => {
  return {
    ownership: {}
  };
};

// src/codegen/abstract/cosmwasm-codegen/IcaClient.message-composer.ts
import { MsgExecuteContract as MsgExecuteContract5 } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 as toUtf85 } from "@cosmjs/encoding";
var IcaClientMsgComposer = class {
  constructor(sender, contractAddress) {
    this.updateOwnership = (action, funds_) => {
      const _msg = {
        update_ownership: {}
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract5.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf85(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateOwnership = this.updateOwnership.bind(this);
  }
};

// src/codegen/abstract/cosmwasm-codegen/IcaClient.types.ts
var IcaClient_types_exports = {};

// src/codegen/abstract/cosmwasm-codegen/Registry.client.ts
var RegistryQueryClient = class {
  constructor(client, contractAddress) {
    this.accounts = async ({
      accountIds
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        accounts: {
          account_ids: accountIds
        }
      });
    };
    this.modules = async ({
      infos
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        modules: {
          infos
        }
      });
    };
    this.namespaces = async ({
      accounts
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        namespaces: {
          accounts
        }
      });
    };
    this.namespace = async ({
      namespace
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        namespace: {
          namespace
        }
      });
    };
    this.config = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        config: {}
      });
    };
    this.accountList = async ({
      limit,
      startAfter
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        account_list: {
          limit,
          start_after: startAfter
        }
      });
    };
    this.moduleList = async ({
      filter,
      limit,
      startAfter
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        module_list: {
          filter,
          limit,
          start_after: startAfter
        }
      });
    };
    this.namespaceList = async ({
      limit,
      startAfter
    }) => {
      return this.client.queryContractSmart(this.contractAddress, {
        namespace_list: {
          limit,
          start_after: startAfter
        }
      });
    };
    this.ownership = async () => {
      return this.client.queryContractSmart(this.contractAddress, {
        ownership: {}
      });
    };
    this.client = client;
    this.contractAddress = contractAddress;
    this.accounts = this.accounts.bind(this);
    this.modules = this.modules.bind(this);
    this.namespaces = this.namespaces.bind(this);
    this.namespace = this.namespace.bind(this);
    this.config = this.config.bind(this);
    this.accountList = this.accountList.bind(this);
    this.moduleList = this.moduleList.bind(this);
    this.namespaceList = this.namespaceList.bind(this);
    this.ownership = this.ownership.bind(this);
  }
};
var RegistryClient = class extends RegistryQueryClient {
  constructor(client, sender, contractAddress) {
    super(client, contractAddress);
    this.removeModule = async ({
      module
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        remove_module: {
          module
        }
      }, fee_, memo_, funds_);
    };
    this.yankModule = async ({
      module
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        yank_module: {
          module
        }
      }, fee_, memo_, funds_);
    };
    this.proposeModules = async ({
      modules
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        propose_modules: {
          modules
        }
      }, fee_, memo_, funds_);
    };
    this.updateModuleConfiguration = async ({
      moduleName,
      namespace,
      updateModule
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        update_module_configuration: {
          module_name: moduleName,
          namespace,
          update_module: updateModule
        }
      }, fee_, memo_, funds_);
    };
    this.approveOrRejectModules = async ({
      approves,
      rejects
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        approve_or_reject_modules: {
          approves,
          rejects
        }
      }, fee_, memo_, funds_);
    };
    this.claimNamespace = async ({
      accountId,
      namespace
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        claim_namespace: {
          account_id: accountId,
          namespace
        }
      }, fee_, memo_, funds_);
    };
    this.forgoNamespace = async ({
      namespaces
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        forgo_namespace: {
          namespaces
        }
      }, fee_, memo_, funds_);
    };
    this.addAccount = async ({
      creator,
      namespace
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        add_account: {
          creator,
          namespace
        }
      }, fee_, memo_, funds_);
    };
    this.updateConfig = async ({
      namespaceRegistrationFee,
      securityEnabled
    }, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        update_config: {
          namespace_registration_fee: namespaceRegistrationFee,
          security_enabled: securityEnabled
        }
      }, fee_, memo_, funds_);
    };
    this.updateOwnership = async (action, fee_ = "auto", memo_, funds_) => {
      return await this.client.execute(this.sender, this.contractAddress, {
        update_ownership: action
      }, fee_, memo_, funds_);
    };
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.removeModule = this.removeModule.bind(this);
    this.yankModule = this.yankModule.bind(this);
    this.proposeModules = this.proposeModules.bind(this);
    this.updateModuleConfiguration = this.updateModuleConfiguration.bind(this);
    this.approveOrRejectModules = this.approveOrRejectModules.bind(this);
    this.claimNamespace = this.claimNamespace.bind(this);
    this.forgoNamespace = this.forgoNamespace.bind(this);
    this.addAccount = this.addAccount.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }
};

// src/codegen/abstract/cosmwasm-codegen/Registry.message-builder.ts
var RegistryExecuteMsgBuilder = class {
};
RegistryExecuteMsgBuilder.removeModule = ({
  module
}) => {
  return {
    remove_module: {
      module
    }
  };
};
RegistryExecuteMsgBuilder.yankModule = ({
  module
}) => {
  return {
    yank_module: {
      module
    }
  };
};
RegistryExecuteMsgBuilder.proposeModules = ({
  modules
}) => {
  return {
    propose_modules: {
      modules
    }
  };
};
RegistryExecuteMsgBuilder.updateModuleConfiguration = ({
  moduleName,
  namespace,
  updateModule
}) => {
  return {
    update_module_configuration: {
      module_name: moduleName,
      namespace,
      update_module: updateModule
    }
  };
};
RegistryExecuteMsgBuilder.approveOrRejectModules = ({
  approves,
  rejects
}) => {
  return {
    approve_or_reject_modules: {
      approves,
      rejects
    }
  };
};
RegistryExecuteMsgBuilder.claimNamespace = ({
  accountId,
  namespace
}) => {
  return {
    claim_namespace: {
      account_id: accountId,
      namespace
    }
  };
};
RegistryExecuteMsgBuilder.forgoNamespace = ({
  namespaces
}) => {
  return {
    forgo_namespace: {
      namespaces
    }
  };
};
RegistryExecuteMsgBuilder.addAccount = ({
  creator,
  namespace
}) => {
  return {
    add_account: {
      creator,
      namespace
    }
  };
};
RegistryExecuteMsgBuilder.updateConfig = ({
  namespaceRegistrationFee,
  securityEnabled
}) => {
  return {
    update_config: {
      namespace_registration_fee: namespaceRegistrationFee,
      security_enabled: securityEnabled
    }
  };
};
RegistryExecuteMsgBuilder.updateOwnership = (action) => {
  return {
    update_ownership: action
  };
};
var RegistryQueryMsgBuilder = class {
};
RegistryQueryMsgBuilder.accounts = ({
  accountIds
}) => {
  return {
    accounts: {
      account_ids: accountIds
    }
  };
};
RegistryQueryMsgBuilder.modules = ({
  infos
}) => {
  return {
    modules: {
      infos
    }
  };
};
RegistryQueryMsgBuilder.namespaces = ({
  accounts
}) => {
  return {
    namespaces: {
      accounts
    }
  };
};
RegistryQueryMsgBuilder.namespace = ({
  namespace
}) => {
  return {
    namespace: {
      namespace
    }
  };
};
RegistryQueryMsgBuilder.config = () => {
  return {
    config: {}
  };
};
RegistryQueryMsgBuilder.accountList = ({
  limit,
  startAfter
}) => {
  return {
    account_list: {
      limit,
      start_after: startAfter
    }
  };
};
RegistryQueryMsgBuilder.moduleList = ({
  filter,
  limit,
  startAfter
}) => {
  return {
    module_list: {
      filter,
      limit,
      start_after: startAfter
    }
  };
};
RegistryQueryMsgBuilder.namespaceList = ({
  limit,
  startAfter
}) => {
  return {
    namespace_list: {
      limit,
      start_after: startAfter
    }
  };
};
RegistryQueryMsgBuilder.ownership = () => {
  return {
    ownership: {}
  };
};

// src/codegen/abstract/cosmwasm-codegen/Registry.message-composer.ts
import { MsgExecuteContract as MsgExecuteContract6 } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 as toUtf86 } from "@cosmjs/encoding";
var RegistryMsgComposer = class {
  constructor(sender, contractAddress) {
    this.removeModule = ({
      module
    }, funds_) => {
      const _msg = {
        remove_module: {
          module
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract6.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf86(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.yankModule = ({
      module
    }, funds_) => {
      const _msg = {
        yank_module: {
          module
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract6.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf86(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.proposeModules = ({
      modules
    }, funds_) => {
      const _msg = {
        propose_modules: {
          modules
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract6.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf86(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.updateModuleConfiguration = ({
      moduleName,
      namespace,
      updateModule
    }, funds_) => {
      const _msg = {
        update_module_configuration: {
          module_name: moduleName,
          namespace,
          update_module: updateModule
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract6.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf86(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.approveOrRejectModules = ({
      approves,
      rejects
    }, funds_) => {
      const _msg = {
        approve_or_reject_modules: {
          approves,
          rejects
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract6.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf86(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.claimNamespace = ({
      accountId,
      namespace
    }, funds_) => {
      const _msg = {
        claim_namespace: {
          account_id: accountId,
          namespace
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract6.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf86(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.forgoNamespace = ({
      namespaces
    }, funds_) => {
      const _msg = {
        forgo_namespace: {
          namespaces
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract6.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf86(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.addAccount = ({
      creator,
      namespace
    }, funds_) => {
      const _msg = {
        add_account: {
          creator,
          namespace
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract6.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf86(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.updateConfig = ({
      namespaceRegistrationFee,
      securityEnabled
    }, funds_) => {
      const _msg = {
        update_config: {
          namespace_registration_fee: namespaceRegistrationFee,
          security_enabled: securityEnabled
        }
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract6.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf86(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.updateOwnership = (action, funds_) => {
      const _msg = {
        update_ownership: {}
      };
      return {
        typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
        value: MsgExecuteContract6.fromPartial({
          sender: this.sender,
          contract: this.contractAddress,
          msg: toUtf86(JSON.stringify(_msg)),
          funds: funds_
        })
      };
    };
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.removeModule = this.removeModule.bind(this);
    this.yankModule = this.yankModule.bind(this);
    this.proposeModules = this.proposeModules.bind(this);
    this.updateModuleConfiguration = this.updateModuleConfiguration.bind(this);
    this.approveOrRejectModules = this.approveOrRejectModules.bind(this);
    this.claimNamespace = this.claimNamespace.bind(this);
    this.forgoNamespace = this.forgoNamespace.bind(this);
    this.addAccount = this.addAccount.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }
};

// src/codegen/abstract/cosmwasm-codegen/Registry.types.ts
var Registry_types_exports = {};

export {
  AccountQueryClient,
  AccountClient,
  AccountExecuteMsgBuilder,
  AccountQueryMsgBuilder,
  AccountMsgComposer,
  Account_types_exports,
  AnsHostQueryClient,
  AnsHostClient,
  AnsHostExecuteMsgBuilder,
  AnsHostQueryMsgBuilder,
  AnsHostMsgComposer,
  AnsHost_types_exports,
  Cw20BaseQueryClient,
  Cw20BaseClient,
  Cw20BaseExecuteMsgBuilder,
  Cw20BaseQueryMsgBuilder,
  Cw20BaseMsgComposer,
  Cw20Base_types_exports,
  IbcClientQueryClient,
  IbcClientClient,
  IbcClientExecuteMsgBuilder,
  IbcClientQueryMsgBuilder,
  IbcClientMsgComposer,
  IbcClient_types_exports,
  IcaClientQueryClient,
  IcaClientClient,
  IcaClientExecuteMsgBuilder,
  IcaClientQueryMsgBuilder,
  IcaClientMsgComposer,
  IcaClient_types_exports,
  RegistryQueryClient,
  RegistryClient,
  RegistryExecuteMsgBuilder,
  RegistryQueryMsgBuilder,
  RegistryMsgComposer,
  Registry_types_exports
};

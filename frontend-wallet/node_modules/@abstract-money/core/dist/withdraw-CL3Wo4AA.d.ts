import * as _cosmjs_cosmwasm_stargate from '@cosmjs/cosmwasm-stargate';
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { j as AccountId, z as ModuleVersion, P as AccountModuleInfo, V as InstantiateMsg, C as CosmosMsgForEmpty } from './Registry.types-tb_Smu0e.js';
import { t as AccountQueryClient, I as IbcClientQueryClient, z as AnsHostClient, S as RegistryClient, v as AccountClient } from './Registry.client-DeRpB8OW.js';
import { b as ModuleId, c as MergedModuleInstallConfig, A as Asset } from './types-CdpDSdJ3.js';
import { A as AccountId$1, W as WithOptional, l as MaybeArray } from './types-DL_NvWZJ.js';
import { CamelCasedProperties, OverrideProperties } from 'type-fest';
import { W as WithCosmWasmSignOptions } from './get-registry-query-client-from-api-kZlB8Zat.js';
import * as _cosmjs_stargate from '@cosmjs/stargate';

type GetAccountAddressFromApiParameters = {
    accountId: AccountId;
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
};
declare function getAccountAddressFromApi({ accountId, cosmWasmClient, apiUrl, }: GetAccountAddressFromApiParameters): Promise<string>;

type GetAccountQueryClientFromApiParameters = {
    accountId: AccountId;
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
};
declare function getAccountQueryClientFromApi({ accountId, cosmWasmClient, apiUrl, }: GetAccountQueryClientFromApiParameters): Promise<AccountQueryClient>;

type GetModuleAddressParameters = {
    accountId: AccountId;
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
    id: string;
};
declare function getModuleAddress({ accountId, cosmWasmClient, apiUrl, id, }: GetModuleAddressParameters): Promise<string | null>;

type GetModuleInstantiate2AddressFromApi = {
    accountId: AccountId;
    moduleId: ModuleId;
    version?: ModuleVersion;
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
};
declare function getModuleInstantiate2AddressFromApi({ accountId, cosmWasmClient, apiUrl, moduleId, version, }: GetModuleInstantiate2AddressFromApi): Promise<string>;

type GetModulesParameters = {
    accountId: AccountId;
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
} & Parameters<typeof AccountQueryClient.prototype.moduleInfos>[0];
declare function getModules({ accountId, cosmWasmClient, apiUrl, ...params }: GetModulesParameters): Promise<AccountModuleInfo[]>;

type GetNamespaceParameters = {
    accountId: AccountId;
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
};
declare function getNamespace({ accountId, cosmWasmClient, apiUrl, }: GetNamespaceParameters): Promise<string | null>;

type GetOwnerParameters = {
    accountId: AccountId;
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
};
declare function getOwner({ accountId, cosmWasmClient, apiUrl, }: GetOwnerParameters): Promise<{
    monarchy: {
        monarch: string;
    };
} | {
    sub_account: {
        account: string;
    };
} | {
    external: {
        governance_address: string;
        governance_type: string;
    };
} | {
    n_f_t: {
        collection_addr: string;
        token_id: string;
    };
} | {
    abstract_account: {
        address: string;
    };
} | {
    renounced: {};
}>;

type GetRemoteAccountsParameters = {
    accountId: AccountId;
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
} & Omit<Parameters<typeof IbcClientQueryClient.prototype.listRemoteAccountsByAccountId>[0], 'accountId'>;
type ChainName = string;
type MaybeAccountAddress = string | null;
/**
 * Get the remote accounts for the given account.
 * @param accountId
 * @param cosmWasmClient
 * @param apiUrl
 */
declare function getRemoteAccounts({ accountId, cosmWasmClient, apiUrl, }: GetRemoteAccountsParameters): Promise<Record<ChainName, MaybeAccountAddress>>;

type GetRemoteAccountIdsParameters = GetRemoteAccountsParameters;
/**
 * Get the Account's remote Account ids.
 * @param accountId
 * @param cosmWasmClient
 * @param apiUrl
 */
declare function getRemoteAccountIds({ accountId, cosmWasmClient, apiUrl, }: GetRemoteAccountIdsParameters): Promise<AccountId$1[]>;

type GetSubAccountIdsParameters = {
    accountId: AccountId;
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
} & Parameters<typeof AccountQueryClient.prototype.subAccountIds>[0];
declare function getSubAccountIds({ accountId, cosmWasmClient, apiUrl, ...params }: GetSubAccountIdsParameters): Promise<AccountId$1[]>;

type GetSubAccountSequencesParameters = {
    accountId: AccountId;
    cosmWasmClient: CosmWasmClient;
    apiUrl: string;
} & Parameters<typeof AccountQueryClient.prototype.subAccountIds>[0];
declare function getSubAccountSequences({ accountId, cosmWasmClient, apiUrl, ...params }: GetSubAccountSequencesParameters): Promise<number[]>;

type GetAnsHostClientFromApiParameters = {
    signingCosmWasmClient: SigningCosmWasmClient;
    apiUrl: string;
    sender: string;
};
declare function getAnsHostClientFromApi({ signingCosmWasmClient, apiUrl, sender, }: GetAnsHostClientFromApiParameters): Promise<AnsHostClient>;

type GetAnsHostClientFromRegistryParameters = {
    signingCosmWasmClient: SigningCosmWasmClient;
    sender: string;
    registryAddress: string;
    version?: string;
};
declare function getAnsHostClientFromRegistry({ signingCosmWasmClient, sender, registryAddress, version, }: GetAnsHostClientFromRegistryParameters): Promise<AnsHostClient>;

type GetRegistryClientFromApiParameters = {
    signingCosmWasmClient: SigningCosmWasmClient;
    apiUrl: string;
    sender: string;
};
declare function getRegistryClientFromApi({ signingCosmWasmClient, apiUrl, sender, }: GetRegistryClientFromApiParameters): Promise<RegistryClient>;

type CreateAccountArguments = {
    enableIbc?: boolean;
} & CamelCasedProperties<WithOptional<OverrideProperties<InstantiateMsg, {
    account_id?: AccountId;
    install_modules?: MergedModuleInstallConfig[];
}>, 'owner' | 'code_id'>>;
type CreateAccountParameters = WithCosmWasmSignOptions<{
    signingCosmWasmClient: SigningCosmWasmClient;
    apiUrl: string;
    sender: string;
} & CreateAccountArguments>;
declare function createAccount({ signingCosmWasmClient, apiUrl, sender, installModules, description, name, namespace, authenticator, link, codeId, accountId, enableIbc, owner, fee, memo, funds, }: CreateAccountParameters): Promise<{
    accountId: AccountId$1;
    accountAddress: string;
}>;

type CreateAccountMonarchyParameters = OverrideProperties<CreateAccountParameters, {
    owner: string;
}>;
/**
 *
 * @param signingCosmWasmClient
 * @param apiUrl
 * @param sender
 * @param installModules
 * @param description
 * @param name
 * @param namespace
 * @param link
 * @param owner
 * @param accountId
 * @param enableIbc only compatible with versions 0.23+
 * @param fee
 * @param memo
 * @param funds
 */
declare function createAccountMonarchy({ signingCosmWasmClient, apiUrl, sender, installModules, description, name, namespace, link, owner, accountId, enableIbc, fee, memo, funds, }: CreateAccountMonarchyParameters): Promise<{
    accountId: AccountId$1;
    accountAddress: string;
}>;

type GetAccountClientParameters = {
    signingCosmWasmClient: SigningCosmWasmClient;
    sender: string;
    accountAddress: string;
};
declare function getAccountClient({ signingCosmWasmClient, sender, accountAddress, }: GetAccountClientParameters): Promise<AccountClient>;

type GetAnsHostClientParameters = {
    signingCosmWasmClient: SigningCosmWasmClient;
    sender: string;
    ansHostAddress: string;
};
declare function getAnsHostClient({ signingCosmWasmClient, sender, ansHostAddress, }: GetAnsHostClientParameters): AnsHostClient;

type GetRegistryClientParameters = {
    signingCosmWasmClient: SigningCosmWasmClient;
    sender: string;
    registryAddress: string;
};
declare function getRegistryClient({ signingCosmWasmClient, sender, registryAddress, }: GetRegistryClientParameters): RegistryClient;

type GetSenderAddressParameters = {
    sender: string;
};
declare function getSenderAddress({ sender }: GetSenderAddressParameters): string;

type GetSigningCosmWasmClientParameters = {
    signingCosmWasmClient: SigningCosmWasmClient;
};
declare function getSigningCosmWasmClient({ signingCosmWasmClient, }: GetSigningCosmWasmClientParameters): SigningCosmWasmClient;

type ClaimNamespaceParameters = WithCosmWasmSignOptions<{
    signingCosmWasmClient: SigningCosmWasmClient;
    apiUrl: string;
    sender: string;
    namespace: string;
} & Parameters<typeof RegistryClient.prototype.claimNamespace>[0]>;
declare function claimNamespace({ signingCosmWasmClient, apiUrl, namespace, sender, accountId, fee, funds, memo, }: ClaimNamespaceParameters): Promise<ExecuteResult>;

type BaseAccountWalletParameters = {
    accountId: AccountId;
    signingCosmWasmClient: SigningCosmWasmClient;
    apiUrl: string;
    sender: string;
};

type CreateSubAccountParameters = WithCosmWasmSignOptions<BaseAccountWalletParameters & Omit<Parameters<typeof AccountClient.prototype.createSubAccount>[0], 'accountId'> & {
    subAccountId?: number;
}>;
declare function createSubAccount({ accountId, subAccountId, signingCosmWasmClient, apiUrl, sender, fee, memo, funds, ...rest }: CreateSubAccountParameters): Promise<_cosmjs_cosmwasm_stargate.ExecuteResult>;

type DepositParameters = Omit<WithCosmWasmSignOptions<BaseAccountWalletParameters & {
    assets: Asset[];
}>, 'funds'>;
declare function deposit({ accountId, signingCosmWasmClient, apiUrl, sender, assets, fee, memo, }: DepositParameters): Promise<_cosmjs_stargate.DeliverTxResponse>;

type ExecuteParameters = WithCosmWasmSignOptions<BaseAccountWalletParameters & {
    msgs: MaybeArray<CosmosMsgForEmpty>;
}>;
/**
 * Execute a message directly as the Account. Must be called by the owner. Encodes the message and sends it to the chain.
 * @param accountId
 * @param signingCosmWasmClient
 * @param apiUrl
 * @param sender
 * @param msgs
 * @param fee
 * @param memo
 * @param funds - funds FROM the wallet
 */
declare function execute({ accountId, signingCosmWasmClient, apiUrl, sender, msgs, fee, memo, funds, }: ExecuteParameters): Promise<_cosmjs_stargate.DeliverTxResponse>;

type GetAccountClientFromApiParameters = BaseAccountWalletParameters;
declare function getAccountClientFromApi({ accountId, signingCosmWasmClient, apiUrl, sender, }: GetAccountClientFromApiParameters): Promise<AccountClient>;

type RevokeNamespaceParameters = WithCosmWasmSignOptions<BaseAccountWalletParameters>;
declare function revokeNamespace({ accountId, signingCosmWasmClient, apiUrl, sender, fee, memo, funds, }: RevokeNamespaceParameters): Promise<_cosmjs_cosmwasm_stargate.ExecuteResult>;

type UpgradeModulesParameters = WithCosmWasmSignOptions<BaseAccountWalletParameters & Omit<Parameters<typeof AccountClient.prototype.upgrade>[0], 'accountId'> & {
    subAccountId?: number;
}>;
declare function upgradeModules({ accountId, subAccountId, signingCosmWasmClient, apiUrl, sender, fee, memo, funds, ...rest }: UpgradeModulesParameters): Promise<_cosmjs_cosmwasm_stargate.ExecuteResult>;

type SendFundsParameters = WithCosmWasmSignOptions<BaseAccountWalletParameters & {
    assets: Asset[];
    recipient: string;
}>;
/**
 * @deprecated use `SendFundsParameters` instead
 */
type WithdrawParameters = SendFundsParameters;
/**
 * Send funds or withdraw funds from the account.
 * @param fee
 * @param memo
 * @param accountId
 * @param signingCosmWasmClient
 * @param apiUrl
 * @param sender
 * @param assets
 * @param recipient
 * @param funds - funds included from the WALLET.
 */
declare function sendFunds({ fee, memo, accountId, signingCosmWasmClient, apiUrl, sender, assets, recipient, funds, }: SendFundsParameters): Promise<_cosmjs_stargate.DeliverTxResponse>;
/**
 * @deprecated use `sendFunds` instead
 */
declare const withdraw: typeof sendFunds;

export { type GetSenderAddressParameters as $, type GetAccountClientFromApiParameters as A, getAccountClientFromApi as B, type ClaimNamespaceParameters as C, type DepositParameters as D, type ExecuteParameters as E, revokeNamespace as F, type GetAccountAddressFromApiParameters as G, upgradeModules as H, sendFunds as I, withdraw as J, type CreateAccountMonarchyParameters as K, createAccountMonarchy as L, type CreateAccountArguments as M, type CreateAccountParameters as N, createAccount as O, type GetAnsHostClientFromApiParameters as P, getAnsHostClientFromApi as Q, type RevokeNamespaceParameters as R, type SendFundsParameters as S, type GetAnsHostClientFromRegistryParameters as T, type UpgradeModulesParameters as U, getAnsHostClientFromRegistry as V, type WithdrawParameters as W, type GetAnsHostClientParameters as X, getAnsHostClient as Y, type GetAccountClientParameters as Z, getAccountClient as _, type GetAccountQueryClientFromApiParameters as a, getSenderAddress as a0, type GetSigningCosmWasmClientParameters as a1, getSigningCosmWasmClient as a2, type GetRegistryClientFromApiParameters as a3, getRegistryClientFromApi as a4, type GetRegistryClientParameters as a5, getRegistryClient as a6, type BaseAccountWalletParameters as a7, getAccountQueryClientFromApi as b, type GetModuleAddressParameters as c, getModuleAddress as d, type GetModuleInstantiate2AddressFromApi as e, getModuleInstantiate2AddressFromApi as f, getAccountAddressFromApi as g, type GetModulesParameters as h, getModules as i, type GetNamespaceParameters as j, getNamespace as k, type GetOwnerParameters as l, getOwner as m, type GetRemoteAccountIdsParameters as n, getRemoteAccountIds as o, type GetRemoteAccountsParameters as p, getRemoteAccounts as q, type GetSubAccountIdsParameters as r, getSubAccountIds as s, type GetSubAccountSequencesParameters as t, getSubAccountSequences as u, claimNamespace as v, type CreateSubAccountParameters as w, createSubAccount as x, deposit as y, execute as z };

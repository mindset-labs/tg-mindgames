import { CosmWasmClient, HttpEndpoint } from '@cosmjs/cosmwasm-stargate';
import { HttpBatchClientOptions, Tendermint34Client } from '@cosmjs/tendermint-rpc';

declare const DEFAULT_BATCH_SIZE_LIMIT = 25;
declare const DEFAULT_DISPATCH_INTERVAL = 300;
declare const DEFAULT_BATCH_COSMWASM_CLIENT_OPTIONS: BatchCosmWasmClientOptions;
type BatchCosmWasmClientOptions = HttpBatchClientOptions;
/**
 * BatchCosmWasmClient is an extension of CosmWasmClient that allows batch processing of rpc requests.
 */
declare class BatchCosmWasmClient extends CosmWasmClient {
    private readonly _batchSizeLimit;
    private readonly _dispatchInterval;
    constructor(tmClient: Tendermint34Client | undefined, options?: BatchCosmWasmClientOptions);
    /**
     * Connect to a endpoint with a new BatchCosmWasmClient.
     * @param {string} endpoint - The endpoint to connect to.
     * @param {BatchCosmWasmClientOptions} options - The options for the HTTP Batch Client.
     * @return {BatchCosmWasmClient} The new BatchCosmWasmClient.
     */
    static connect(endpoint: string | HttpEndpoint, options?: BatchCosmWasmClientOptions): Promise<CosmWasmClient>;
    /**
     * Get the batch size limit.
     * @return {number} The batch size limit.
     */
    get batchSizeLimit(): number;
    /**
     * Get the dispatch interval.
     * @return {number} The dispatch interval.
     */
    get dispatchInterval(): number;
}

interface MultiqueryOptions extends BatchCosmWasmClientOptions {
    multiqueryContract: string;
}
/**
 * Result type for tryAggregate queries, where data can be either the successful response
 * or an error message (when include_cause is true and the query failed)
 */
type TryAggregateResult<T = Record<string, unknown>> = {
    success: true;
    data: T;
    error: undefined;
} | {
    success: false;
    data: undefined;
    error: string;
};
declare const DEFAULT_MULTIQUERY_COSMWASM_CLIENT_OPTIONS: BatchCosmWasmClientOptions;
/**
 * BatchCosmWasmClient with multiquery support by default. Note that the contract MUST be deployed on the target network and this client does not handle check for the deployment.
 * @see https://github.com/AbstractSDK/multiquery
 */
declare class MultiqueryCosmWasmClient extends CosmWasmClient {
    private readonly multiqueryContractAddress;
    private readonly _batchSizeLimit;
    private readonly _dispatchInterval;
    private queryQueue;
    private queryTimer?;
    constructor(tmClient: Tendermint34Client | undefined, options: MultiqueryOptions);
    static connect(endpoint: string | HttpEndpoint, options?: MultiqueryOptions): Promise<MultiqueryCosmWasmClient>;
    /**
     * Get the batch size limit.
     * @return {number} The batch size limit.
     */
    get batchSizeLimit(): number;
    /**
     * Get the dispatch interval.
     * @return {number} The dispatch interval.
     */
    get dispatchInterval(): number;
    queryContractSmart(address: string, queryMsg: Record<string, unknown>): Promise<Record<string, unknown>>;
    queryContractsBatch(queries: Array<{
        address: string;
        queryMsg: Record<string, unknown>;
    }>): Promise<Record<string, unknown>[]>;
    /**
     * Aggregate queries with error suppression
     * @param queries Array of contract queries to execute
     * @param requireSuccess If true, throws error when any query fails
     * @returns Array of results where data is either the successful response or error message
     */
    tryAggregate(queries: Array<{
        address: string;
        queryMsg: Record<string, unknown>;
    }>, requireSuccess?: boolean): Promise<TryAggregateResult[]>;
    /**
     * Process the accumulated query queue using tryAggregate
     */
    private processQueryQueue;
    disconnect(): void;
}

export { BatchCosmWasmClient, type BatchCosmWasmClientOptions, DEFAULT_BATCH_COSMWASM_CLIENT_OPTIONS, DEFAULT_BATCH_SIZE_LIMIT, DEFAULT_DISPATCH_INTERVAL, DEFAULT_MULTIQUERY_COSMWASM_CLIENT_OPTIONS, MultiqueryCosmWasmClient, type MultiqueryOptions, type TryAggregateResult };

'use strict';

var react = require('react');
var ui = require('@burnt-labs/ui');
var constants = require('@burnt-labs/constants');
var stargate = require('@cosmjs/stargate');
var jsxRuntime = require('react/jsx-runtime');
var abstraxionCore = require('@burnt-labs/abstraxion-core');
var cosmwasmStargate = require('@cosmjs/cosmwasm-stargate');

// src/components/Abstraxion/index.tsx
var AbstraxionContext = react.createContext(
  {}
);
function AbstraxionContextProvider({
  children,
  contracts,
  rpcUrl = constants.testnetChainInfo.rpc,
  restUrl = constants.testnetChainInfo.rest,
  stake = false,
  bank,
  callbackUrl,
  treasury,
  gasPrice
}) {
  const [abstraxionError, setAbstraxionError] = react.useState("");
  const [isConnected, setIsConnected] = react.useState(false);
  const [isConnecting, setIsConnecting] = react.useState(false);
  const [showModal, setShowModal] = react.useState(false);
  const [abstraxionAccount, setAbstraxionAccount] = react.useState(void 0);
  const [granterAddress, setGranterAddress] = react.useState("");
  const [dashboardUrl, setDashboardUrl] = react.useState("");
  let gasPriceDefault;
  const { gasPrice: gasPriceConstant } = constants.xionGasValues;
  if (rpcUrl.includes("mainnet")) {
    gasPriceDefault = stargate.GasPrice.fromString(gasPriceConstant);
  } else {
    gasPriceDefault = stargate.GasPrice.fromString("0.001uxion");
  }
  const configureInstance = react.useCallback(() => {
    abstraxionAuth.configureAbstraxionInstance(
      rpcUrl,
      restUrl || "",
      contracts,
      stake,
      bank,
      callbackUrl,
      treasury
    );
  }, [rpcUrl, restUrl, contracts, stake, bank, callbackUrl, treasury]);
  react.useEffect(() => {
    configureInstance();
  }, [configureInstance]);
  react.useEffect(() => {
    const searchParams = new URLSearchParams(window.location.search);
    if (searchParams.get("granted") === "true") {
      setShowModal(true);
    }
  }, []);
  react.useEffect(() => {
    const unsubscribe = abstraxionAuth.subscribeToAuthStateChange(
      async (newState) => {
        if (newState !== isConnected) {
          setIsConnected(newState);
          if (newState) {
            const account = await abstraxionAuth.getLocalKeypair();
            const granterAddress2 = abstraxionAuth.getGranter();
            setAbstraxionAccount(account);
            setGranterAddress(granterAddress2);
          }
        }
      }
    );
    return () => {
      unsubscribe?.();
    };
  }, [isConnected, abstraxionAuth]);
  const persistAuthenticateState = react.useCallback(async () => {
    await abstraxionAuth.authenticate();
  }, [abstraxionAuth]);
  react.useEffect(() => {
    if (!isConnecting && !abstraxionAccount && !granterAddress) {
      persistAuthenticateState();
    }
  }, [
    isConnecting,
    abstraxionAccount,
    granterAddress,
    persistAuthenticateState
  ]);
  const logout = react.useCallback(() => {
    setIsConnected(false);
    setAbstraxionAccount(void 0);
    setGranterAddress("");
    abstraxionAuth?.logout();
  }, [abstraxionAuth]);
  return /* @__PURE__ */ jsxRuntime.jsx(
    AbstraxionContext.Provider,
    {
      value: {
        isConnected,
        setIsConnected,
        isConnecting,
        setIsConnecting,
        abstraxionError,
        setAbstraxionError,
        abstraxionAccount,
        setAbstraxionAccount,
        granterAddress,
        showModal,
        setShowModal,
        setGranterAddress,
        contracts,
        dashboardUrl,
        setDashboardUrl,
        rpcUrl,
        restUrl,
        stake,
        bank,
        treasury,
        logout,
        gasPrice: gasPrice ? stargate.GasPrice.fromString(gasPrice) : gasPriceDefault
      },
      children
    }
  );
}
function ErrorDisplay() {
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: "ui-flex ui-h-full ui-w-full ui-flex-col ui-items-start ui-justify-center ui-gap-4 ui-p-8 ui-text-center", children: [
    /* @__PURE__ */ jsxRuntime.jsx("h1", { className: "ui-text-3xl ui-font-bold ui-uppercase ui-tracking-tighter ui-text-white", children: "Oops! Something went wrong..." }),
    /* @__PURE__ */ jsxRuntime.jsx("h2", { className: "ui-tracking-tight ui-text-neutral-500", children: "Please try refreshing the page. If the problem continues, check your internet connection or try again later." }),
    /* @__PURE__ */ jsxRuntime.jsx(
      ui.Button,
      {
        structure: "naked",
        fullWidth: true,
        onClick: () => {
          const currentUrl = new URL(window.location.href);
          currentUrl.searchParams.delete("granted");
          currentUrl.searchParams.delete("granter");
          history.pushState({}, "", currentUrl.href);
          window.location.reload();
        },
        children: "Refresh the page"
      }
    )
  ] });
}
var Loading = () => {
  return /* @__PURE__ */ jsxRuntime.jsxs(ui.ModalSection, { children: [
    /* @__PURE__ */ jsxRuntime.jsxs("div", { className: "ui-flex ui-flex-col ui-w-full ui-text-center", children: [
      /* @__PURE__ */ jsxRuntime.jsx("h1", { className: "ui-w-full ui-tracking-tighter ui-text-3xl ui-font-bold ui-text-white ui-uppercase ui-mb-3", children: "Connecting..." }),
      /* @__PURE__ */ jsxRuntime.jsx("h2", { className: "ui-w-full ui-tracking-tighter ui-text-sm ui-mb-4 ui-text-neutral-500", children: "Signing you in... Don\u2019t close the window." })
    ] }),
    /* @__PURE__ */ jsxRuntime.jsx("div", { className: "ui-flex ui-h-full ui-w-full ui-items-center ui-justify-center ui-text-white", children: /* @__PURE__ */ jsxRuntime.jsx(ui.Spinner, {}) })
  ] });
};
function AbstraxionSignin() {
  const { isConnecting, setShowModal, setIsConnecting, setAbstraxionError } = react.useContext(AbstraxionContext);
  const isMounted = react.useRef(false);
  const retryRedirect = async () => {
    abstraxionAuth.redirectToDashboard();
  };
  react.useEffect(() => {
    async function onStartup() {
      try {
        if (!abstraxionAuth) {
          throw new Error("abstraxion-core not initialized");
        }
        setIsConnecting(true);
        await abstraxionAuth.login();
      } catch (error) {
        console.warn("Something went wrong: ", error);
        setAbstraxionError(error.message);
      } finally {
        setIsConnecting(false);
        setShowModal(false);
      }
    }
    if (!isMounted.current) {
      onStartup();
    }
    isMounted.current = true;
  }, []);
  if (isConnecting) {
    return /* @__PURE__ */ jsxRuntime.jsx(Loading, {});
  }
  return /* @__PURE__ */ jsxRuntime.jsxs(ui.ModalSection, { className: "ui-items-center", children: [
    /* @__PURE__ */ jsxRuntime.jsxs("div", { className: "ui-flex ui-flex-col ui-w-full ui-text-center", children: [
      /* @__PURE__ */ jsxRuntime.jsx("h1", { className: "ui-w-full ui-tracking-tighter ui-text-3xl ui-font-bold ui-text-white ui-uppercase ui-mb-3", children: "Secure account creation" }),
      /* @__PURE__ */ jsxRuntime.jsx("h2", { className: "ui-w-full ui-tracking-tighter ui-text-sm ui-mb-4 ui-text-neutral-500", children: "Please switch to the newly opened tab and enter your credentials to securely complete your account creation" })
    ] }),
    /* @__PURE__ */ jsxRuntime.jsx(ui.BrowserIcon, {}),
    /* @__PURE__ */ jsxRuntime.jsx(ui.Button, { onClick: retryRedirect, structure: "naked", children: "Have a Problem? Try Again" })
  ] });
}
function Connected({ onClose }) {
  const { logout } = react.useContext(AbstraxionContext);
  function handleLogout() {
    logout();
    onClose();
  }
  return /* @__PURE__ */ jsxRuntime.jsx(ui.ModalSection, { children: /* @__PURE__ */ jsxRuntime.jsxs("div", { className: "ui-flex ui-flex-col ui-h-full ui-w-full ui-items-center ui-justify-center ui-text-white", children: [
    /* @__PURE__ */ jsxRuntime.jsx("h1", { className: "ui-tracking-tighter ui-text-3xl ui-font-bold ui-text-white ui-uppercase ui-mb-3", children: "Connected" }),
    /* @__PURE__ */ jsxRuntime.jsx("div", { className: "ui-my-4 ui-w-full", children: /* @__PURE__ */ jsxRuntime.jsx(ui.Button, { fullWidth: true, onClick: onClose, children: "Close" }) }),
    /* @__PURE__ */ jsxRuntime.jsx(ui.Button, { fullWidth: true, onClick: handleLogout, structure: "destructive", children: "Logout" })
  ] }) });
}
var abstraxionAuth = new abstraxionCore.AbstraxionAuth();
function Abstraxion({ onClose }) {
  const {
    abstraxionAccount,
    abstraxionError,
    isConnected,
    showModal,
    setShowModal
  } = react.useContext(AbstraxionContext);
  const closeOnEscKey = react.useCallback(
    (e) => {
      if (e.key === "Escape") {
        onClose();
        setShowModal(false);
      }
    },
    [onClose, setShowModal]
  );
  react.useEffect(() => {
    document.addEventListener("keydown", closeOnEscKey);
    return () => {
      document.removeEventListener("keydown", closeOnEscKey);
    };
  }, [closeOnEscKey]);
  if (!showModal)
    return null;
  return /* @__PURE__ */ jsxRuntime.jsx(ui.Dialog, { onOpenChange: onClose, open: showModal, children: /* @__PURE__ */ jsxRuntime.jsx(ui.DialogContent, { children: abstraxionError ? /* @__PURE__ */ jsxRuntime.jsx(ErrorDisplay, {}) : abstraxionAccount || isConnected ? /* @__PURE__ */ jsxRuntime.jsx(Connected, { onClose }) : !abstraxionAccount ? /* @__PURE__ */ jsxRuntime.jsx(AbstraxionSignin, {}) : null }) });
}
function AbstraxionProvider({
  children,
  config
}) {
  return /* @__PURE__ */ jsxRuntime.jsx(
    AbstraxionContextProvider,
    {
      contracts: config.contracts,
      rpcUrl: config.rpcUrl,
      restUrl: config.restUrl,
      stake: config.stake,
      bank: config.bank,
      callbackUrl: config.callbackUrl,
      treasury: config.treasury,
      gasPrice: config.gasPrice,
      children
    }
  );
}
var useAbstraxionAccount = () => {
  const { isConnected, granterAddress, isConnecting } = react.useContext(AbstraxionContext);
  return {
    data: {
      bech32Address: granterAddress
    },
    isConnected,
    isConnecting
  };
};
var useAbstraxionSigningClient = () => {
  const {
    isConnected,
    abstraxionAccount,
    granterAddress,
    rpcUrl,
    logout,
    gasPrice,
    treasury
  } = react.useContext(AbstraxionContext);
  const [signArbWallet, setSignArbWallet] = react.useState(void 0);
  const [abstractClient, setAbstractClient] = react.useState(void 0);
  react.useEffect(() => {
    async function getSigner() {
      try {
        if (!abstraxionAccount) {
          throw new Error("No account found.");
        }
        if (!granterAddress) {
          throw new Error("No granter found.");
        }
        const granteeAddress = await abstraxionAccount.getAccounts().then((accounts) => {
          if (accounts.length === 0) {
            throw new Error("No account found.");
          }
          return accounts[0].address;
        });
        const directClient = await abstraxionCore.GranteeSignerClient.connectWithSigner(
          // Should be set in the context but defaulting here just in case
          rpcUrl || constants.testnetChainInfo.rpc,
          abstraxionAccount,
          {
            gasPrice,
            granterAddress,
            granteeAddress,
            treasuryAddress: treasury
          }
        );
        const wallet = await abstraxionAuth.getLocalKeypair();
        if (wallet) {
          setSignArbWallet(wallet);
        }
        setAbstractClient(directClient);
      } catch (error) {
        setAbstractClient(void 0);
      }
    }
    getSigner();
  }, [isConnected, abstraxionAccount, granterAddress, abstraxionAuth]);
  return {
    client: abstractClient,
    signArb: signArbWallet?.signArb,
    logout
  };
};
var useAbstraxionClient = () => {
  const { rpcUrl } = react.useContext(AbstraxionContext);
  const [abstractClient, setAbstractClient] = react.useState(void 0);
  react.useEffect(() => {
    async function getClient() {
      try {
        const client = await cosmwasmStargate.CosmWasmClient.connect(
          // Should be set in the context but defaulting here just in case
          rpcUrl || constants.testnetChainInfo.rpc
        );
        setAbstractClient(client);
      } catch (error) {
        setAbstractClient(void 0);
      }
    }
    getClient();
  }, [rpcUrl]);
  return {
    client: abstractClient
  };
};
var useModal = () => {
  const { showModal, setShowModal } = react.useContext(AbstraxionContext);
  return [showModal, setShowModal];
};

exports.Abstraxion = Abstraxion;
exports.AbstraxionProvider = AbstraxionProvider;
exports.useAbstraxionAccount = useAbstraxionAccount;
exports.useAbstraxionClient = useAbstraxionClient;
exports.useAbstraxionSigningClient = useAbstraxionSigningClient;
exports.useModal = useModal;

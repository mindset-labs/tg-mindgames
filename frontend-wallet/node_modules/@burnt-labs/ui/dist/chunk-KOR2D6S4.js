'use strict';

var react = require('react');
var jsxRuntime = require('react/jsx-runtime');

// src/pinInput.tsx
var PinInput = ({
  length = 6,
  onComplete,
  error,
  setError
}) => {
  const [pin, setPin] = react.useState(Array(length).fill(""));
  const inputRefs = react.useRef(
    Array(length).fill(null)
  );
  const handleInput = (index, value) => {
    var _a;
    const newDigit = /^\d$/.test(value) ? value : "";
    const newPin = [...pin];
    newPin[index] = newDigit;
    setPin(newPin);
    if (!newPin.includes("")) {
      onComplete(newPin.join(""));
    }
    if (index < length - 1 && newDigit !== "") {
      (_a = inputRefs.current[index + 1]) == null ? void 0 : _a.focus();
    }
  };
  const handleBackspace = (index) => {
    var _a;
    const newPin = [...pin];
    if (index >= 0) {
      newPin[index] = "";
      (_a = inputRefs.current[index - 1]) == null ? void 0 : _a.focus();
    }
    setPin(newPin);
  };
  react.useEffect(() => {
    var _a;
    (_a = inputRefs.current[0]) == null ? void 0 : _a.focus();
  }, []);
  const handlePaste = (event) => {
    var _a;
    event.preventDefault();
    const pastedData = event.clipboardData.getData("text");
    const pastedDigits = pastedData.split("").filter((char) => /^\d$/.test(char)).slice(0, length);
    const newPin = [...pin];
    pastedDigits.forEach((digit, index) => {
      if (index < length) {
        newPin[index] = digit;
      }
    });
    setPin(newPin);
    onComplete(newPin.join(""));
    (_a = inputRefs.current[Math.min(length - 1, pastedDigits.length - 1)]) == null ? void 0 : _a.focus();
  };
  return /* @__PURE__ */ jsxRuntime.jsx("div", { className: "ui-flex ui-w-full ui-justify-between", children: pin.map((value, index) => /* @__PURE__ */ jsxRuntime.jsx(
    "input",
    {
      type: "text",
      value,
      maxLength: 1,
      onChange: (e) => {
        setError("");
        handleInput(index, e.target.value);
      },
      onKeyDown: (e) => {
        if (e.key === "Backspace") {
          handleBackspace(index);
        }
      },
      onPaste: handlePaste,
      className: `ui-block ui-bg-transparent ui-text-white ui-rounded-md ui-border-2 ui-text-center ui-text-sm ui-outline-none focus:ui-border-black focus:ui-ring-white disabled:ui-pointer-events-none disabled:ui-opacity-50 ui-w-[50px] ui-h-[50px] ${error ? "ui-border-red-500" : "ui-border-zinc-600"}`,
      autoFocus: index === 0,
      ref: (ref) => inputRefs.current[index] = ref
    },
    index
  )) });
};

exports.PinInput = PinInput;

export var AsyncOptLazy;
(function (AsyncOptLazy) {
    /**
     * Returns the value or promised value contained in an `AsyncOptLazy` instance of type T.
     * @param optLazy - the `AsyncOptLazy` value of type T
     * @example
     * ```ts
     * AsyncOptLazy.toMaybePromise(1)              // => 1
     * AsyncOptLazy.toMaybePromise(() => 1)        // => 1
     * AsyncOptLazy.toMaybePromise(() => () => 1)  // => () => 1
     * AsyncOptLazy.toMaybePromise(async () => 1)  // => Promise(1)
     * AsyncOptLazy.toMaybePromise(Promise.resolve(1))  // => Promise(1)
     * ```
     */
    function toMaybePromise(optLazy) {
        if (optLazy instanceof Function)
            return optLazy();
        return optLazy;
    }
    AsyncOptLazy.toMaybePromise = toMaybePromise;
    /**
     * Returns the value contained in an `AsyncOptLazy` instance of type T as a promise.
     * @param optLazy - the `AsyncOptLazy` value of type T
     * @example
     * ```ts
     * AsyncOptLazy.toPromise(1)              // => Promise(1)
     * AsyncOptLazy.toPromise(() => 1)        // => Promise(1)
     * AsyncOptLazy.toPromise(() => () => 1)  // => Promise(() => 1)
     * AsyncOptLazy.toPromise(async () => 1)  // => Promise(1)
     * AsyncOptLazy.toPromise(Promise.resolve(1))  // => Promise(1)
     * ```
     */
    async function toPromise(optLazy) {
        if (optLazy instanceof Function)
            return optLazy();
        return optLazy;
    }
    AsyncOptLazy.toPromise = toPromise;
})(AsyncOptLazy || (AsyncOptLazy = {}));
//# sourceMappingURL=async-optlazy.mjs.map
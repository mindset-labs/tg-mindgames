import { IndexRange, type TraverseState, type Update } from '@rimbu/common';
import { Stream } from '@rimbu/stream';
import type { Block, Tree } from '@rimbu/list/custom';
export declare function treeStream<T, TS extends Tree<T, TS, TB, C>, TB extends Block<T, TB, C>, C>(tree: Tree<T, TS, TB, C>, range?: IndexRange, reversed?: boolean): Stream<T>;
export declare function treeGet<T, TS extends Tree<T, TS, TB, C>, TB extends Block<T, TB, C>, C>(tree: Tree<T, TS, TB, C>, index: number): T;
export declare function treePrepend<T, TS extends Tree<T, TS, TB, C>, TB extends Block<T, TB, C>, C>(tree: Tree<T, TS, TB, C>, child: C): TS;
export declare function treeAppend<T, TS extends Tree<T, TS, TB, C>, TB extends Block<T, TB, C>, C>(tree: Tree<T, TS, TB, C>, child: C): TS;
export declare function treeUpdate<T, TS extends Tree<T, TS, TB, C>, TB extends Block<T, TB, C>, C>(tree: any, index: number, update: Update<T>): TS;
export declare function treeToArray<T, TS extends Tree<T, TS, TB, C>, TB extends Block<T, TB, C>, C>(tree: Tree<T, TS, TB, C>, range?: IndexRange, reversed?: boolean): T[];
export declare function treeForEach<T, TS extends Tree<T, TS, TB, C>, TB extends Block<T, TB, C>, C>(tree: Tree<T, TS, TB, C>, f: (value: T, index: number, halt: () => void) => void, state: TraverseState): void;

import { EmptyBase } from '@rimbu/collection-types/set-custom';
import { type ArrayNonEmpty, OptLazy, type ToJSON } from '@rimbu/common';
import { Stream, type StreamSource } from '@rimbu/stream';
import type { List } from '@rimbu/list';
import type { ListContext } from '@rimbu/list/custom';
export declare class Empty<T = any> extends EmptyBase implements List<T> {
    readonly context: ListContext;
    constructor(context: ListContext);
    streamRange(): Stream<T>;
    first<O>(otherwise?: OptLazy<O>): O;
    last<O>(otherwise?: OptLazy<O>): O;
    get<O>(index: number, otherwise?: OptLazy<O>): O;
    prepend(value: T): List.NonEmpty<T>;
    append(value: T): List.NonEmpty<T>;
    take(): this;
    drop(): this;
    slice(): this;
    sort(): this;
    splice(options: {
        insert?: StreamSource<T>;
    }): any;
    insert(index: number, values: StreamSource<T>): any;
    remove(): this;
    concat<T2>(...sources: ArrayNonEmpty<StreamSource<T2>>): any;
    repeat(): this;
    rotate(): this;
    padTo(length: number, fill: any): List<any>;
    updateAt(): this;
    filter(): this;
    collect(): any;
    map(): any;
    mapPure(): any;
    flatMap(): any;
    reversed(): this;
    toArray(): [];
    toBuilder(): List.Builder<T>;
    structure(): string;
    toString(): string;
    toJSON(): ToJSON<any[], this['context']['typeTag']>;
}
export declare function createEmptyList(context: ListContext): List<any>;

import { TraverseState, type OptLazy, type Update } from '@rimbu/common';
import type { BlockBuilder, ListContext, NonLeafBlock, NonLeafBuilder } from '@rimbu/list/custom';
export declare class NonLeafBlockBuilder<T, C extends BlockBuilder<T>> implements BlockBuilder<T, C> {
    readonly context: ListContext;
    readonly level: number;
    source?: NonLeafBlock<T, any> | undefined;
    _children?: C[] | undefined;
    length: number;
    constructor(context: ListContext, level: number, source?: NonLeafBlock<T, any> | undefined, _children?: C[] | undefined, length?: number);
    get children(): C[];
    set children(value: C[]);
    get nrChildren(): number;
    copy(children: C[], length: number): NonLeafBlockBuilder<T, C>;
    getCoordinates(index: number): [number, number];
    normalized(): NonLeafBuilder<T, C> | undefined;
    get(index: number): T;
    updateAt<O>(index: number, update: Update<T>, otherwise?: OptLazy<O>): T | O;
    prepend(child: C): void;
    append(child: C): void;
    insert(index: number, value: T): void;
    remove(index: number): T;
    dropFirst(): C;
    dropLast(): C;
    modifyFirstChild(f: (child: C) => number | undefined): number | undefined;
    modifyLastChild(f: (child: C) => number | undefined): number | undefined;
    first(): C;
    last(): C;
    splitRight(index?: number): NonLeafBlockBuilder<T, C>;
    concat(other: NonLeafBlockBuilder<T, C>, prependOther?: boolean): void;
    forEach(f: (value: T, index: number, halt: () => void) => void, state?: TraverseState): void;
    build(): NonLeafBlock<T, any>;
    buildMap<T2>(f: (value: T) => T2): NonLeafBlock<T2, any>;
}

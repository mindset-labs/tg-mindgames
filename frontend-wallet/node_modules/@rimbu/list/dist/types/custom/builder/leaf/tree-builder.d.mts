import type { OptLazy } from '@rimbu/common';
import type { LeafBlockBuilder, LeafBuilder, LeafTree, ListContext, NonLeafBuilder } from '@rimbu/list/custom';
import { TreeBuilderBase } from '../tree/tree-builder.mjs';
export declare class LeafTreeBuilder<T> extends TreeBuilderBase<T, T> implements LeafBuilder<T> {
    readonly context: ListContext;
    source?: LeafTree<T> | undefined;
    _left?: LeafBlockBuilder<T> | undefined;
    _right?: LeafBlockBuilder<T> | undefined;
    _middle?: NonLeafBuilder<T, LeafBlockBuilder<T>> | undefined;
    length: number;
    constructor(context: ListContext, source?: LeafTree<T> | undefined, _left?: LeafBlockBuilder<T> | undefined, _right?: LeafBlockBuilder<T> | undefined, _middle?: NonLeafBuilder<T, LeafBlockBuilder<T>> | undefined, length?: number);
    prepareMutate(): void;
    get level(): 0;
    get left(): LeafBlockBuilder<T>;
    set left(value: LeafBlockBuilder<T>);
    get right(): LeafBlockBuilder<T>;
    set right(value: LeafBlockBuilder<T>);
    get middle(): NonLeafBuilder<T, LeafBlockBuilder<T>> | undefined;
    set middle(value: NonLeafBuilder<T, LeafBlockBuilder<T>> | undefined);
    getChildLength(): 1;
    appendChildren(children: T[], from: number): void;
    normalized(): LeafBuilder<T>;
    get<O>(index: number, otherwise?: OptLazy<O>): T | O;
    build(): LeafTree<T>;
    buildMap<T2>(f: (value: T) => T2): LeafTree<T2>;
}

import type { OptLazy } from '@rimbu/common';
import type { BlockBuilder, BuilderBase, ListContext, NonLeafBlockBuilder, NonLeafBuilder, NonLeafTree } from '@rimbu/list/custom';
import { TreeBuilderBase } from '../tree/tree-builder.mjs';
export declare class NonLeafTreeBuilder<T, C extends BlockBuilder<T>> extends TreeBuilderBase<T, C> implements BuilderBase<T, C> {
    readonly context: ListContext;
    readonly level: number;
    source?: NonLeafTree<T, any> | undefined;
    _left?: NonLeafBlockBuilder<T, C> | undefined;
    _right?: NonLeafBlockBuilder<T, C> | undefined;
    _middle?: NonLeafBuilder<T, NonLeafBlockBuilder<T, C>> | undefined;
    length: number;
    constructor(context: ListContext, level: number, source?: NonLeafTree<T, any> | undefined, _left?: NonLeafBlockBuilder<T, C> | undefined, _right?: NonLeafBlockBuilder<T, C> | undefined, _middle?: NonLeafBuilder<T, NonLeafBlockBuilder<T, C>> | undefined, length?: number);
    prepareMutate(): void;
    get left(): NonLeafBlockBuilder<T, C>;
    set left(value: NonLeafBlockBuilder<T, C>);
    get right(): NonLeafBlockBuilder<T, C>;
    set right(value: NonLeafBlockBuilder<T, C>);
    get middle(): NonLeafBuilder<T, NonLeafBlockBuilder<T, C>> | undefined;
    set middle(value: NonLeafBuilder<T, NonLeafBlockBuilder<T, C>> | undefined);
    getChildLength(child: C): number;
    modifyFirstChild(f: (child: C) => number | undefined): number | undefined;
    modifyLastChild(f: (child: C) => number | undefined): number | undefined;
    normalized(): NonLeafBuilder<T, C>;
    first(): C;
    last(): C;
    get<O>(index: number, otherwise?: OptLazy<O>): T | O;
    build(): NonLeafTree<T, any>;
    buildMap<T2>(f: (value: T) => T2): NonLeafTree<T2, any>;
}

import { TraverseState, Update, type OptLazy } from '@rimbu/common';
import type { BlockBuilder, LeafBlock, LeafBuilder, ListContext } from '@rimbu/list/custom';
export declare class LeafBlockBuilder<T> implements LeafBuilder<T>, BlockBuilder<T> {
    readonly context: ListContext;
    source?: LeafBlock<T> | undefined;
    _children?: T[] | undefined;
    constructor(context: ListContext, source?: LeafBlock<T> | undefined, _children?: T[] | undefined);
    get level(): number;
    get children(): T[];
    set children(value: T[]);
    get length(): number;
    get nrChildren(): number;
    copy(children: T[]): LeafBlockBuilder<T>;
    normalized(): LeafBuilder<T> | undefined;
    get<O>(index: number, otherwise?: OptLazy<O>): T | O;
    updateAt(index: number, update: Update<T>): T;
    prepend(value: T): void;
    append(value: T): void;
    insert(index: number, value: T): void;
    remove(index: number): T;
    dropFirst(): T;
    dropLast(): T;
    build(): LeafBlock<T>;
    buildMap<T2>(f: (value: T) => T2): LeafBlock<T2>;
    splitRight(index?: number): LeafBlockBuilder<T>;
    concat(other: LeafBlockBuilder<T>, prependOther?: boolean): void;
    forEach(f: (value: T, index: number, halt: () => void) => void, state?: TraverseState): void;
}

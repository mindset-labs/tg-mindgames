import { TraverseState, type OptLazy, type Update } from '@rimbu/common';
import type { BlockBuilder, ListContext, NonLeafBuilder } from '@rimbu/list/custom';
export declare abstract class TreeBuilderBase<T, C> {
    abstract get context(): ListContext;
    abstract get level(): number;
    abstract get left(): BlockBuilder<T, C>;
    abstract set left(value: BlockBuilder<T, C>);
    abstract get right(): BlockBuilder<T, C>;
    abstract set right(value: BlockBuilder<T, C>);
    abstract get middle(): NonLeafBuilder<T, BlockBuilder<T, C>> | undefined;
    abstract set middle(value: NonLeafBuilder<T, BlockBuilder<T, C>> | undefined);
    abstract get length(): number;
    abstract set length(value: number);
    abstract getChildLength(child: C): number;
    get<O>(index: number, otherwise?: OptLazy<O>): T | O;
    updateAt<O>(index: number, update: Update<T>, otherwise?: OptLazy<O>): T | O;
    prepend(child: C): void;
    append(child: C): void;
    remove(index: number): T;
    insert(index: number, value: T): void;
    prependMiddle(child: BlockBuilder<T, C>): void;
    appendMiddle(child: BlockBuilder<T, C>): void;
    dropFirst(): C;
    dropLast(): C;
    forEach(f: (value: T, index: number, halt: () => void) => void, state?: TraverseState): void;
}

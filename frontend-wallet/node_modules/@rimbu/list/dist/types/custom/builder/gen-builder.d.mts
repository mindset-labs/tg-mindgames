import { OptLazy, TraverseState, type Update } from '@rimbu/common';
import { type StreamSource } from '@rimbu/stream';
import type { LeafBuilder, ListContext } from '@rimbu/list/custom';
import type { List } from '@rimbu/list';
export declare class GenBuilder<T> implements List.Builder<T> {
    readonly context: ListContext;
    builder?: LeafBuilder<T> | undefined;
    constructor(context: ListContext, builder?: LeafBuilder<T> | undefined);
    _lock: number;
    checkLock(): void;
    get length(): number;
    get isEmpty(): boolean;
    get: <O>(index: number, otherwise?: OptLazy<O> | undefined) => T | O;
    updateAt: <O>(index: number, update: Update<T>, otherwise?: OptLazy<O> | undefined) => T | O;
    set: <O>(index: number, value: T, otherwise?: OptLazy<O> | undefined) => T | O;
    prepend: (value: T) => void;
    append: (value: T) => void;
    appendAll: (values: StreamSource<T>) => void;
    appendFullOrLastWindow(window: T[]): void;
    appendArray(array: T[]): void;
    insert: (index: number, value: T) => void;
    remove: <O>(index: number, otherwise?: OptLazy<O> | undefined) => T | O;
    forEach: (f: (value: T, index: number, halt: () => void) => void, state?: TraverseState) => void;
    build: () => List<T>;
    buildMap: <T2>(f: (value: T) => T2) => List<T2>;
}

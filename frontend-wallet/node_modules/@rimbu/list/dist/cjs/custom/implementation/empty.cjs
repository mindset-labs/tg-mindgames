"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/custom/implementation/empty.mts
var empty_exports = {};
__export(empty_exports, {
  Empty: () => Empty,
  createEmptyList: () => createEmptyList
});
module.exports = __toCommonJS(empty_exports);
var import_set_custom = require("@rimbu/collection-types/set-custom");
var import_common = require("@rimbu/common");
var import_stream = require("@rimbu/stream");
var Empty = class extends import_set_custom.EmptyBase {
  constructor(context) {
    super();
    this.context = context;
  }
  streamRange() {
    return import_stream.Stream.empty();
  }
  first(otherwise) {
    return (0, import_common.OptLazy)(otherwise);
  }
  last(otherwise) {
    return (0, import_common.OptLazy)(otherwise);
  }
  get(index, otherwise) {
    return (0, import_common.OptLazy)(otherwise);
  }
  prepend(value) {
    return this.context.leafBlock([value]);
  }
  append(value) {
    return this.context.leafBlock([value]);
  }
  take() {
    return this;
  }
  drop() {
    return this;
  }
  slice() {
    return this;
  }
  sort() {
    return this;
  }
  splice(options) {
    if (void 0 === options.insert)
      return this;
    return this.context.from(options.insert);
  }
  insert(index, values) {
    return this.splice({ insert: values });
  }
  remove() {
    return this;
  }
  concat(...sources) {
    return this.context.from(...sources);
  }
  repeat() {
    return this;
  }
  rotate() {
    return this;
  }
  padTo(length, fill) {
    if (length <= 0)
      return this;
    return this.append(fill).repeat(length);
  }
  updateAt() {
    return this;
  }
  filter() {
    return this;
  }
  collect() {
    return this;
  }
  map() {
    return this;
  }
  mapPure() {
    return this;
  }
  flatMap() {
    return this;
  }
  reversed() {
    return this;
  }
  toArray() {
    return [];
  }
  toBuilder() {
    return this.context.builder();
  }
  structure() {
    return "<empty>";
  }
  toString() {
    return `List()`;
  }
  toJSON() {
    return {
      dataType: this.context.typeTag,
      value: []
    };
  }
};
function createEmptyList(context) {
  return Object.freeze(new Empty(context));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Empty,
  createEmptyList
});

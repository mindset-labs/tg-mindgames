import { Arr } from '@rimbu/base';
import { TraverseState, Update } from '@rimbu/common';
export class LeafBlockBuilder {
    constructor(context, source, _children) {
        this.context = context;
        this.source = source;
        this._children = _children;
    }
    get level() {
        return 0;
    }
    get children() {
        if (undefined === this._children) {
            if (undefined !== this.source) {
                if (this.context.isReversedLeafBlock(this.source)) {
                    this._children = Arr.reverse(this.source.children);
                }
                else {
                    this._children = this.source.children.slice();
                }
            }
        }
        return this._children;
    }
    set children(value) {
        this.source = undefined;
        this._children = value;
    }
    get length() {
        return this.source?.length ?? this.children.length;
    }
    get nrChildren() {
        return this.length;
    }
    copy(children) {
        return this.context.leafBlockBuilder(children);
    }
    normalized() {
        if (this.nrChildren <= 0) {
            // block is empty
            return undefined;
        }
        if (this.nrChildren <= this.context.maxBlockSize) {
            // block is normal
            return this;
        }
        // need to split block and create tree
        const newLength = this.length;
        const newRight = this.splitRight();
        return this.context.leafTreeBuilder(this, newRight, undefined, newLength);
    }
    get(index, otherwise) {
        if (undefined !== this.source) {
            return this.source.get(index, otherwise);
        }
        return this.children[index];
    }
    updateAt(index, update) {
        const oldValue = this.children[index];
        const newValue = Update(oldValue, update);
        if (!Object.is(oldValue, newValue)) {
            // value changed
            this.children[index] = newValue;
            this.source = undefined;
        }
        return oldValue;
    }
    prepend(value) {
        this.children.unshift(value);
        this.source = undefined;
    }
    append(value) {
        this.children.push(value);
        this.source = undefined;
    }
    insert(index, value) {
        this.children.splice(index, 0, value);
        this.source = undefined;
    }
    remove(index) {
        const [removed] = this.children.splice(index, 1);
        this.source = undefined;
        return removed;
    }
    dropFirst() {
        const value = this.children.shift();
        this.source = undefined;
        return value;
    }
    dropLast() {
        const value = this.children.pop();
        this.source = undefined;
        return value;
    }
    build() {
        return this.source ?? this.context.leafBlock(this.children.slice());
    }
    buildMap(f) {
        return this.source?.map(f) ?? this.context.leafBlock(this.children.map(f));
    }
    splitRight(index = this.nrChildren >>> 1) {
        const rightChildren = this.children.splice(index);
        this.source = undefined;
        return this.copy(rightChildren);
    }
    concat(other, prependOther = false) {
        this.children = prependOther
            ? other.children.concat(this.children)
            : this.children.concat(other.children);
    }
    forEach(f, state = TraverseState()) {
        Arr.forEach(this.children, f, state);
    }
}
//# sourceMappingURL=block-builder.mjs.map
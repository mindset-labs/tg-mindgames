import { EmptyBase } from '@rimbu/collection-types/set-custom';
import { OptLazy } from '@rimbu/common';
import { Stream } from '@rimbu/stream';
export class Empty extends EmptyBase {
    constructor(context) {
        super();
        this.context = context;
    }
    streamRange() {
        return Stream.empty();
    }
    first(otherwise) {
        return OptLazy(otherwise);
    }
    last(otherwise) {
        return OptLazy(otherwise);
    }
    get(index, otherwise) {
        return OptLazy(otherwise);
    }
    prepend(value) {
        return this.context.leafBlock([value]);
    }
    append(value) {
        return this.context.leafBlock([value]);
    }
    take() {
        return this;
    }
    drop() {
        return this;
    }
    slice() {
        return this;
    }
    sort() {
        return this;
    }
    splice(options) {
        if (undefined === options.insert)
            return this;
        return this.context.from(options.insert);
    }
    insert(index, values) {
        return this.splice({ insert: values });
    }
    remove() {
        return this;
    }
    concat(...sources) {
        return this.context.from(...sources);
    }
    repeat() {
        return this;
    }
    rotate() {
        return this;
    }
    padTo(length, fill) {
        if (length <= 0)
            return this;
        return this.append(fill).repeat(length);
    }
    updateAt() {
        return this;
    }
    filter() {
        return this;
    }
    collect() {
        return this;
    }
    map() {
        return this;
    }
    mapPure() {
        return this;
    }
    flatMap() {
        return this;
    }
    reversed() {
        return this;
    }
    toArray() {
        return [];
    }
    toBuilder() {
        return this.context.builder();
    }
    structure() {
        return '<empty>';
    }
    toString() {
        return `List()`;
    }
    toJSON() {
        return {
            dataType: this.context.typeTag,
            value: [],
        };
    }
}
export function createEmptyList(context) {
    return Object.freeze(new Empty(context));
}
//# sourceMappingURL=empty.mjs.map
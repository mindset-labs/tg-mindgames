import { RimbuError } from '@rimbu/base';
import { Stream } from '@rimbu/stream';
export class EmptyBase {
    [Symbol.iterator]() {
        return Stream.empty()[Symbol.iterator]();
    }
    assumeNonEmpty() {
        RimbuError.throwEmptyCollectionAssumedNonEmptyError();
    }
    stream() {
        return Stream.empty();
    }
    get size() {
        return 0;
    }
    get length() {
        return 0;
    }
    get isEmpty() {
        return true;
    }
    nonEmpty() {
        return false;
    }
    forEach() {
        //
    }
    filter() {
        return this;
    }
    remove() {
        return this;
    }
    toArray() {
        return [];
    }
}
export class NonEmptyBase {
    [Symbol.iterator]() {
        return this.stream()[Symbol.iterator]();
    }
    get isEmpty() {
        return false;
    }
    nonEmpty() {
        return true;
    }
    assumeNonEmpty() {
        return this;
    }
    asNormal() {
        return this;
    }
}
//# sourceMappingURL=base.mjs.map
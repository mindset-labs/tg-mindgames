import { Reducer } from '@rimbu/common';
import { isEmptyStreamSourceInstance } from '@rimbu/stream/custom';
export var RSetBase;
(function (RSetBase) {
    class ContextBase {
        constructor() {
            this.empty = () => {
                return this._empty;
            };
            this.from = (...sources) => {
                let builder = this.builder();
                let i = -1;
                const length = sources.length;
                while (++i < length) {
                    const source = sources[i];
                    if (isEmptyStreamSourceInstance(source))
                        continue;
                    if (builder.isEmpty &&
                        this.isNonEmptyInstance(source) &&
                        source.context === this) {
                        if (i === length - 1)
                            return source;
                        builder = source.toBuilder();
                        continue;
                    }
                    builder.addAll(source);
                }
                return builder.build();
            };
            this.of = (...values) => {
                return this.from(values);
            };
            this.reducer = (source) => {
                return Reducer.create(() => undefined === source
                    ? this.builder()
                    : this.from(source).toBuilder(), (builder, value) => {
                    builder.add(value);
                    return builder;
                }, (builder) => builder.build());
            };
        }
        get _types() {
            return undefined;
        }
    }
    RSetBase.ContextBase = ContextBase;
})(RSetBase || (RSetBase = {}));
//# sourceMappingURL=base.mjs.map
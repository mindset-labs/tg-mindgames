"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/common/index.mts
var common_exports = {};
__export(common_exports, {
  EmptyBase: () => EmptyBase,
  NonEmptyBase: () => NonEmptyBase
});
module.exports = __toCommonJS(common_exports);

// src/common/base.mts
var import_base = require("@rimbu/base");
var import_stream = require("@rimbu/stream");
var EmptyBase = class {
  [Symbol.iterator]() {
    return import_stream.Stream.empty()[Symbol.iterator]();
  }
  assumeNonEmpty() {
    import_base.RimbuError.throwEmptyCollectionAssumedNonEmptyError();
  }
  stream() {
    return import_stream.Stream.empty();
  }
  get size() {
    return 0;
  }
  get length() {
    return 0;
  }
  get isEmpty() {
    return true;
  }
  nonEmpty() {
    return false;
  }
  forEach() {
  }
  filter() {
    return this;
  }
  remove() {
    return this;
  }
  toArray() {
    return [];
  }
};
var NonEmptyBase = class {
  [Symbol.iterator]() {
    return this.stream()[Symbol.iterator]();
  }
  get isEmpty() {
    return false;
  }
  nonEmpty() {
    return true;
  }
  assumeNonEmpty() {
    return this;
  }
  asNormal() {
    return this;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  EmptyBase,
  NonEmptyBase
});

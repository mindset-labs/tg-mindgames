"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/set-custom/index.mts
var set_custom_exports = {};
__export(set_custom_exports, {
  EmptyBase: () => EmptyBase,
  NonEmptyBase: () => NonEmptyBase,
  RSetBase: () => RSetBase
});
module.exports = __toCommonJS(set_custom_exports);

// src/common/base.mts
var import_base = require("@rimbu/base");
var import_stream = require("@rimbu/stream");
var EmptyBase = class {
  [Symbol.iterator]() {
    return import_stream.Stream.empty()[Symbol.iterator]();
  }
  assumeNonEmpty() {
    import_base.RimbuError.throwEmptyCollectionAssumedNonEmptyError();
  }
  stream() {
    return import_stream.Stream.empty();
  }
  get size() {
    return 0;
  }
  get length() {
    return 0;
  }
  get isEmpty() {
    return true;
  }
  nonEmpty() {
    return false;
  }
  forEach() {
  }
  filter() {
    return this;
  }
  remove() {
    return this;
  }
  toArray() {
    return [];
  }
};
var NonEmptyBase = class {
  [Symbol.iterator]() {
    return this.stream()[Symbol.iterator]();
  }
  get isEmpty() {
    return false;
  }
  nonEmpty() {
    return true;
  }
  assumeNonEmpty() {
    return this;
  }
  asNormal() {
    return this;
  }
};

// src/set-custom/interface/base.mts
var import_common = require("@rimbu/common");
var import_custom = require("@rimbu/stream/custom");
var RSetBase;
((RSetBase2) => {
  class ContextBase {
    constructor() {
      this.empty = () => {
        return this._empty;
      };
      this.from = (...sources) => {
        let builder = this.builder();
        let i = -1;
        const length = sources.length;
        while (++i < length) {
          const source = sources[i];
          if ((0, import_custom.isEmptyStreamSourceInstance)(source))
            continue;
          if (builder.isEmpty && this.isNonEmptyInstance(source) && source.context === this) {
            if (i === length - 1)
              return source;
            builder = source.toBuilder();
            continue;
          }
          builder.addAll(source);
        }
        return builder.build();
      };
      this.of = (...values) => {
        return this.from(values);
      };
      this.reducer = (source) => {
        return import_common.Reducer.create(
          () => void 0 === source ? this.builder() : this.from(source).toBuilder(),
          (builder, value) => {
            builder.add(value);
            return builder;
          },
          (builder) => builder.build()
        );
      };
    }
    get _types() {
      return void 0;
    }
  }
  RSetBase2.ContextBase = ContextBase;
})(RSetBase || (RSetBase = {}));
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  EmptyBase,
  NonEmptyBase,
  RSetBase
});

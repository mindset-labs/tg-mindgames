"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/custom/fast-iterator-custom.mts
var fast_iterator_custom_exports = {};
__export(fast_iterator_custom_exports, {
  AlwaysIterator: () => AlwaysIterator,
  AppendIterator: () => AppendIterator,
  ArrayIterator: () => ArrayIterator,
  ArrayReverseIterator: () => ArrayReverseIterator,
  CollectIterator: () => CollectIterator,
  ConcatIterator: () => ConcatIterator,
  DistinctPreviousIterator: () => DistinctPreviousIterator,
  DropIterator: () => DropIterator,
  DropWhileIterator: () => DropWhileIterator,
  FastIteratorBase: () => FastIteratorBase,
  FilterApplyIterator: () => FilterApplyIterator,
  FilterIterator: () => FilterIterator,
  FilterPureIterator: () => FilterPureIterator,
  FlatMapIterator: () => FlatMapIterator,
  IndexedIterator: () => IndexedIterator,
  IndicesOfIterator: () => IndicesOfIterator,
  IndicesWhereIterator: () => IndicesWhereIterator,
  IntersperseIterator: () => IntersperseIterator,
  MapApplyIterator: () => MapApplyIterator,
  MapIterator: () => MapIterator,
  MapPureIterator: () => MapPureIterator,
  PrependIterator: () => PrependIterator,
  RandomIntIterator: () => RandomIntIterator,
  RandomIterator: () => RandomIterator,
  RangeDownIterator: () => RangeDownIterator,
  RangeUpIterator: () => RangeUpIterator,
  ReduceAllIterator: () => ReduceAllIterator,
  ReduceIterator: () => ReduceIterator,
  RepeatIterator: () => RepeatIterator,
  SplitOnIterator: () => SplitOnIterator,
  SplitWhereIterator: () => SplitWhereIterator,
  TakeIterator: () => TakeIterator,
  TakeWhileIterator: () => TakeWhileIterator,
  UnfoldIterator: () => UnfoldIterator,
  WindowIterator: () => WindowIterator,
  ZipAllWithItererator: () => ZipAllWithItererator,
  ZipWithIterator: () => ZipWithIterator,
  emptyFastIterator: () => emptyFastIterator,
  fixedDoneIteratorResult: () => fixedDoneIteratorResult,
  isFastIterator: () => isFastIterator
});
module.exports = __toCommonJS(fast_iterator_custom_exports);
var import_base = require("@rimbu/base");
var import_common = require("@rimbu/common");
var fixedDoneIteratorResult = Object.freeze({
  done: true,
  value: void 0
});
var emptyFastIterator = Object.freeze({
  fastNext(otherwise) {
    return (0, import_common.OptLazy)(otherwise);
  },
  next() {
    return fixedDoneIteratorResult;
  }
});
function isFastIterator(iterator) {
  return `fastNext` in iterator;
}
var FastIteratorBase = class {
  next() {
    const done = Symbol("Done");
    const value = this.fastNext(done);
    if (done === value)
      return fixedDoneIteratorResult;
    return { value, done: false };
  }
};
var FlatMapIterator = class extends FastIteratorBase {
  constructor(source, flatMapFun, streamSourceHelpers) {
    super();
    this.source = source;
    this.flatMapFun = flatMapFun;
    this.streamSourceHelpers = streamSourceHelpers;
    this.state = (0, import_common.TraverseState)();
    this.done = false;
    this.currentIterator = null;
    this.iterator = this.source[Symbol.iterator]();
  }
  fastNext(otherwise) {
    const state = this.state;
    if (state.halted || this.done)
      return (0, import_common.OptLazy)(otherwise);
    const done = Symbol("Done");
    let nextValue;
    while (null === this.currentIterator || done === (nextValue = this.currentIterator.fastNext(done))) {
      const nextIter = this.iterator.fastNext(done);
      if (done === nextIter) {
        this.done = true;
        return (0, import_common.OptLazy)(otherwise);
      }
      const nextSource = this.flatMapFun(
        nextIter,
        state.nextIndex(),
        state.halt
      );
      this.currentIterator = this.streamSourceHelpers.fromStreamSource(nextSource)[Symbol.iterator]();
    }
    return nextValue;
  }
};
var ConcatIterator = class extends FastIteratorBase {
  constructor(source, otherSources, streamSourceHelpers) {
    super();
    this.source = source;
    this.otherSources = otherSources;
    this.streamSourceHelpers = streamSourceHelpers;
    this.sourceIndex = 0;
    this.iterator = source[Symbol.iterator]();
  }
  fastNext(otherwise) {
    const done = Symbol("Done");
    let value;
    const length = this.otherSources.length;
    const { streamSourceHelpers } = this;
    while (done === (value = this.iterator.fastNext(done))) {
      if (this.sourceIndex >= length)
        return (0, import_common.OptLazy)(otherwise);
      let nextSource = this.otherSources[this.sourceIndex++];
      while (streamSourceHelpers.isEmptyStreamSourceInstance(nextSource)) {
        if (this.sourceIndex >= length)
          return (0, import_common.OptLazy)(otherwise);
        nextSource = this.otherSources[this.sourceIndex++];
      }
      this.iterator = streamSourceHelpers.fromStreamSource(nextSource)[Symbol.iterator]();
    }
    return value;
  }
};
var FilterIterator = class extends FastIteratorBase {
  constructor(source, pred, invert) {
    super();
    this.source = source;
    this.pred = pred;
    this.invert = invert;
    this.state = (0, import_common.TraverseState)();
  }
  fastNext(otherwise) {
    const state = this.state;
    if (state.halted)
      return (0, import_common.OptLazy)(otherwise);
    const done = Symbol("Done");
    let value;
    const source = this.source;
    const pred = this.pred;
    const halt = state.halt;
    if (this.invert) {
      while (!state.halted && done !== (value = source.fastNext(done))) {
        if (!pred(value, state.nextIndex(), halt))
          return value;
      }
    } else {
      while (!state.halted && done !== (value = source.fastNext(done))) {
        if (pred(value, state.nextIndex(), halt))
          return value;
      }
    }
    return (0, import_common.OptLazy)(otherwise);
  }
};
var FilterPureIterator = class extends FastIteratorBase {
  constructor(source, pred, args, invert) {
    super();
    this.source = source;
    this.pred = pred;
    this.args = args;
    this.invert = invert;
  }
  fastNext(otherwise) {
    const done = Symbol("Done");
    let value;
    const source = this.source;
    const pred = this.pred;
    const args = this.args;
    if (this.invert) {
      while (done !== (value = source.fastNext(done))) {
        if (!pred(value, ...args))
          return value;
      }
    } else {
      while (done !== (value = source.fastNext(done))) {
        if (pred(value, ...args))
          return value;
      }
    }
    return (0, import_common.OptLazy)(otherwise);
  }
};
var CollectIterator = class extends FastIteratorBase {
  constructor(source, collectFun) {
    super();
    this.source = source;
    this.collectFun = collectFun;
    this.state = (0, import_common.TraverseState)();
  }
  fastNext(otherwise) {
    const state = this.state;
    if (state.halted)
      return (0, import_common.OptLazy)(otherwise);
    const { halt } = state;
    const done = Symbol("Done");
    let value;
    const source = this.source;
    const collectFun = this.collectFun;
    while (!state.halted && done !== (value = source.fastNext(done))) {
      const result = collectFun(
        value,
        state.nextIndex(),
        import_common.CollectFun.Skip,
        halt
      );
      if (import_common.CollectFun.Skip === result)
        continue;
      return result;
    }
    return (0, import_common.OptLazy)(otherwise);
  }
};
var IndicesWhereIterator = class extends FastIteratorBase {
  constructor(source, pred) {
    super();
    this.source = source;
    this.pred = pred;
    this.index = 0;
  }
  fastNext(otherwise) {
    const done = Symbol("Done");
    let value;
    const source = this.source;
    const pred = this.pred;
    while (done !== (value = source.fastNext(done))) {
      if (pred(value))
        return this.index++;
      this.index++;
    }
    return (0, import_common.OptLazy)(otherwise);
  }
};
var IndicesOfIterator = class extends FastIteratorBase {
  constructor(source, searchValue, eq) {
    super();
    this.source = source;
    this.searchValue = searchValue;
    this.eq = eq;
    this.index = 0;
  }
  fastNext(otherwise) {
    const done = Symbol("Done");
    let value;
    const source = this.source;
    const searchValue = this.searchValue;
    const eq = this.eq;
    while (done !== (value = source.fastNext(done))) {
      if (eq(searchValue, value))
        return this.index++;
      this.index++;
    }
    return (0, import_common.OptLazy)(otherwise);
  }
};
var TakeWhileIterator = class extends FastIteratorBase {
  constructor(source, pred) {
    super();
    this.source = source;
    this.pred = pred;
    this.isDone = false;
    this.index = 0;
  }
  fastNext(otherwise) {
    const done = Symbol("Done");
    if (this.isDone)
      return (0, import_common.OptLazy)(otherwise);
    const next = this.source.fastNext(done);
    if (done === next) {
      this.isDone = true;
      return (0, import_common.OptLazy)(otherwise);
    }
    if (this.pred(next, this.index++))
      return next;
    this.isDone = true;
    return (0, import_common.OptLazy)(otherwise);
  }
};
var DropWhileIterator = class extends FastIteratorBase {
  constructor(source, pred) {
    super();
    this.source = source;
    this.pred = pred;
    this.pass = false;
    this.index = 0;
  }
  fastNext(otherwise) {
    const source = this.source;
    if (this.pass)
      return source.fastNext(otherwise);
    const done = Symbol("Done");
    let value;
    while (done !== (value = source.fastNext(done))) {
      this.pass = !this.pred(value, this.index++);
      if (this.pass)
        return value;
    }
    return (0, import_common.OptLazy)(otherwise);
  }
};
var TakeIterator = class extends FastIteratorBase {
  constructor(source, amount) {
    super();
    this.source = source;
    this.amount = amount;
    this.i = 0;
  }
  fastNext(otherwise) {
    if (this.i++ >= this.amount)
      return (0, import_common.OptLazy)(otherwise);
    return this.source.fastNext(otherwise);
  }
};
var DropIterator = class extends FastIteratorBase {
  constructor(source, amount) {
    super();
    this.source = source;
    this.amount = amount;
    this.remain = amount;
  }
  fastNext(otherwise) {
    const source = this.source;
    if (this.remain <= 0)
      return source.fastNext(otherwise);
    const done = Symbol("Done");
    let value;
    while (done !== (value = source.fastNext(done))) {
      if (this.remain-- <= 0)
        return value;
    }
    return (0, import_common.OptLazy)(otherwise);
  }
};
var RepeatIterator = class extends FastIteratorBase {
  constructor(source, amount) {
    super();
    this.source = source;
    this.amount = amount;
    this.isEmpty = true;
    this.iterator = source[Symbol.iterator]();
    this.remain = amount;
  }
  fastNext(otherwise) {
    const done = Symbol("Done");
    let value = this.iterator.fastNext(done);
    if (done !== value) {
      this.isEmpty = false;
      return value;
    }
    if (this.isEmpty)
      return (0, import_common.OptLazy)(otherwise);
    if (void 0 !== this.remain) {
      this.remain--;
      if (this.remain <= 0)
        return (0, import_common.OptLazy)(otherwise);
    }
    this.iterator = this.source[Symbol.iterator]();
    value = this.iterator.fastNext(done);
    if (done === value)
      return (0, import_common.OptLazy)(otherwise);
    return value;
  }
};
var IntersperseIterator = class extends FastIteratorBase {
  constructor(source, sepStream) {
    super();
    this.source = source;
    this.sepStream = sepStream;
    this.isInitialized = false;
  }
  fastNext(otherwise) {
    const done = Symbol("Done");
    if (void 0 !== this.sepIterator) {
      const sepNext = this.sepIterator.fastNext(done);
      if (done !== sepNext)
        return sepNext;
      this.sepIterator = void 0;
    }
    if (this.isInitialized) {
      const newNextValue2 = this.source.fastNext(done);
      if (done === newNextValue2) {
        this.isInitialized = false;
        return this.nextValue;
      }
      const currentNextValue = this.nextValue;
      this.nextValue = newNextValue2;
      this.sepIterator = this.sepStream[Symbol.iterator]();
      return currentNextValue;
    }
    const nextValue = this.source.fastNext(done);
    if (done === nextValue)
      return (0, import_common.OptLazy)(otherwise);
    const newNextValue = this.source.fastNext(done);
    if (done === newNextValue)
      return nextValue;
    this.nextValue = newNextValue;
    this.isInitialized = true;
    this.sepIterator = this.sepStream[Symbol.iterator]();
    return nextValue;
  }
};
var SplitWhereIterator = class extends FastIteratorBase {
  constructor(source, pred) {
    super();
    this.source = source;
    this.pred = pred;
    this.index = 0;
  }
  fastNext(otherwise) {
    const result = [];
    const source = this.source;
    const done = Symbol("Done");
    let value;
    const pred = this.pred;
    const startIndex = this.index;
    while (done !== (value = source.fastNext(done))) {
      if (pred(value, this.index++))
        return result;
      result.push(value);
    }
    if (startIndex === this.index)
      return (0, import_common.OptLazy)(otherwise);
    return result;
  }
};
var SplitOnIterator = class extends FastIteratorBase {
  constructor(source, sepElem, eq) {
    super();
    this.source = source;
    this.sepElem = sepElem;
    this.eq = eq;
  }
  fastNext(otherwise) {
    const result = [];
    const source = this.source;
    const done = Symbol("Done");
    let value;
    let processed = false;
    const eq = this.eq;
    const sepElem = this.sepElem;
    while (done !== (value = source.fastNext(done))) {
      processed = true;
      if (eq(value, sepElem))
        return result;
      result.push(value);
    }
    if (!processed)
      return (0, import_common.OptLazy)(otherwise);
    return result;
  }
};
var ReduceIterator = class extends FastIteratorBase {
  constructor(source, reducer) {
    super();
    this.source = source;
    this.reducer = reducer;
    this.halted = false;
    this.index = 0;
    this.halt = () => {
      this.halted = true;
    };
    this.state = (0, import_common.OptLazy)(reducer.init);
  }
  fastNext(otherwise) {
    if (this.halted)
      return (0, import_common.OptLazy)(otherwise);
    const done = Symbol("Done");
    const value = this.source.fastNext(done);
    if (done === value)
      return (0, import_common.OptLazy)(otherwise);
    const reducer = this.reducer;
    this.state = reducer.next(this.state, value, this.index++, this.halt);
    return reducer.stateToResult(this.state);
  }
};
var ReduceAllIterator = class extends FastIteratorBase {
  constructor(source, reducers) {
    super();
    this.source = source;
    this.reducers = reducers;
    this.halted = false;
    this.index = 0;
    this.isDone = false;
    this.state = reducers.map((d) => (0, import_common.OptLazy)(d.init));
    this.done = this.state.map((_, i) => () => {
      this.done[i] = null;
    });
  }
  fastNext(otherwise) {
    if (this.halted || this.isDone)
      return (0, import_common.OptLazy)(otherwise);
    const done = Symbol("Done");
    const value = this.source.fastNext(done);
    if (done === value)
      return (0, import_common.OptLazy)(otherwise);
    const reducers = this.reducers;
    const length = reducers.length;
    let i = -1;
    let anyNotDone = false;
    while (++i < length) {
      const halt = this.done[i];
      if (null !== halt) {
        anyNotDone = true;
        const reducer = reducers[i];
        this.state[i] = reducer.next(this.state[i], value, this.index, halt);
      }
    }
    this.isDone = !anyNotDone;
    if (!anyNotDone)
      return (0, import_common.OptLazy)(otherwise);
    this.index++;
    return this.state.map(
      (s, i2) => reducers[i2].stateToResult(s)
    );
  }
};
var ArrayIterator = class extends FastIteratorBase {
  constructor(array, startIndex, endIndex) {
    super();
    this.array = array;
    this.startIndex = startIndex;
    this.endIndex = endIndex;
    this.i = startIndex;
  }
  fastNext(otherwise) {
    if (this.i > this.endIndex)
      return (0, import_common.OptLazy)(otherwise);
    return this.array[this.i++];
  }
};
var ArrayReverseIterator = class extends FastIteratorBase {
  constructor(array, startIndex, endIndex) {
    super();
    this.array = array;
    this.startIndex = startIndex;
    this.i = endIndex;
  }
  fastNext(otherwise) {
    if (this.i < this.startIndex)
      return (0, import_common.OptLazy)(otherwise);
    return this.array[this.i--];
  }
};
var AlwaysIterator = class extends FastIteratorBase {
  constructor(value) {
    super();
    this.value = value;
  }
  fastNext() {
    return this.value;
  }
};
var MapApplyIterator = class extends FastIteratorBase {
  constructor(source, f, args, streamSourceHelpers) {
    super();
    this.f = f;
    this.args = args;
    this.iter = streamSourceHelpers.fromStreamSource(source)[Symbol.iterator]();
  }
  fastNext(otherwise) {
    const done = Symbol();
    const next = this.iter.fastNext(done);
    const args = this.args;
    if (done === next)
      return (0, import_common.OptLazy)(otherwise);
    return this.f(...next, ...args);
  }
};
var FilterApplyIterator = class extends FastIteratorBase {
  constructor(source, pred, args, invert, streamSourceHelpers) {
    super();
    this.pred = pred;
    this.args = args;
    this.invert = invert;
    this.iter = streamSourceHelpers.fromStreamSource(source)[Symbol.iterator]();
  }
  fastNext(otherwise) {
    const done = Symbol();
    let next;
    const pred = this.pred;
    const iter = this.iter;
    const args = this.args;
    if (this.invert) {
      while (done !== (next = iter.fastNext(done))) {
        if (!pred(...next, ...args))
          return next;
      }
    } else {
      while (done !== (next = iter.fastNext(done))) {
        if (pred(...next, ...args))
          return next;
      }
    }
    return (0, import_common.OptLazy)(otherwise);
  }
};
var RangeUpIterator = class extends FastIteratorBase {
  constructor(start = 0, end, delta) {
    super();
    this.start = start;
    this.end = end;
    this.delta = delta;
    this.state = start;
  }
  fastNext(otherwise) {
    if (void 0 !== this.end) {
      if (this.state > this.end) {
        return (0, import_common.OptLazy)(otherwise);
      }
    }
    const currentState = this.state;
    this.state += this.delta;
    return currentState;
  }
};
var RangeDownIterator = class extends FastIteratorBase {
  constructor(start = 0, end, delta) {
    super();
    this.start = start;
    this.end = end;
    this.delta = delta;
    this.state = start;
  }
  fastNext(otherwise) {
    if (void 0 !== this.end) {
      if (this.state < this.end) {
        return (0, import_common.OptLazy)(otherwise);
      }
    }
    const currentState = this.state;
    this.state += this.delta;
    return currentState;
  }
};
var RandomIterator = class extends FastIteratorBase {
  fastNext() {
    return Math.random();
  }
};
var RandomIntIterator = class extends FastIteratorBase {
  constructor(min, max) {
    super();
    this.min = min;
    this.max = max;
    this.width = max - min;
  }
  fastNext() {
    return this.min + Math.round(Math.random() * this.width);
  }
};
var UnfoldIterator = class extends FastIteratorBase {
  constructor(init, getNext) {
    super();
    this.getNext = getNext;
    this.index = 0;
    this.current = init;
  }
  fastNext(otherwise) {
    const current = this.current;
    if (import_base.Token === current)
      return (0, import_common.OptLazy)(otherwise);
    if (this.index === 0) {
      this.index++;
      return current;
    }
    const next = this.getNext(current, this.index++, import_base.Token);
    this.current = next;
    if (import_base.Token === next)
      return (0, import_common.OptLazy)(otherwise);
    return next;
  }
};
var ZipWithIterator = class extends FastIteratorBase {
  constructor(iterables, zipFun, streamSourceHelpers) {
    super();
    this.iterables = iterables;
    this.zipFun = zipFun;
    this.sources = iterables.map(
      (source) => streamSourceHelpers.fromStreamSource(source)[Symbol.iterator]()
    );
  }
  fastNext(otherwise) {
    const result = [];
    let sourceIndex = -1;
    const sources = this.sources;
    const done = Symbol("Done");
    while (++sourceIndex < sources.length) {
      const value = sources[sourceIndex].fastNext(done);
      if (done === value)
        return (0, import_common.OptLazy)(otherwise);
      result.push(value);
    }
    return this.zipFun(...result);
  }
};
var ZipAllWithItererator = class extends FastIteratorBase {
  constructor(fillValue, iters, zipFun, streamSourceHelpers) {
    super();
    this.fillValue = fillValue;
    this.iters = iters;
    this.zipFun = zipFun;
    this.allDone = false;
    this.sources = iters.map(
      (o) => streamSourceHelpers.fromStreamSource(o)[Symbol.iterator]()
    );
  }
  fastNext(otherwise) {
    if (this.allDone)
      return (0, import_common.OptLazy)(otherwise);
    const result = [];
    let sourceIndex = -1;
    const sources = this.sources;
    const done = Symbol("Done");
    let anyNotDone = false;
    const fillValue = this.fillValue;
    while (++sourceIndex < sources.length) {
      const value = sources[sourceIndex].fastNext(done);
      if (done === value) {
        result.push((0, import_common.OptLazy)(fillValue));
      } else {
        anyNotDone = true;
        result.push(value);
      }
    }
    if (!anyNotDone) {
      this.allDone = true;
      return (0, import_common.OptLazy)(otherwise);
    }
    return this.zipFun(...result);
  }
};
var PrependIterator = class extends FastIteratorBase {
  constructor(source, item) {
    super();
    this.source = source;
    this.item = item;
    this.prependDone = false;
  }
  fastNext(otherwise) {
    if (this.prependDone)
      return this.source.fastNext(otherwise);
    this.prependDone = true;
    return (0, import_common.OptLazy)(this.item);
  }
};
var AppendIterator = class extends FastIteratorBase {
  constructor(source, item) {
    super();
    this.source = source;
    this.item = item;
    this.appendDone = false;
  }
  fastNext(otherwise) {
    if (this.appendDone)
      return (0, import_common.OptLazy)(otherwise);
    const done = Symbol("Done");
    const value = this.source.fastNext(done);
    if (done !== value)
      return value;
    this.appendDone = true;
    return (0, import_common.OptLazy)(this.item);
  }
};
var IndexedIterator = class extends FastIteratorBase {
  constructor(source, startIndex = 0) {
    super();
    this.source = source;
    this.startIndex = startIndex;
    this.index = startIndex;
  }
  fastNext(otherwise) {
    const done = Symbol("Done");
    const value = this.source.fastNext(done);
    if (done === value)
      return (0, import_common.OptLazy)(otherwise);
    return [this.index++, value];
  }
};
var MapIterator = class extends FastIteratorBase {
  constructor(source, mapFun) {
    super();
    this.source = source;
    this.mapFun = mapFun;
    this.state = (0, import_common.TraverseState)();
  }
  fastNext(otherwise) {
    const state = this.state;
    if (state.halted)
      return (0, import_common.OptLazy)(otherwise);
    const done = Symbol("Done");
    const next = this.source.fastNext(done);
    if (done === next)
      return (0, import_common.OptLazy)(otherwise);
    return this.mapFun(next, state.nextIndex());
  }
};
var MapPureIterator = class extends FastIteratorBase {
  constructor(source, mapFun, args) {
    super();
    this.source = source;
    this.mapFun = mapFun;
    this.args = args;
  }
  fastNext(otherwise) {
    const done = Symbol("Done");
    const next = this.source.fastNext(done);
    if (done === next)
      return (0, import_common.OptLazy)(otherwise);
    return this.mapFun(next, ...this.args);
  }
};
var DistinctPreviousIterator = class extends FastIteratorBase {
  constructor(source, eq) {
    super();
    this.source = source;
    this.eq = eq;
    this.previous = [];
  }
  fastNext(otherwise) {
    const done = Symbol("Done");
    let next;
    const source = this.source;
    const previous = this.previous;
    while (done !== (next = source.fastNext(done))) {
      previous.push(next);
      if (previous.length === 1) {
        return next;
      }
      const prev = previous.shift();
      if (!this.eq(prev, next)) {
        return next;
      }
    }
    return (0, import_common.OptLazy)(otherwise);
  }
};
var WindowIterator = class extends FastIteratorBase {
  constructor(source, windowSize, skipAmount, collector) {
    super();
    this.source = source;
    this.windowSize = windowSize;
    this.skipAmount = skipAmount;
    this.collector = collector;
    this.state = /* @__PURE__ */ new Set();
    this.index = 0;
  }
  fastNext(otherwise) {
    const source = this.source;
    const collector = this.collector;
    const windowSize = this.windowSize;
    const skipAmount = this.skipAmount;
    const done = Symbol("Done");
    const state = this.state;
    let next;
    let result = done;
    while (done !== (next = source.fastNext(done))) {
      for (const current of state) {
        current.result = collector.next(
          current.result,
          next,
          current.size,
          current.halt
        );
        current.size++;
        if (current.size >= windowSize || current.halted) {
          result = collector.stateToResult(current.result);
          state.delete(current);
        }
      }
      if (this.index % skipAmount === 0) {
        const newState = {
          result: (0, import_common.OptLazy)(collector.init),
          size: 1,
          halted: false,
          halt() {
            this.halted = true;
          }
        };
        newState.result = collector.next(
          (0, import_common.OptLazy)(collector.init),
          next,
          0,
          newState.halt
        );
        state.add(newState);
      }
      this.index++;
      if (done !== result) {
        return result;
      }
    }
    return (0, import_common.OptLazy)(otherwise);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AlwaysIterator,
  AppendIterator,
  ArrayIterator,
  ArrayReverseIterator,
  CollectIterator,
  ConcatIterator,
  DistinctPreviousIterator,
  DropIterator,
  DropWhileIterator,
  FastIteratorBase,
  FilterApplyIterator,
  FilterIterator,
  FilterPureIterator,
  FlatMapIterator,
  IndexedIterator,
  IndicesOfIterator,
  IndicesWhereIterator,
  IntersperseIterator,
  MapApplyIterator,
  MapIterator,
  MapPureIterator,
  PrependIterator,
  RandomIntIterator,
  RandomIterator,
  RangeDownIterator,
  RangeUpIterator,
  ReduceAllIterator,
  ReduceIterator,
  RepeatIterator,
  SplitOnIterator,
  SplitWhereIterator,
  TakeIterator,
  TakeWhileIterator,
  UnfoldIterator,
  WindowIterator,
  ZipAllWithItererator,
  ZipWithIterator,
  emptyFastIterator,
  fixedDoneIteratorResult,
  isFastIterator
});

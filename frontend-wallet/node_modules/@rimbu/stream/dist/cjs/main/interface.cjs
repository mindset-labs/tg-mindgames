"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main/interface.mts
var interface_exports = {};
__export(interface_exports, {
  Stream: () => Stream
});
module.exports = __toCommonJS(interface_exports);

// src/custom/fast-iterator-custom.mts
var import_base = require("@rimbu/base");
var import_common = require("@rimbu/common");
var fixedDoneIteratorResult = Object.freeze({
  done: true,
  value: void 0
});
var emptyFastIterator = Object.freeze({
  fastNext(otherwise) {
    return (0, import_common.OptLazy)(otherwise);
  },
  next() {
    return fixedDoneIteratorResult;
  }
});
function isFastIterator(iterator) {
  return `fastNext` in iterator;
}
var FastIteratorBase = class {
  next() {
    const done = Symbol("Done");
    const value = this.fastNext(done);
    if (done === value)
      return fixedDoneIteratorResult;
    return { value, done: false };
  }
};
var FlatMapIterator = class extends FastIteratorBase {
  constructor(source, flatMapFun, streamSourceHelpers2) {
    super();
    this.source = source;
    this.flatMapFun = flatMapFun;
    this.streamSourceHelpers = streamSourceHelpers2;
    this.state = (0, import_common.TraverseState)();
    this.done = false;
    this.currentIterator = null;
    this.iterator = this.source[Symbol.iterator]();
  }
  fastNext(otherwise) {
    const state = this.state;
    if (state.halted || this.done)
      return (0, import_common.OptLazy)(otherwise);
    const done = Symbol("Done");
    let nextValue;
    while (null === this.currentIterator || done === (nextValue = this.currentIterator.fastNext(done))) {
      const nextIter = this.iterator.fastNext(done);
      if (done === nextIter) {
        this.done = true;
        return (0, import_common.OptLazy)(otherwise);
      }
      const nextSource = this.flatMapFun(
        nextIter,
        state.nextIndex(),
        state.halt
      );
      this.currentIterator = this.streamSourceHelpers.fromStreamSource(nextSource)[Symbol.iterator]();
    }
    return nextValue;
  }
};
var ConcatIterator = class extends FastIteratorBase {
  constructor(source, otherSources, streamSourceHelpers2) {
    super();
    this.source = source;
    this.otherSources = otherSources;
    this.streamSourceHelpers = streamSourceHelpers2;
    this.sourceIndex = 0;
    this.iterator = source[Symbol.iterator]();
  }
  fastNext(otherwise) {
    const done = Symbol("Done");
    let value;
    const length = this.otherSources.length;
    const { streamSourceHelpers: streamSourceHelpers2 } = this;
    while (done === (value = this.iterator.fastNext(done))) {
      if (this.sourceIndex >= length)
        return (0, import_common.OptLazy)(otherwise);
      let nextSource = this.otherSources[this.sourceIndex++];
      while (streamSourceHelpers2.isEmptyStreamSourceInstance(nextSource)) {
        if (this.sourceIndex >= length)
          return (0, import_common.OptLazy)(otherwise);
        nextSource = this.otherSources[this.sourceIndex++];
      }
      this.iterator = streamSourceHelpers2.fromStreamSource(nextSource)[Symbol.iterator]();
    }
    return value;
  }
};
var FilterIterator = class extends FastIteratorBase {
  constructor(source, pred, invert) {
    super();
    this.source = source;
    this.pred = pred;
    this.invert = invert;
    this.state = (0, import_common.TraverseState)();
  }
  fastNext(otherwise) {
    const state = this.state;
    if (state.halted)
      return (0, import_common.OptLazy)(otherwise);
    const done = Symbol("Done");
    let value;
    const source = this.source;
    const pred = this.pred;
    const halt = state.halt;
    if (this.invert) {
      while (!state.halted && done !== (value = source.fastNext(done))) {
        if (!pred(value, state.nextIndex(), halt))
          return value;
      }
    } else {
      while (!state.halted && done !== (value = source.fastNext(done))) {
        if (pred(value, state.nextIndex(), halt))
          return value;
      }
    }
    return (0, import_common.OptLazy)(otherwise);
  }
};
var FilterPureIterator = class extends FastIteratorBase {
  constructor(source, pred, args, invert) {
    super();
    this.source = source;
    this.pred = pred;
    this.args = args;
    this.invert = invert;
  }
  fastNext(otherwise) {
    const done = Symbol("Done");
    let value;
    const source = this.source;
    const pred = this.pred;
    const args = this.args;
    if (this.invert) {
      while (done !== (value = source.fastNext(done))) {
        if (!pred(value, ...args))
          return value;
      }
    } else {
      while (done !== (value = source.fastNext(done))) {
        if (pred(value, ...args))
          return value;
      }
    }
    return (0, import_common.OptLazy)(otherwise);
  }
};
var CollectIterator = class extends FastIteratorBase {
  constructor(source, collectFun) {
    super();
    this.source = source;
    this.collectFun = collectFun;
    this.state = (0, import_common.TraverseState)();
  }
  fastNext(otherwise) {
    const state = this.state;
    if (state.halted)
      return (0, import_common.OptLazy)(otherwise);
    const { halt } = state;
    const done = Symbol("Done");
    let value;
    const source = this.source;
    const collectFun = this.collectFun;
    while (!state.halted && done !== (value = source.fastNext(done))) {
      const result = collectFun(
        value,
        state.nextIndex(),
        import_common.CollectFun.Skip,
        halt
      );
      if (import_common.CollectFun.Skip === result)
        continue;
      return result;
    }
    return (0, import_common.OptLazy)(otherwise);
  }
};
var IndicesWhereIterator = class extends FastIteratorBase {
  constructor(source, pred) {
    super();
    this.source = source;
    this.pred = pred;
    this.index = 0;
  }
  fastNext(otherwise) {
    const done = Symbol("Done");
    let value;
    const source = this.source;
    const pred = this.pred;
    while (done !== (value = source.fastNext(done))) {
      if (pred(value))
        return this.index++;
      this.index++;
    }
    return (0, import_common.OptLazy)(otherwise);
  }
};
var IndicesOfIterator = class extends FastIteratorBase {
  constructor(source, searchValue, eq) {
    super();
    this.source = source;
    this.searchValue = searchValue;
    this.eq = eq;
    this.index = 0;
  }
  fastNext(otherwise) {
    const done = Symbol("Done");
    let value;
    const source = this.source;
    const searchValue = this.searchValue;
    const eq = this.eq;
    while (done !== (value = source.fastNext(done))) {
      if (eq(searchValue, value))
        return this.index++;
      this.index++;
    }
    return (0, import_common.OptLazy)(otherwise);
  }
};
var TakeWhileIterator = class extends FastIteratorBase {
  constructor(source, pred) {
    super();
    this.source = source;
    this.pred = pred;
    this.isDone = false;
    this.index = 0;
  }
  fastNext(otherwise) {
    const done = Symbol("Done");
    if (this.isDone)
      return (0, import_common.OptLazy)(otherwise);
    const next = this.source.fastNext(done);
    if (done === next) {
      this.isDone = true;
      return (0, import_common.OptLazy)(otherwise);
    }
    if (this.pred(next, this.index++))
      return next;
    this.isDone = true;
    return (0, import_common.OptLazy)(otherwise);
  }
};
var DropWhileIterator = class extends FastIteratorBase {
  constructor(source, pred) {
    super();
    this.source = source;
    this.pred = pred;
    this.pass = false;
    this.index = 0;
  }
  fastNext(otherwise) {
    const source = this.source;
    if (this.pass)
      return source.fastNext(otherwise);
    const done = Symbol("Done");
    let value;
    while (done !== (value = source.fastNext(done))) {
      this.pass = !this.pred(value, this.index++);
      if (this.pass)
        return value;
    }
    return (0, import_common.OptLazy)(otherwise);
  }
};
var TakeIterator = class extends FastIteratorBase {
  constructor(source, amount) {
    super();
    this.source = source;
    this.amount = amount;
    this.i = 0;
  }
  fastNext(otherwise) {
    if (this.i++ >= this.amount)
      return (0, import_common.OptLazy)(otherwise);
    return this.source.fastNext(otherwise);
  }
};
var DropIterator = class extends FastIteratorBase {
  constructor(source, amount) {
    super();
    this.source = source;
    this.amount = amount;
    this.remain = amount;
  }
  fastNext(otherwise) {
    const source = this.source;
    if (this.remain <= 0)
      return source.fastNext(otherwise);
    const done = Symbol("Done");
    let value;
    while (done !== (value = source.fastNext(done))) {
      if (this.remain-- <= 0)
        return value;
    }
    return (0, import_common.OptLazy)(otherwise);
  }
};
var RepeatIterator = class extends FastIteratorBase {
  constructor(source, amount) {
    super();
    this.source = source;
    this.amount = amount;
    this.isEmpty = true;
    this.iterator = source[Symbol.iterator]();
    this.remain = amount;
  }
  fastNext(otherwise) {
    const done = Symbol("Done");
    let value = this.iterator.fastNext(done);
    if (done !== value) {
      this.isEmpty = false;
      return value;
    }
    if (this.isEmpty)
      return (0, import_common.OptLazy)(otherwise);
    if (void 0 !== this.remain) {
      this.remain--;
      if (this.remain <= 0)
        return (0, import_common.OptLazy)(otherwise);
    }
    this.iterator = this.source[Symbol.iterator]();
    value = this.iterator.fastNext(done);
    if (done === value)
      return (0, import_common.OptLazy)(otherwise);
    return value;
  }
};
var IntersperseIterator = class extends FastIteratorBase {
  constructor(source, sepStream) {
    super();
    this.source = source;
    this.sepStream = sepStream;
    this.isInitialized = false;
  }
  fastNext(otherwise) {
    const done = Symbol("Done");
    if (void 0 !== this.sepIterator) {
      const sepNext = this.sepIterator.fastNext(done);
      if (done !== sepNext)
        return sepNext;
      this.sepIterator = void 0;
    }
    if (this.isInitialized) {
      const newNextValue2 = this.source.fastNext(done);
      if (done === newNextValue2) {
        this.isInitialized = false;
        return this.nextValue;
      }
      const currentNextValue = this.nextValue;
      this.nextValue = newNextValue2;
      this.sepIterator = this.sepStream[Symbol.iterator]();
      return currentNextValue;
    }
    const nextValue = this.source.fastNext(done);
    if (done === nextValue)
      return (0, import_common.OptLazy)(otherwise);
    const newNextValue = this.source.fastNext(done);
    if (done === newNextValue)
      return nextValue;
    this.nextValue = newNextValue;
    this.isInitialized = true;
    this.sepIterator = this.sepStream[Symbol.iterator]();
    return nextValue;
  }
};
var SplitWhereIterator = class extends FastIteratorBase {
  constructor(source, pred) {
    super();
    this.source = source;
    this.pred = pred;
    this.index = 0;
  }
  fastNext(otherwise) {
    const result = [];
    const source = this.source;
    const done = Symbol("Done");
    let value;
    const pred = this.pred;
    const startIndex = this.index;
    while (done !== (value = source.fastNext(done))) {
      if (pred(value, this.index++))
        return result;
      result.push(value);
    }
    if (startIndex === this.index)
      return (0, import_common.OptLazy)(otherwise);
    return result;
  }
};
var SplitOnIterator = class extends FastIteratorBase {
  constructor(source, sepElem, eq) {
    super();
    this.source = source;
    this.sepElem = sepElem;
    this.eq = eq;
  }
  fastNext(otherwise) {
    const result = [];
    const source = this.source;
    const done = Symbol("Done");
    let value;
    let processed = false;
    const eq = this.eq;
    const sepElem = this.sepElem;
    while (done !== (value = source.fastNext(done))) {
      processed = true;
      if (eq(value, sepElem))
        return result;
      result.push(value);
    }
    if (!processed)
      return (0, import_common.OptLazy)(otherwise);
    return result;
  }
};
var ReduceIterator = class extends FastIteratorBase {
  constructor(source, reducer) {
    super();
    this.source = source;
    this.reducer = reducer;
    this.halted = false;
    this.index = 0;
    this.halt = () => {
      this.halted = true;
    };
    this.state = (0, import_common.OptLazy)(reducer.init);
  }
  fastNext(otherwise) {
    if (this.halted)
      return (0, import_common.OptLazy)(otherwise);
    const done = Symbol("Done");
    const value = this.source.fastNext(done);
    if (done === value)
      return (0, import_common.OptLazy)(otherwise);
    const reducer = this.reducer;
    this.state = reducer.next(this.state, value, this.index++, this.halt);
    return reducer.stateToResult(this.state);
  }
};
var ReduceAllIterator = class extends FastIteratorBase {
  constructor(source, reducers) {
    super();
    this.source = source;
    this.reducers = reducers;
    this.halted = false;
    this.index = 0;
    this.isDone = false;
    this.state = reducers.map((d) => (0, import_common.OptLazy)(d.init));
    this.done = this.state.map((_, i) => () => {
      this.done[i] = null;
    });
  }
  fastNext(otherwise) {
    if (this.halted || this.isDone)
      return (0, import_common.OptLazy)(otherwise);
    const done = Symbol("Done");
    const value = this.source.fastNext(done);
    if (done === value)
      return (0, import_common.OptLazy)(otherwise);
    const reducers = this.reducers;
    const length = reducers.length;
    let i = -1;
    let anyNotDone = false;
    while (++i < length) {
      const halt = this.done[i];
      if (null !== halt) {
        anyNotDone = true;
        const reducer = reducers[i];
        this.state[i] = reducer.next(this.state[i], value, this.index, halt);
      }
    }
    this.isDone = !anyNotDone;
    if (!anyNotDone)
      return (0, import_common.OptLazy)(otherwise);
    this.index++;
    return this.state.map(
      (s, i2) => reducers[i2].stateToResult(s)
    );
  }
};
var ArrayIterator = class extends FastIteratorBase {
  constructor(array, startIndex, endIndex) {
    super();
    this.array = array;
    this.startIndex = startIndex;
    this.endIndex = endIndex;
    this.i = startIndex;
  }
  fastNext(otherwise) {
    if (this.i > this.endIndex)
      return (0, import_common.OptLazy)(otherwise);
    return this.array[this.i++];
  }
};
var ArrayReverseIterator = class extends FastIteratorBase {
  constructor(array, startIndex, endIndex) {
    super();
    this.array = array;
    this.startIndex = startIndex;
    this.i = endIndex;
  }
  fastNext(otherwise) {
    if (this.i < this.startIndex)
      return (0, import_common.OptLazy)(otherwise);
    return this.array[this.i--];
  }
};
var AlwaysIterator = class extends FastIteratorBase {
  constructor(value) {
    super();
    this.value = value;
  }
  fastNext() {
    return this.value;
  }
};
var MapApplyIterator = class extends FastIteratorBase {
  constructor(source, f, args, streamSourceHelpers2) {
    super();
    this.f = f;
    this.args = args;
    this.iter = streamSourceHelpers2.fromStreamSource(source)[Symbol.iterator]();
  }
  fastNext(otherwise) {
    const done = Symbol();
    const next = this.iter.fastNext(done);
    const args = this.args;
    if (done === next)
      return (0, import_common.OptLazy)(otherwise);
    return this.f(...next, ...args);
  }
};
var FilterApplyIterator = class extends FastIteratorBase {
  constructor(source, pred, args, invert, streamSourceHelpers2) {
    super();
    this.pred = pred;
    this.args = args;
    this.invert = invert;
    this.iter = streamSourceHelpers2.fromStreamSource(source)[Symbol.iterator]();
  }
  fastNext(otherwise) {
    const done = Symbol();
    let next;
    const pred = this.pred;
    const iter = this.iter;
    const args = this.args;
    if (this.invert) {
      while (done !== (next = iter.fastNext(done))) {
        if (!pred(...next, ...args))
          return next;
      }
    } else {
      while (done !== (next = iter.fastNext(done))) {
        if (pred(...next, ...args))
          return next;
      }
    }
    return (0, import_common.OptLazy)(otherwise);
  }
};
var RangeUpIterator = class extends FastIteratorBase {
  constructor(start = 0, end, delta) {
    super();
    this.start = start;
    this.end = end;
    this.delta = delta;
    this.state = start;
  }
  fastNext(otherwise) {
    if (void 0 !== this.end) {
      if (this.state > this.end) {
        return (0, import_common.OptLazy)(otherwise);
      }
    }
    const currentState = this.state;
    this.state += this.delta;
    return currentState;
  }
};
var RangeDownIterator = class extends FastIteratorBase {
  constructor(start = 0, end, delta) {
    super();
    this.start = start;
    this.end = end;
    this.delta = delta;
    this.state = start;
  }
  fastNext(otherwise) {
    if (void 0 !== this.end) {
      if (this.state < this.end) {
        return (0, import_common.OptLazy)(otherwise);
      }
    }
    const currentState = this.state;
    this.state += this.delta;
    return currentState;
  }
};
var RandomIterator = class extends FastIteratorBase {
  fastNext() {
    return Math.random();
  }
};
var RandomIntIterator = class extends FastIteratorBase {
  constructor(min, max) {
    super();
    this.min = min;
    this.max = max;
    this.width = max - min;
  }
  fastNext() {
    return this.min + Math.round(Math.random() * this.width);
  }
};
var UnfoldIterator = class extends FastIteratorBase {
  constructor(init, getNext) {
    super();
    this.getNext = getNext;
    this.index = 0;
    this.current = init;
  }
  fastNext(otherwise) {
    const current = this.current;
    if (import_base.Token === current)
      return (0, import_common.OptLazy)(otherwise);
    if (this.index === 0) {
      this.index++;
      return current;
    }
    const next = this.getNext(current, this.index++, import_base.Token);
    this.current = next;
    if (import_base.Token === next)
      return (0, import_common.OptLazy)(otherwise);
    return next;
  }
};
var ZipWithIterator = class extends FastIteratorBase {
  constructor(iterables, zipFun, streamSourceHelpers2) {
    super();
    this.iterables = iterables;
    this.zipFun = zipFun;
    this.sources = iterables.map(
      (source) => streamSourceHelpers2.fromStreamSource(source)[Symbol.iterator]()
    );
  }
  fastNext(otherwise) {
    const result = [];
    let sourceIndex = -1;
    const sources = this.sources;
    const done = Symbol("Done");
    while (++sourceIndex < sources.length) {
      const value = sources[sourceIndex].fastNext(done);
      if (done === value)
        return (0, import_common.OptLazy)(otherwise);
      result.push(value);
    }
    return this.zipFun(...result);
  }
};
var ZipAllWithItererator = class extends FastIteratorBase {
  constructor(fillValue, iters, zipFun, streamSourceHelpers2) {
    super();
    this.fillValue = fillValue;
    this.iters = iters;
    this.zipFun = zipFun;
    this.allDone = false;
    this.sources = iters.map(
      (o) => streamSourceHelpers2.fromStreamSource(o)[Symbol.iterator]()
    );
  }
  fastNext(otherwise) {
    if (this.allDone)
      return (0, import_common.OptLazy)(otherwise);
    const result = [];
    let sourceIndex = -1;
    const sources = this.sources;
    const done = Symbol("Done");
    let anyNotDone = false;
    const fillValue = this.fillValue;
    while (++sourceIndex < sources.length) {
      const value = sources[sourceIndex].fastNext(done);
      if (done === value) {
        result.push((0, import_common.OptLazy)(fillValue));
      } else {
        anyNotDone = true;
        result.push(value);
      }
    }
    if (!anyNotDone) {
      this.allDone = true;
      return (0, import_common.OptLazy)(otherwise);
    }
    return this.zipFun(...result);
  }
};
var PrependIterator = class extends FastIteratorBase {
  constructor(source, item) {
    super();
    this.source = source;
    this.item = item;
    this.prependDone = false;
  }
  fastNext(otherwise) {
    if (this.prependDone)
      return this.source.fastNext(otherwise);
    this.prependDone = true;
    return (0, import_common.OptLazy)(this.item);
  }
};
var AppendIterator = class extends FastIteratorBase {
  constructor(source, item) {
    super();
    this.source = source;
    this.item = item;
    this.appendDone = false;
  }
  fastNext(otherwise) {
    if (this.appendDone)
      return (0, import_common.OptLazy)(otherwise);
    const done = Symbol("Done");
    const value = this.source.fastNext(done);
    if (done !== value)
      return value;
    this.appendDone = true;
    return (0, import_common.OptLazy)(this.item);
  }
};
var IndexedIterator = class extends FastIteratorBase {
  constructor(source, startIndex = 0) {
    super();
    this.source = source;
    this.startIndex = startIndex;
    this.index = startIndex;
  }
  fastNext(otherwise) {
    const done = Symbol("Done");
    const value = this.source.fastNext(done);
    if (done === value)
      return (0, import_common.OptLazy)(otherwise);
    return [this.index++, value];
  }
};
var MapIterator = class extends FastIteratorBase {
  constructor(source, mapFun) {
    super();
    this.source = source;
    this.mapFun = mapFun;
    this.state = (0, import_common.TraverseState)();
  }
  fastNext(otherwise) {
    const state = this.state;
    if (state.halted)
      return (0, import_common.OptLazy)(otherwise);
    const done = Symbol("Done");
    const next = this.source.fastNext(done);
    if (done === next)
      return (0, import_common.OptLazy)(otherwise);
    return this.mapFun(next, state.nextIndex());
  }
};
var MapPureIterator = class extends FastIteratorBase {
  constructor(source, mapFun, args) {
    super();
    this.source = source;
    this.mapFun = mapFun;
    this.args = args;
  }
  fastNext(otherwise) {
    const done = Symbol("Done");
    const next = this.source.fastNext(done);
    if (done === next)
      return (0, import_common.OptLazy)(otherwise);
    return this.mapFun(next, ...this.args);
  }
};
var DistinctPreviousIterator = class extends FastIteratorBase {
  constructor(source, eq) {
    super();
    this.source = source;
    this.eq = eq;
    this.previous = [];
  }
  fastNext(otherwise) {
    const done = Symbol("Done");
    let next;
    const source = this.source;
    const previous = this.previous;
    while (done !== (next = source.fastNext(done))) {
      previous.push(next);
      if (previous.length === 1) {
        return next;
      }
      const prev = previous.shift();
      if (!this.eq(prev, next)) {
        return next;
      }
    }
    return (0, import_common.OptLazy)(otherwise);
  }
};
var WindowIterator = class extends FastIteratorBase {
  constructor(source, windowSize, skipAmount, collector) {
    super();
    this.source = source;
    this.windowSize = windowSize;
    this.skipAmount = skipAmount;
    this.collector = collector;
    this.state = /* @__PURE__ */ new Set();
    this.index = 0;
  }
  fastNext(otherwise) {
    const source = this.source;
    const collector = this.collector;
    const windowSize = this.windowSize;
    const skipAmount = this.skipAmount;
    const done = Symbol("Done");
    const state = this.state;
    let next;
    let result = done;
    while (done !== (next = source.fastNext(done))) {
      for (const current of state) {
        current.result = collector.next(
          current.result,
          next,
          current.size,
          current.halt
        );
        current.size++;
        if (current.size >= windowSize || current.halted) {
          result = collector.stateToResult(current.result);
          state.delete(current);
        }
      }
      if (this.index % skipAmount === 0) {
        const newState = {
          result: (0, import_common.OptLazy)(collector.init),
          size: 1,
          halted: false,
          halt() {
            this.halted = true;
          }
        };
        newState.result = collector.next(
          (0, import_common.OptLazy)(collector.init),
          next,
          0,
          newState.halt
        );
        state.add(newState);
      }
      this.index++;
      if (done !== result) {
        return result;
      }
    }
    return (0, import_common.OptLazy)(otherwise);
  }
};

// src/custom/stream-custom.mts
var import_base2 = require("@rimbu/base");
var import_common2 = require("@rimbu/common");
function* yieldObjKeys(obj) {
  for (const key in obj) {
    yield key;
  }
}
function* yieldObjValues(obj) {
  for (const key in obj) {
    yield obj[key];
  }
}
function* yieldObjEntries(obj) {
  for (const key in obj) {
    yield [key, obj[key]];
  }
}
var StreamBase = class {
  stream() {
    return this;
  }
  equals(other, eq = import_common2.Eq.objectIs) {
    const it1 = this[Symbol.iterator]();
    const it2 = fromStreamSource(other)[Symbol.iterator]();
    const done = Symbol("Done");
    while (true) {
      const v1 = it1.fastNext(done);
      const v2 = it2.fastNext(done);
      if (done === v1 || done === v2)
        return Object.is(v1, v2);
      if (!eq(v1, v2))
        return false;
    }
  }
  assumeNonEmpty() {
    return this;
  }
  asNormal() {
    return this;
  }
  prepend(value) {
    return new PrependStream(this, value).assumeNonEmpty();
  }
  append(value) {
    return new AppendStream(this, value).assumeNonEmpty();
  }
  forEach(f, state = (0, import_common2.TraverseState)()) {
    if (state.halted)
      return;
    const done = Symbol("Done");
    let value;
    const iterator = this[Symbol.iterator]();
    const { halt } = state;
    while (!state.halted && done !== (value = iterator.fastNext(done))) {
      f(value, state.nextIndex(), halt);
    }
  }
  forEachPure(f, ...args) {
    const done = Symbol("Done");
    let value;
    const iterator = this[Symbol.iterator]();
    while (done !== (value = iterator.fastNext(done))) {
      f(value, ...args);
    }
  }
  indexed(startIndex = 0) {
    return new IndexedStream(this, startIndex);
  }
  map(mapFun) {
    return new MapStream(this, mapFun);
  }
  mapPure(mapFun, ...args) {
    return new MapPureStream(this, mapFun, args);
  }
  flatMap(flatMapFun) {
    return new FlatMapStream(this, flatMapFun);
  }
  flatZip(flatMapFun) {
    return this.flatMap(
      (value, index, halt) => fromStreamSource(flatMapFun(value, index, halt)).map((result) => [
        value,
        result
      ])
    );
  }
  transform(transformer) {
    return StreamConstructorsImpl.flatten(this.reduceStream(transformer));
  }
  filter(pred) {
    return new FilterStream(this, pred);
  }
  filterNot(pred) {
    return new FilterStream(this, pred, true);
  }
  filterPure(pred, ...args) {
    return new FilterPureStream(this, pred, args);
  }
  filterNotPure(pred, ...args) {
    return new FilterPureStream(this, pred, args, true);
  }
  collect(collectFun) {
    return new CollectStream(this, collectFun);
  }
  first(otherwise) {
    return this[Symbol.iterator]().fastNext(otherwise);
  }
  last(otherwise) {
    const done = Symbol("Done");
    let value;
    let lastValue = done;
    const iterator = this[Symbol.iterator]();
    while (done !== (value = iterator.fastNext(done))) {
      lastValue = value;
    }
    if (done === lastValue)
      return (0, import_common2.OptLazy)(otherwise);
    return lastValue;
  }
  single(otherwise) {
    const iterator = this[Symbol.iterator]();
    const done = Symbol("Done");
    const value = iterator.fastNext(done);
    if (done !== value) {
      if (done === iterator.fastNext(done)) {
        return value;
      }
    }
    return (0, import_common2.OptLazy)(otherwise);
  }
  count() {
    let result = 0;
    const done = Symbol("Done");
    const iterator = this[Symbol.iterator]();
    while (done !== iterator.fastNext(done))
      result++;
    return result;
  }
  countElement(value, eq = import_common2.Eq.objectIs) {
    let result = 0;
    const done = Symbol("Done");
    const iterator = this[Symbol.iterator]();
    let current;
    while (done !== (current = iterator.fastNext(done))) {
      if (eq(value, current))
        result++;
    }
    return result;
  }
  countNotElement(value, eq = import_common2.Eq.objectIs) {
    let result = 0;
    const done = Symbol("Done");
    const iterator = this[Symbol.iterator]();
    let current;
    while (done !== (current = iterator.fastNext(done))) {
      if (!eq(value, current))
        result++;
    }
    return result;
  }
  find(pred, occurrance = 1, otherwise) {
    if (occurrance <= 0)
      return (0, import_common2.OptLazy)(otherwise);
    const done = Symbol("Done");
    const iterator = this[Symbol.iterator]();
    let value;
    let remain = occurrance;
    let index = 0;
    while (done !== (value = iterator.fastNext(done))) {
      if (pred(value, index++) && --remain <= 0)
        return value;
    }
    return (0, import_common2.OptLazy)(otherwise);
  }
  elementAt(index, otherwise) {
    if (index < 0)
      return (0, import_common2.OptLazy)(otherwise);
    const done = Symbol("Done");
    const iterator = this[Symbol.iterator]();
    let value;
    let i = 0;
    while (i <= index && done !== (value = iterator.fastNext(done))) {
      if (i === index)
        return value;
      i++;
    }
    return (0, import_common2.OptLazy)(otherwise);
  }
  indicesWhere(pred) {
    return new IndicesWhereStream(this, pred);
  }
  indicesOf(searchValue, eq = import_common2.Eq.objectIs) {
    return new IndicesOfStream(this, searchValue, eq);
  }
  indexWhere(pred, occurrance = 1) {
    if (occurrance <= 0)
      return void 0;
    const done = Symbol("Done");
    let value;
    const iterator = this[Symbol.iterator]();
    let index = 0;
    let occ = 0;
    while (done !== (value = iterator.fastNext(done))) {
      const i = index++;
      if (pred(value, i)) {
        occ++;
        if (occ >= occurrance)
          return i;
      }
    }
    return void 0;
  }
  indexOf(searchValue, occurrance = 1, eq = import_common2.Eq.objectIs) {
    if (occurrance <= 0)
      return void 0;
    const done = Symbol("Done");
    let value;
    const iterator = this[Symbol.iterator]();
    let index = 0;
    let occ = 0;
    while (done !== (value = iterator.fastNext(done))) {
      const i = index++;
      if (eq(value, searchValue)) {
        occ++;
        if (occ >= occurrance)
          return i;
      }
    }
    return void 0;
  }
  some(pred) {
    return void 0 !== this.indexWhere(pred);
  }
  every(pred) {
    const iterator = this[Symbol.iterator]();
    const done = Symbol("Done");
    let value;
    let index = 0;
    while (done !== (value = iterator.fastNext(done))) {
      if (!pred(value, index++))
        return false;
    }
    return true;
  }
  contains(searchValue, amount = 1, eq) {
    if (amount <= 0)
      return true;
    return void 0 !== this.indexOf(searchValue, amount, eq);
  }
  containsSlice(source, eq = import_common2.Eq.objectIs) {
    const iterator = this[Symbol.iterator]();
    const sourceStream = fromStreamSource(source);
    let sourceIterator = sourceStream[Symbol.iterator]();
    const done = Symbol("Done");
    while (true) {
      const sourceValue = sourceIterator.fastNext(done);
      if (done === sourceValue)
        return true;
      const value = iterator.fastNext(done);
      if (done === value)
        return false;
      if (!eq(sourceValue, value)) {
        sourceIterator = sourceStream[Symbol.iterator]();
      }
    }
  }
  takeWhile(pred) {
    return new TakeWhileStream(this, pred);
  }
  dropWhile(pred) {
    return new DropWhileStream(this, pred);
  }
  take(amount) {
    if (amount <= 0)
      return emptyStream;
    return new TakeStream(this, amount);
  }
  drop(amount) {
    if (amount <= 0)
      return this;
    return new DropStream(this, amount);
  }
  repeat(amount) {
    if (void 0 !== amount && amount <= 1)
      return this;
    return new FromStream(() => new RepeatIterator(this, amount));
  }
  concat(...others) {
    if (others.every(isEmptyStreamSourceInstance)) {
      return this.assumeNonEmpty();
    }
    return new ConcatStream(this, others).assumeNonEmpty();
  }
  min(otherwise) {
    return this.minBy(import_common2.Comp.defaultComp().compare, otherwise);
  }
  minBy(compare, otherwise) {
    const done = Symbol("Done");
    const iterator = this[Symbol.iterator]();
    let result = iterator.fastNext(done);
    if (done === result)
      return (0, import_common2.OptLazy)(otherwise);
    let value;
    while (done !== (value = iterator.fastNext(done))) {
      if (compare(value, result) < 0)
        result = value;
    }
    return result;
  }
  max(otherwise) {
    return this.maxBy(import_common2.Comp.defaultComp().compare, otherwise);
  }
  maxBy(compare, otherwise) {
    const done = Symbol("Done");
    const iterator = this[Symbol.iterator]();
    let result = iterator.fastNext(done);
    if (done === result)
      return (0, import_common2.OptLazy)(otherwise);
    let value;
    while (done !== (value = iterator.fastNext(done))) {
      if (compare(value, result) > 0)
        result = value;
    }
    return result;
  }
  intersperse(sep) {
    if (isEmptyStreamSourceInstance(sep))
      return this;
    const sepStream = fromStreamSource(sep);
    return new IntersperseStream(this, sepStream);
  }
  join({
    sep = "",
    start = "",
    end = "",
    valueToString = String,
    ifEmpty = void 0
  } = {}) {
    const done = Symbol("Done");
    const iterator = this[Symbol.iterator]();
    let value = iterator.fastNext(done);
    if (done === value) {
      if (void 0 !== ifEmpty)
        return ifEmpty;
      return start.concat(end);
    }
    let result = start.concat(valueToString(value));
    while (done !== (value = iterator.fastNext(done))) {
      result = result.concat(sep, valueToString(value));
    }
    return result.concat(end);
  }
  mkGroup({
    sep = emptyStream,
    start = emptyStream,
    end = emptyStream
  } = {}) {
    return fromStreamSource(start).concat(this.intersperse(sep), end);
  }
  splitWhere(pred) {
    return new SplitWhereStream(this, pred);
  }
  splitOn(sepElem, eq = import_common2.Eq.objectIs) {
    return new SplitOnStream(this, sepElem, eq);
  }
  distinctPrevious(eq = import_common2.Eq.objectIs) {
    return new DistinctPreviousStream(this, eq);
  }
  window(windowSize, skipAmount = windowSize, collector = import_common2.Reducer.toArray()) {
    return new WindowStream(this, windowSize, skipAmount, collector);
  }
  fold(init, next) {
    return this.reduce(import_common2.Reducer.createOutput(init, next));
  }
  foldStream(init, next) {
    return this.reduceStream(import_common2.Reducer.createOutput(init, next));
  }
  reduce(reducer) {
    let halted = false;
    function halt() {
      halted = true;
    }
    let index = 0;
    const next = reducer.next;
    let state = (0, import_common2.OptLazy)(reducer.init);
    const done = Symbol("Done");
    let value;
    const iter = this[Symbol.iterator]();
    while (!halted && done !== (value = iter.fastNext(done))) {
      state = next(state, value, index++, halt);
    }
    return reducer.stateToResult(state);
  }
  reduceStream(reducer) {
    return new ReduceStream(this, reducer);
  }
  reduceAll(...reducers) {
    const state = reducers.map((d) => (0, import_common2.OptLazy)(d.init));
    const iteratorsDone = state.map(
      (_, i) => () => {
        iteratorsDone[i] = null;
      }
    );
    const iter = this[Symbol.iterator]();
    const length = reducers.length;
    const done = Symbol("Done");
    let value;
    let index = 0;
    while (done !== (value = iter.fastNext(done))) {
      let i = -1;
      let anyNotDone = false;
      while (++i < length) {
        const halt = iteratorsDone[i];
        if (null !== halt) {
          anyNotDone = true;
          state[i] = reducers[i].next(state[i], value, index, halt);
        }
      }
      if (!anyNotDone)
        break;
      index++;
    }
    return state.map((s, i) => reducers[i].stateToResult(s));
  }
  reduceAllStream(...reducers) {
    return new ReduceAllStream(this, reducers);
  }
  toArray() {
    const iterator = this[Symbol.iterator]();
    const result = [];
    const done = Symbol("Done");
    let value;
    while (done !== (value = iterator.fastNext(done))) {
      result.push(value);
    }
    return result;
  }
  toString() {
    return `Stream(...<potentially empty>)`;
  }
  toJSON() {
    return {
      dataType: "Stream",
      value: this.toArray()
    };
  }
};
var _a;
var FromStream = class extends StreamBase {
  constructor(createIterator) {
    super();
    this[_a] = void 0;
    this[Symbol.iterator] = createIterator;
  }
};
_a = Symbol.iterator;
var PrependStream = class extends StreamBase {
  constructor(source, item) {
    super();
    this.source = source;
    this.item = item;
  }
  [Symbol.iterator]() {
    return new PrependIterator(this.source[Symbol.iterator](), this.item);
  }
  first() {
    return (0, import_common2.OptLazy)(this.item);
  }
  last() {
    return this.source.last(this.item);
  }
  count() {
    return this.source.count() + 1;
  }
  forEach(f, state = (0, import_common2.TraverseState)()) {
    if (state.halted)
      return;
    f((0, import_common2.OptLazy)(this.item), state.nextIndex(), state.halt);
    if (state.halted)
      return;
    this.source.forEach(f, state);
  }
};
var AppendStream = class extends StreamBase {
  constructor(source, item) {
    super();
    this.source = source;
    this.item = item;
  }
  [Symbol.iterator]() {
    return new AppendIterator(this.source[Symbol.iterator](), this.item);
  }
  first() {
    return this.source.first(this.item);
  }
  last() {
    return (0, import_common2.OptLazy)(this.item);
  }
  count() {
    return this.source.count() + 1;
  }
  forEach(f, state = (0, import_common2.TraverseState)()) {
    if (state.halted)
      return;
    this.source.forEach(f, state);
    if (state.halted)
      return;
    f((0, import_common2.OptLazy)(this.item), state.nextIndex(), state.halt);
  }
};
var IndexedStream = class extends StreamBase {
  constructor(source, startIndex) {
    super();
    this.source = source;
    this.startIndex = startIndex;
  }
  [Symbol.iterator]() {
    return new IndexedIterator(
      this.source[Symbol.iterator](),
      this.startIndex
    );
  }
  count() {
    return this.source.count();
  }
};
var MapStream = class _MapStream extends StreamBase {
  constructor(source, mapFun) {
    super();
    this.source = source;
    this.mapFun = mapFun;
  }
  [Symbol.iterator]() {
    return new MapIterator(this.source[Symbol.iterator](), this.mapFun);
  }
  first(otherwise) {
    const done = Symbol("Done");
    const value = this.source.first(done);
    if (done === value)
      return (0, import_common2.OptLazy)(otherwise);
    return this.mapFun(value, 0);
  }
  last(otherwise) {
    const done = Symbol("Done");
    const value = this.source.last(done);
    if (done === value)
      return (0, import_common2.OptLazy)(otherwise);
    return this.mapFun(value, 0);
  }
  count() {
    return this.source.count();
  }
  elementAt(index, otherwise) {
    const done = Symbol("Done");
    const value = this.source.elementAt(index, done);
    if (done === value)
      return (0, import_common2.OptLazy)(otherwise);
    return this.mapFun(value, index);
  }
  map(mapFun) {
    return new _MapStream(
      this.source,
      (value, index) => mapFun(this.mapFun(value, index), index)
    );
  }
};
var MapPureStream = class extends StreamBase {
  constructor(source, mapFun, args) {
    super();
    this.source = source;
    this.mapFun = mapFun;
    this.args = args;
  }
  [Symbol.iterator]() {
    return new MapPureIterator(
      this.source[Symbol.iterator](),
      this.mapFun,
      this.args
    );
  }
  first(otherwise) {
    const done = Symbol("Done");
    const value = this.source.first(done);
    if (done === value)
      return (0, import_common2.OptLazy)(otherwise);
    return this.mapFun(value, ...this.args);
  }
  last(otherwise) {
    const done = Symbol("Done");
    const value = this.source.last(done);
    if (done === value)
      return (0, import_common2.OptLazy)(otherwise);
    return this.mapFun(value, ...this.args);
  }
  count() {
    return this.source.count();
  }
  elementAt(index, otherwise) {
    const done = Symbol("Done");
    const value = this.source.elementAt(index, done);
    if (done === value)
      return (0, import_common2.OptLazy)(otherwise);
    return this.mapFun(value, ...this.args);
  }
};
var FlatMapStream = class extends StreamBase {
  constructor(source, flatmapFun) {
    super();
    this.source = source;
    this.flatmapFun = flatmapFun;
  }
  [Symbol.iterator]() {
    return new FlatMapIterator(
      this.source,
      this.flatmapFun,
      streamSourceHelpers
    );
  }
};
var ConcatStream = class _ConcatStream extends StreamBase {
  constructor(source, otherSources) {
    super();
    this.source = source;
    this.otherSources = otherSources;
  }
  [Symbol.iterator]() {
    return new ConcatIterator(
      this.source,
      this.otherSources,
      streamSourceHelpers
    );
  }
  forEach(f, state = (0, import_common2.TraverseState)()) {
    if (state.halted)
      return;
    this.source.forEach(f, state);
    let sourceIndex = -1;
    const sources = this.otherSources;
    const length = sources.length;
    while (!state.halted && ++sourceIndex < length) {
      const source = sources[sourceIndex];
      if (!isEmptyStreamSourceInstance(source)) {
        fromStreamSource(source).forEach(f, state);
      }
    }
  }
  last(otherwise) {
    const sources = this.otherSources;
    let sourceIndex = sources.length;
    while (--sourceIndex >= 0) {
      const source = sources[sourceIndex];
      if (!isEmptyStreamSourceInstance(source)) {
        const done = Symbol("Done");
        const value = fromStreamSource(source).last(done);
        if (done !== value)
          return value;
      }
    }
    return this.source.last(otherwise);
  }
  count() {
    let result = this.source.count();
    const sources = this.otherSources;
    const length = sources.length;
    let sourceIndex = -1;
    while (++sourceIndex < length) {
      const source = sources[sourceIndex];
      if (!isEmptyStreamSourceInstance(source)) {
        result += fromStreamSource(source).count();
      }
    }
    return result;
  }
  concat(...others2) {
    return new _ConcatStream(
      this.source,
      this.otherSources.concat(others2)
    );
  }
  toArray() {
    let result = this.source.toArray();
    let sourceIndex = -1;
    const sources = this.otherSources;
    const length = sources.length;
    while (++sourceIndex < length) {
      const source = sources[sourceIndex];
      if (!isEmptyStreamSourceInstance(source)) {
        result = result.concat(fromStreamSource(source).toArray());
      }
    }
    return result;
  }
};
var FilterStream = class _FilterStream extends StreamBase {
  constructor(source, pred, invert = false) {
    super();
    this.source = source;
    this.pred = pred;
    this.invert = invert;
  }
  [Symbol.iterator]() {
    return new FilterIterator(
      this.source[Symbol.iterator](),
      this.pred,
      this.invert
    );
  }
  filter(pred) {
    return new _FilterStream(
      this.source,
      (v, i, halt) => this.pred(v, i, halt) && pred(v, i, halt)
    );
  }
};
var FilterPureStream = class extends StreamBase {
  constructor(source, pred, args, invert = false) {
    super();
    this.source = source;
    this.pred = pred;
    this.args = args;
    this.invert = invert;
  }
  [Symbol.iterator]() {
    return new FilterPureIterator(
      this.source[Symbol.iterator](),
      this.pred,
      this.args,
      this.invert
    );
  }
};
var CollectStream = class extends StreamBase {
  constructor(source, collectFun) {
    super();
    this.source = source;
    this.collectFun = collectFun;
  }
  [Symbol.iterator]() {
    return new CollectIterator(
      this.source[Symbol.iterator](),
      this.collectFun
    );
  }
};
var IndicesWhereStream = class extends StreamBase {
  constructor(source, pred) {
    super();
    this.source = source;
    this.pred = pred;
  }
  [Symbol.iterator]() {
    return new IndicesWhereIterator(
      this.source[Symbol.iterator](),
      this.pred
    );
  }
};
var IndicesOfStream = class extends StreamBase {
  constructor(source, searchValue, eq) {
    super();
    this.source = source;
    this.searchValue = searchValue;
    this.eq = eq;
  }
  [Symbol.iterator]() {
    return new IndicesOfIterator(
      this.source[Symbol.iterator](),
      this.searchValue,
      this.eq
    );
  }
};
var TakeWhileStream = class extends StreamBase {
  constructor(source, pred) {
    super();
    this.source = source;
    this.pred = pred;
  }
  [Symbol.iterator]() {
    return new TakeWhileIterator(this.source[Symbol.iterator](), this.pred);
  }
};
var DropWhileStream = class extends StreamBase {
  constructor(source, pred) {
    super();
    this.source = source;
    this.pred = pred;
  }
  [Symbol.iterator]() {
    return new DropWhileIterator(this.source[Symbol.iterator](), this.pred);
  }
};
var TakeStream = class extends StreamBase {
  constructor(source, amount) {
    super();
    this.source = source;
    this.amount = amount;
  }
  [Symbol.iterator]() {
    return new TakeIterator(this.source[Symbol.iterator](), this.amount);
  }
  take(amount) {
    if (amount === this.amount)
      return this;
    return this.source.take(amount);
  }
};
var DropStream = class extends StreamBase {
  constructor(source, amount) {
    super();
    this.source = source;
    this.amount = amount;
  }
  [Symbol.iterator]() {
    return new DropIterator(this.source[Symbol.iterator](), this.amount);
  }
  drop(amount) {
    if (amount <= 0)
      return this;
    return this.source.drop(this.amount + amount);
  }
};
var IntersperseStream = class extends StreamBase {
  constructor(source, sepStream) {
    super();
    this.source = source;
    this.sepStream = sepStream;
  }
  [Symbol.iterator]() {
    return new IntersperseIterator(
      this.source[Symbol.iterator](),
      this.sepStream
    );
  }
};
var SplitWhereStream = class extends StreamBase {
  constructor(source, pred) {
    super();
    this.source = source;
    this.pred = pred;
  }
  [Symbol.iterator]() {
    return new SplitWhereIterator(this.source[Symbol.iterator](), this.pred);
  }
};
var SplitOnStream = class extends StreamBase {
  constructor(source, sepElem, eq) {
    super();
    this.source = source;
    this.sepElem = sepElem;
    this.eq = eq;
  }
  [Symbol.iterator]() {
    return new SplitOnIterator(
      this.source[Symbol.iterator](),
      this.sepElem,
      this.eq
    );
  }
};
var ReduceStream = class extends StreamBase {
  constructor(source, reducerDef) {
    super();
    this.source = source;
    this.reducerDef = reducerDef;
  }
  [Symbol.iterator]() {
    return new ReduceIterator(
      this.source[Symbol.iterator](),
      this.reducerDef
    );
  }
};
var ReduceAllStream = class extends StreamBase {
  constructor(source, reducers) {
    super();
    this.source = source;
    this.reducers = reducers;
  }
  [Symbol.iterator]() {
    return new ReduceAllIterator(
      this.source[Symbol.iterator](),
      this.reducers
    );
  }
};
var SlowIteratorAdapter = class {
  constructor(source) {
    this.source = source;
  }
  next() {
    return this.source.next();
  }
  fastNext(otherwise) {
    const result = this.source.next();
    if (result.done)
      return (0, import_common2.OptLazy)(otherwise);
    return result.value;
  }
};
var FromIterable = class extends StreamBase {
  constructor(iterable) {
    super();
    this.iterable = iterable;
  }
  [Symbol.iterator]() {
    const iterator = this.iterable[Symbol.iterator]();
    if (isFastIterator(iterator))
      return iterator;
    return new SlowIteratorAdapter(iterator);
  }
};
var EmptyStream = class extends StreamBase {
  [Symbol.iterator]() {
    return emptyFastIterator;
  }
  stream() {
    return this;
  }
  assumeNonEmpty() {
    import_base2.RimbuError.throwEmptyCollectionAssumedNonEmptyError();
  }
  equals(other) {
    const done = Symbol("Done");
    return done === fromStreamSource(other)[Symbol.iterator]().fastNext(done);
  }
  prepend(value) {
    return StreamConstructorsImpl.of((0, import_common2.OptLazy)(value));
  }
  append(value) {
    return StreamConstructorsImpl.of((0, import_common2.OptLazy)(value));
  }
  forEach() {
  }
  forEachPure() {
  }
  indexed() {
    return this;
  }
  map() {
    return this;
  }
  mapPure() {
    return this;
  }
  flatMap() {
    return this;
  }
  flatZip() {
    return this;
  }
  transform(transformer) {
    return StreamConstructorsImpl.from(
      transformer.stateToResult((0, import_common2.OptLazy)(transformer.init))
    );
  }
  filter() {
    return this;
  }
  filterNot() {
    return this;
  }
  filterPure() {
    return this;
  }
  filterNotPure() {
    return this;
  }
  collect() {
    return this;
  }
  first(otherwise) {
    return (0, import_common2.OptLazy)(otherwise);
  }
  last(otherwise) {
    return (0, import_common2.OptLazy)(otherwise);
  }
  single(otherwise) {
    return (0, import_common2.OptLazy)(otherwise);
  }
  count() {
    return 0;
  }
  countElement() {
    return 0;
  }
  countNotElement() {
    return 0;
  }
  find(pred, occurrance, otherwise) {
    return (0, import_common2.OptLazy)(otherwise);
  }
  elementAt(index, otherwise) {
    return (0, import_common2.OptLazy)(otherwise);
  }
  indicesWhere() {
    return this;
  }
  indicesOf() {
    return this;
  }
  indexWhere() {
    return void 0;
  }
  indexOf() {
    return void 0;
  }
  some() {
    return false;
  }
  every() {
    return true;
  }
  contains() {
    return false;
  }
  containsSlice() {
    return false;
  }
  takeWhile() {
    return this;
  }
  dropWhile() {
    return this;
  }
  take() {
    return this;
  }
  drop() {
    return this;
  }
  repeat() {
    return this;
  }
  concat(...others) {
    if (others.every(isEmptyStreamSourceInstance))
      return this;
    const [source1, source2, ...sources] = others;
    if (void 0 === source2)
      return source1;
    return fromStreamSource(source1).concat(source2, ...sources);
  }
  min(otherwise) {
    return (0, import_common2.OptLazy)(otherwise);
  }
  minBy(compare, otherwise) {
    return (0, import_common2.OptLazy)(otherwise);
  }
  max(otherwise) {
    return (0, import_common2.OptLazy)(otherwise);
  }
  maxBy(compare, otherwise) {
    return (0, import_common2.OptLazy)(otherwise);
  }
  intersperse() {
    return this;
  }
  join({ start = "", end = "", ifEmpty = void 0 } = {}) {
    if (void 0 !== ifEmpty)
      return ifEmpty;
    return start.concat(end);
  }
  mkGroup({
    start = emptyStream,
    end = emptyStream
  } = {}) {
    return fromStreamSource(start).concat(end);
  }
  splitOn() {
    return this;
  }
  splitWhere() {
    return this;
  }
  distinctPrevious() {
    return this;
  }
  window() {
    return this;
  }
  fold(init) {
    return (0, import_common2.OptLazy)(init);
  }
  foldStream() {
    return this;
  }
  reduce(reducer) {
    return reducer.stateToResult((0, import_common2.OptLazy)(reducer.init));
  }
  reduceStream() {
    return this;
  }
  reduceAll(...reducers) {
    return reducers.map((p) => p.stateToResult((0, import_common2.OptLazy)(p.init)));
  }
  reduceAllStream() {
    return this;
  }
  toArray() {
    return [];
  }
  toString() {
    return `Stream(<empty>)`;
  }
  toJSON() {
    return {
      dataType: "Stream",
      value: []
    };
  }
};
var ArrayStream = class _ArrayStream extends StreamBase {
  constructor(array, startIndex = 0, endIndex = array.length - 1, reversed = false) {
    super();
    this.array = array;
    this.startIndex = startIndex;
    this.endIndex = endIndex;
    this.reversed = reversed;
    this.length = endIndex - startIndex + 1;
  }
  [Symbol.iterator]() {
    if (!this.reversed) {
      return new ArrayIterator(this.array, this.startIndex, this.endIndex);
    }
    return new ArrayReverseIterator(this.array, this.startIndex, this.endIndex);
  }
  forEach(f, state = (0, import_common2.TraverseState)()) {
    const startIndex = this.startIndex;
    const endIndex = this.endIndex;
    const array = this.array;
    const { halt } = state;
    if (!this.reversed) {
      let i = this.startIndex - 1;
      while (!state.halted && ++i <= endIndex) {
        f(array[i], state.nextIndex(), halt);
      }
    } else {
      let i = endIndex + 1;
      while (!state.halted && --i >= startIndex) {
        f(array[i], state.nextIndex(), halt);
      }
    }
  }
  first(otherwise) {
    if (this.length <= 0)
      return (0, import_common2.OptLazy)(otherwise);
    if (!this.reversed)
      return this.array[this.startIndex];
    return this.array[this.endIndex];
  }
  last(otherwise) {
    if (this.length <= 0)
      return (0, import_common2.OptLazy)(otherwise);
    if (!this.reversed)
      return this.array[this.endIndex];
    return this.array[this.startIndex];
  }
  count() {
    return this.endIndex - this.startIndex + 1;
  }
  find(pred, occurrance = 1, otherwise) {
    const startIndex = this.startIndex;
    const endIndex = this.endIndex;
    const array = this.array;
    let remain = occurrance;
    let index = 0;
    if (!this.reversed) {
      let i = startIndex - 1;
      while (++i <= endIndex) {
        const value = array[i];
        if (pred(value, index++) && --remain <= 0)
          return value;
      }
    } else {
      let i = endIndex + 1;
      while (--i >= startIndex) {
        const value = array[i];
        if (pred(value, index++) && --remain <= 0)
          return value;
      }
    }
    return (0, import_common2.OptLazy)(otherwise);
  }
  elementAt(index, otherwise) {
    if (index < 0 || index >= this.length)
      return (0, import_common2.OptLazy)(otherwise);
    if (!this.reversed)
      return this.array[index + this.startIndex];
    return this.array[this.endIndex - index];
  }
  some(pred) {
    const startIndex = this.startIndex;
    const endIndex = this.endIndex;
    const array = this.array;
    let index = 0;
    if (!this.reversed) {
      let i = this.startIndex - 1;
      while (++i <= endIndex) {
        const value = array[i];
        if (pred(value, index++))
          return true;
      }
    } else {
      let i = this.endIndex + 1;
      while (--i >= startIndex) {
        const value = array[i];
        if (pred(value, index++))
          return true;
      }
    }
    return false;
  }
  every(pred) {
    const startIndex = this.startIndex;
    const endIndex = this.endIndex;
    const array = this.array;
    let index = 0;
    if (!this.reversed) {
      let i = startIndex - 1;
      while (++i <= endIndex) {
        const value = array[i];
        if (!pred(value, index++))
          return false;
      }
    } else {
      let i = endIndex + 1;
      while (--i >= startIndex) {
        const value = array[i];
        if (!pred(value, index++))
          return false;
      }
    }
    return true;
  }
  indexOf(searchValue, occurrance = 1, eq = Object.is) {
    if (occurrance <= 0)
      return void 0;
    let remain = occurrance;
    const startIndex = this.startIndex;
    const endIndex = this.endIndex;
    const array = this.array;
    if (!this.reversed) {
      let i = startIndex - 1;
      while (++i <= endIndex) {
        if (eq(array[i], searchValue) && --remain <= 0)
          return i - startIndex;
      }
    } else {
      let i = endIndex + 1;
      while (--i >= startIndex) {
        if (eq(array[i], searchValue) && --remain <= 0)
          return endIndex - i;
      }
    }
    return void 0;
  }
  contains(searchValue, amount = 1, eq = Object.is) {
    if (amount <= 0)
      return true;
    return void 0 !== this.indexOf(searchValue, amount, eq);
  }
  take(amount) {
    if (amount <= 0)
      return emptyStream;
    if (amount >= this.length)
      return this;
    if (!this.reversed) {
      return new _ArrayStream(
        this.array,
        this.startIndex,
        this.startIndex + amount - 1,
        this.reversed
      );
    }
    return new _ArrayStream(
      this.array,
      this.endIndex - (amount - 1),
      this.endIndex,
      this.reversed
    );
  }
  drop(amount) {
    if (amount <= 0)
      return this;
    if (amount >= this.length)
      return emptyStream;
    if (!this.reversed) {
      return new _ArrayStream(
        this.array,
        this.startIndex + amount,
        this.endIndex,
        this.reversed
      );
    }
    return new _ArrayStream(
      this.array,
      this.startIndex,
      this.endIndex - amount,
      this.reversed
    );
  }
  toArray() {
    const array = this.array;
    if (typeof array === "string") {
      return super.toArray();
    }
    if (this.reversed)
      return super.toArray();
    return array.slice(this.startIndex, this.endIndex + 1);
  }
};
var AlwaysStream = class extends StreamBase {
  constructor(value) {
    super();
    this.value = value;
  }
  [Symbol.iterator]() {
    return new AlwaysIterator(this.value);
  }
  first() {
    return this.value;
  }
  append() {
    return this;
  }
  forEach(f, state) {
    const s = state ?? (0, import_common2.TraverseState)();
    const value = this.value;
    while (!s.halted) {
      f(value, s.nextIndex(), s.halt);
    }
  }
  last() {
    return this.value;
  }
  elementAt() {
    return this.value;
  }
  repeat() {
    return this;
  }
  concat() {
    return this.assumeNonEmpty();
  }
  min() {
    return this.value;
  }
  minBy() {
    return this.value;
  }
  max() {
    return this.value;
  }
  maxBy() {
    return this.value;
  }
};
var MapApplyStream = class extends StreamBase {
  constructor(source, f, args) {
    super();
    this.source = source;
    this.f = f;
    this.args = args;
  }
  [Symbol.iterator]() {
    return new MapApplyIterator(
      this.source,
      this.f,
      this.args,
      streamSourceHelpers
    );
  }
};
var FilterApplyStream = class extends StreamBase {
  constructor(source, pred, args, invert = false) {
    super();
    this.source = source;
    this.pred = pred;
    this.args = args;
    this.invert = invert;
  }
  [Symbol.iterator]() {
    return new FilterApplyIterator(
      this.source,
      this.pred,
      this.args,
      this.invert,
      streamSourceHelpers
    );
  }
};
var RangeStream = class extends StreamBase {
  constructor(start, end, delta = 1) {
    super();
    this.start = start;
    this.end = end;
    this.delta = delta;
  }
  [Symbol.iterator]() {
    if (this.delta >= 0) {
      return new RangeUpIterator(this.start, this.end, this.delta);
    }
    return new RangeDownIterator(this.start, this.end, this.delta);
  }
};
var DistinctPreviousStream = class extends StreamBase {
  constructor(source, eq) {
    super();
    this.source = source;
    this.eq = eq;
  }
  [Symbol.iterator]() {
    return new DistinctPreviousIterator(
      this.source[Symbol.iterator](),
      this.eq
    );
  }
};
var WindowStream = class extends StreamBase {
  constructor(source, windowSize, skipAmount, collector) {
    super();
    this.source = source;
    this.windowSize = windowSize;
    this.skipAmount = skipAmount;
    this.collector = collector;
  }
  [Symbol.iterator]() {
    return new WindowIterator(
      this.source[Symbol.iterator](),
      this.windowSize,
      this.skipAmount,
      this.collector
    );
  }
};
var emptyStream = Object.freeze(new EmptyStream());
function isStream(obj) {
  return obj instanceof StreamBase;
}
var fromStreamSource = (source) => {
  if (void 0 === source || isEmptyStreamSourceInstance(source))
    return emptyStream;
  if (isStream(source))
    return source;
  if (typeof source === "object" && `stream` in source)
    return source.stream();
  if (Array.isArray(source)) {
    if (source.length <= 0)
      return emptyStream;
    return new ArrayStream(source);
  }
  return new FromIterable(source);
};
function isEmptyStreamSourceInstance(source) {
  if (source === "")
    return true;
  if (typeof source === "object") {
    if (source === emptyStream)
      return true;
    if (`length` in source && source.length === 0)
      return true;
    if (`size` in source && source.size === 0)
      return true;
    if (`isEmpty` in source && source.isEmpty === true)
      return true;
  }
  return false;
}
var streamSourceHelpers = {
  fromStreamSource,
  isEmptyStreamSourceInstance
};
var StreamConstructorsImpl = Object.freeze({
  empty() {
    return emptyStream;
  },
  of(...values) {
    return fromStreamSource(values);
  },
  from(...sources) {
    const [first, ...rest] = sources;
    if (rest.length <= 0) {
      return fromStreamSource(first);
    }
    const [rest1, ...restOther] = rest;
    return fromStreamSource(first).concat(rest1, ...restOther);
  },
  fromArray(array, range, reversed = false) {
    if (array.length === 0)
      return emptyStream;
    if (void 0 === range) {
      return new ArrayStream(array, void 0, void 0, reversed);
    }
    const result = import_common2.IndexRange.getIndicesFor(range, array.length);
    if (result === "empty") {
      return emptyStream;
    }
    if (result === "all") {
      return new ArrayStream(array, void 0, void 0, reversed);
    }
    return new ArrayStream(array, result[0], result[1], reversed);
  },
  fromObjectKeys(obj) {
    return StreamConstructorsImpl.from(yieldObjKeys(obj));
  },
  fromObjectValues(obj) {
    return StreamConstructorsImpl.from(yieldObjValues(obj));
  },
  fromObject(obj) {
    return StreamConstructorsImpl.from(yieldObjEntries(obj));
  },
  fromString(source, range, reversed = false) {
    return StreamConstructorsImpl.fromArray(
      source,
      range,
      reversed
    );
  },
  always(value) {
    return new AlwaysStream(value);
  },
  applyForEach(source, f, ...args) {
    const iter = StreamConstructorsImpl.from(source)[Symbol.iterator]();
    const done = Symbol();
    let values;
    while (done !== (values = iter.fastNext(done))) {
      f(...values, ...args);
    }
  },
  applyMap(source, mapFun, ...args) {
    return new MapApplyStream(source, mapFun, args);
  },
  applyFilter(source, pred, ...args) {
    return new FilterApplyStream(source, pred, args);
  },
  range(range, delta = 1) {
    if (void 0 !== range.amount) {
      if (range.amount <= 0)
        return emptyStream;
      let startIndex2 = 0;
      if (void 0 !== range.start) {
        if (Array.isArray(range.start)) {
          startIndex2 = range.start[0];
          if (!range.start[1])
            startIndex2++;
        } else
          startIndex2 = range.start;
      }
      const endIndex2 = startIndex2 + range.amount - 1;
      return new RangeStream(startIndex2, endIndex2, delta);
    }
    const { start, end } = import_common2.Range.getNormalizedRange(range);
    let startIndex = 0;
    let endIndex = void 0;
    if (void 0 !== start) {
      startIndex = start[0];
      if (!start[1])
        startIndex++;
    }
    if (void 0 !== end) {
      endIndex = end[0];
      if (!end[1])
        endIndex--;
    }
    if (void 0 !== endIndex) {
      if (delta > 0 && endIndex < startIndex)
        return emptyStream;
      else if (delta < 0 && startIndex <= endIndex)
        return emptyStream;
    }
    return new RangeStream(startIndex, endIndex, delta);
  },
  random() {
    return new FromStream(
      () => new RandomIterator()
    );
  },
  randomInt(min, max) {
    if (min >= max)
      import_common2.ErrBase.msg("min should be smaller than max");
    return new FromStream(
      () => new RandomIntIterator(min, max)
    );
  },
  unfold(init, next) {
    return new FromStream(
      () => new UnfoldIterator(init, next)
    );
  },
  zipWith(...sources) {
    return (zipFun) => {
      if (sources.some(isEmptyStreamSourceInstance)) {
        return emptyStream;
      }
      return new FromStream(
        () => new ZipWithIterator(sources, zipFun, streamSourceHelpers)
      );
    };
  },
  zip(...sources) {
    return StreamConstructorsImpl.zipWith(...sources)(Array);
  },
  zipAllWith(...sources) {
    return (fillValue, zipFun) => {
      if (sources.every(isEmptyStreamSourceInstance)) {
        return emptyStream;
      }
      return new FromStream(
        () => new ZipAllWithItererator(
          fillValue,
          sources,
          zipFun,
          streamSourceHelpers
        )
      );
    };
  },
  zipAll(fillValue, ...sources) {
    return StreamConstructorsImpl.zipAllWith(...sources)(
      fillValue,
      Array
    );
  },
  flatten(source) {
    return fromStreamSource(source).flatMap((s) => s);
  },
  unzip(source, length) {
    if (isEmptyStreamSourceInstance(source)) {
      return StreamConstructorsImpl.of(emptyStream).repeat(length).toArray();
    }
    const result = [];
    let i = -1;
    while (++i < length) {
      const index = i;
      result[i] = source.map((t) => t[index]);
    }
    return result;
  }
});

// src/main/interface.mts
var Stream = StreamConstructorsImpl;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Stream
});

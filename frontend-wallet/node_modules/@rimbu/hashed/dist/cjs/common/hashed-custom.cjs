"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/common/hashed-custom.mts
var hashed_custom_exports = {};
__export(hashed_custom_exports, {
  BlockBuilderBase: () => BlockBuilderBase,
  CollisionBuilderBase: () => CollisionBuilderBase
});
module.exports = __toCommonJS(hashed_custom_exports);
var import_common = require("@rimbu/common");
var import_list = require("@rimbu/list");
var BlockBuilderBase = class {
  get isEmpty() {
    return this.size === 0;
  }
  forEach(f, state = (0, import_common.TraverseState)()) {
    if (this.isEmpty || state.halted)
      return;
    if (void 0 !== this.source)
      return this.source.forEach(f, state);
    const { halt } = state;
    if (void 0 !== this._entries) {
      for (const key in this._entries) {
        f(this._entries[key], state.nextIndex(), halt);
        if (state.halted)
          break;
      }
    }
    if (void 0 !== this._entrySets) {
      for (const key in this._entrySets) {
        this._entrySets[key].forEach(f, state);
        if (state.halted)
          break;
      }
    }
  }
};
var CollisionBuilderBase = class {
  get size() {
    if (void 0 !== this.source)
      return this.source.size;
    return this.entries.length;
  }
  get entries() {
    if (void 0 === this._entries) {
      if (void 0 !== this.source) {
        this._entries = this.source.entries.toBuilder();
      } else {
        this._entries = import_list.List.builder();
      }
    }
    return this._entries;
  }
  forEach(f, state = (0, import_common.TraverseState)()) {
    if (state.halted)
      return;
    if (void 0 !== this.source) {
      return this.source.forEach(f, state);
    }
    this.entries.forEach(f, state);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BlockBuilderBase,
  CollisionBuilderBase
});

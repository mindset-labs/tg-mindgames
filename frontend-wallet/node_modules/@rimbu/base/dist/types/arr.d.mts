import { Update, TraverseState, type ArrayNonEmpty } from '@rimbu/common';
export declare function append<T>(array: readonly T[], value: T): ArrayNonEmpty<T>;
export declare function concat<T>(first: readonly T[], second: readonly T[]): readonly T[];
export declare function reverse<T>(array: readonly T[], start?: number, end?: number): T[];
export declare function forEach<T>(array: readonly T[], f: (value: T, index: number, halt: () => void) => void, state?: TraverseState, reversed?: boolean): void;
export declare function map<T, R>(array: readonly T[], f: (value: T, index: number) => R, indexOffset?: number): R[];
export declare function reverseMap<T, R>(array: readonly T[], f: (value: T, index: number) => R, indexOffset?: number): R[];
export declare function prepend<T>(array: readonly T[], value: T): ArrayNonEmpty<T>;
export declare function last<T>(arr: readonly T[]): T;
export declare function update<T>(arr: readonly T[], index: number, updater: Update<T>): readonly T[];
export declare function mod<T>(arr: readonly T[], index: number, f: (value: T) => T): readonly T[];
export declare function insert<T>(arr: readonly T[], index: number, value: T): T[];
export declare function tail<T>(arr: readonly T[]): T[];
export declare function init<T>(arr: readonly T[]): T[];
export declare function splice<T>(arr: readonly T[], start: number, deleteCount: number, ...items: T[]): T[];
export declare function copySparse<T>(arr: readonly T[]): T[];
export declare function mapSparse<T, T2>(arr: readonly T[], f: (value: T, index: number) => T2): T2[];

/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Addr, InstantiateMsg, ExecuteMsg, Uint128, GameConfig, QueryMsg, GameRoundStatus, GameRound, GameStatus, Game, Uint64, ArrayOfTupleOfAddrAndStringAndUint128 } from "./CwGameLifecycle.types";
export interface CwGameLifecycleMsg {
  contractAddress: string;
  sender: string;
  createGame: ({
    config
  }: {
    config: GameConfig;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  startGame: ({
    gameId
  }: {
    gameId: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  joinGame: ({
    gameId,
    telegramId
  }: {
    gameId: number;
    telegramId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  commitRound: ({
    amount,
    gameId,
    value
  }: {
    amount?: Uint128;
    gameId: number;
    value: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  commitRoundAsAdmin: ({
    amount,
    gameId,
    player,
    value
  }: {
    amount?: Uint128;
    gameId: number;
    player: Addr;
    value: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  revealRound: ({
    gameId,
    nonce,
    value
  }: {
    gameId: number;
    nonce: number;
    value: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  endGame: ({
    gameId
  }: {
    gameId: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class CwGameLifecycleMsgComposer implements CwGameLifecycleMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createGame = this.createGame.bind(this);
    this.startGame = this.startGame.bind(this);
    this.joinGame = this.joinGame.bind(this);
    this.commitRound = this.commitRound.bind(this);
    this.commitRoundAsAdmin = this.commitRoundAsAdmin.bind(this);
    this.revealRound = this.revealRound.bind(this);
    this.endGame = this.endGame.bind(this);
  }
  createGame = ({
    config
  }: {
    config: GameConfig;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_game: {
            config
          }
        })),
        funds: _funds
      })
    };
  };
  startGame = ({
    gameId
  }: {
    gameId: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          start_game: {
            game_id: gameId
          }
        })),
        funds: _funds
      })
    };
  };
  joinGame = ({
    gameId,
    telegramId
  }: {
    gameId: number;
    telegramId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          join_game: {
            game_id: gameId,
            telegram_id: telegramId
          }
        })),
        funds: _funds
      })
    };
  };
  commitRound = ({
    amount,
    gameId,
    value
  }: {
    amount?: Uint128;
    gameId: number;
    value: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          commit_round: {
            amount,
            game_id: gameId,
            value
          }
        })),
        funds: _funds
      })
    };
  };
  commitRoundAsAdmin = ({
    amount,
    gameId,
    player,
    value
  }: {
    amount?: Uint128;
    gameId: number;
    player: Addr;
    value: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          commit_round_as_admin: {
            amount,
            game_id: gameId,
            player,
            value
          }
        })),
        funds: _funds
      })
    };
  };
  revealRound = ({
    gameId,
    nonce,
    value
  }: {
    gameId: number;
    nonce: number;
    value: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          reveal_round: {
            game_id: gameId,
            nonce,
            value
          }
        })),
        funds: _funds
      })
    };
  };
  endGame = ({
    gameId
  }: {
    gameId: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          end_game: {
            game_id: gameId
          }
        })),
        funds: _funds
      })
    };
  };
}
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, InstantiateMsg, ExecuteMsg, Uint128, GameConfig, QueryMsg, GameRoundStatus, GameRound, GameStatus, Game, Uint64, ArrayOfTupleOfAddrAndStringAndUint128 } from "./Lifecycle.types";
export interface LifecycleReadOnlyInterface {
  contractAddress: string;
  getGame: ({
    gameId
  }: {
    gameId: number;
  }) => Promise<Game>;
  getLeaderboard: () => Promise<ArrayOfTupleOfAddrAndStringAndUint128>;
  getCurrentRound: ({
    gameId
  }: {
    gameId: number;
  }) => Promise<GameRound>;
  getGameStatus: ({
    gameId
  }: {
    gameId: number;
  }) => Promise<GameStatus>;
  getGamesCount: () => Promise<Uint64>;
}
export class LifecycleQueryClient implements LifecycleReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getGame = this.getGame.bind(this);
    this.getLeaderboard = this.getLeaderboard.bind(this);
    this.getCurrentRound = this.getCurrentRound.bind(this);
    this.getGameStatus = this.getGameStatus.bind(this);
    this.getGamesCount = this.getGamesCount.bind(this);
  }
  getGame = async ({
    gameId
  }: {
    gameId: number;
  }): Promise<Game> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_game: {
        game_id: gameId
      }
    });
  };
  getLeaderboard = async (): Promise<ArrayOfTupleOfAddrAndStringAndUint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_leaderboard: {}
    });
  };
  getCurrentRound = async ({
    gameId
  }: {
    gameId: number;
  }): Promise<GameRound> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_current_round: {
        game_id: gameId
      }
    });
  };
  getGameStatus = async ({
    gameId
  }: {
    gameId: number;
  }): Promise<GameStatus> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_game_status: {
        game_id: gameId
      }
    });
  };
  getGamesCount = async (): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_games_count: {}
    });
  };
}
export interface LifecycleInterface extends LifecycleReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createGame: ({
    config
  }: {
    config: GameConfig;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  startGame: ({
    gameId
  }: {
    gameId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  joinGame: ({
    gameId,
    telegramId
  }: {
    gameId: number;
    telegramId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  commitRound: ({
    amount,
    gameId,
    value
  }: {
    amount?: Uint128;
    gameId: number;
    value: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  commitRoundAsAdmin: ({
    amount,
    gameId,
    player,
    value
  }: {
    amount?: Uint128;
    gameId: number;
    player: Addr;
    value: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  revealRound: ({
    gameId,
    nonce,
    value
  }: {
    gameId: number;
    nonce: number;
    value: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  endGame: ({
    gameId
  }: {
    gameId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class LifecycleClient extends LifecycleQueryClient implements LifecycleInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createGame = this.createGame.bind(this);
    this.startGame = this.startGame.bind(this);
    this.joinGame = this.joinGame.bind(this);
    this.commitRound = this.commitRound.bind(this);
    this.commitRoundAsAdmin = this.commitRoundAsAdmin.bind(this);
    this.revealRound = this.revealRound.bind(this);
    this.endGame = this.endGame.bind(this);
  }
  createGame = async ({
    config
  }: {
    config: GameConfig;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_game: {
        config
      }
    }, fee, memo, _funds);
  };
  startGame = async ({
    gameId
  }: {
    gameId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      start_game: {
        game_id: gameId
      }
    }, fee, memo, _funds);
  };
  joinGame = async ({
    gameId,
    telegramId
  }: {
    gameId: number;
    telegramId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      join_game: {
        game_id: gameId,
        telegram_id: telegramId
      }
    }, fee, memo, _funds);
  };
  commitRound = async ({
    amount,
    gameId,
    value
  }: {
    amount?: Uint128;
    gameId: number;
    value: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      commit_round: {
        amount,
        game_id: gameId,
        value
      }
    }, fee, memo, _funds);
  };
  commitRoundAsAdmin = async ({
    amount,
    gameId,
    player,
    value
  }: {
    amount?: Uint128;
    gameId: number;
    player: Addr;
    value: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      commit_round_as_admin: {
        amount,
        game_id: gameId,
        player,
        value
      }
    }, fee, memo, _funds);
  };
  revealRound = async ({
    gameId,
    nonce,
    value
  }: {
    gameId: number;
    nonce: number;
    value: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      reveal_round: {
        game_id: gameId,
        nonce,
        value
      }
    }, fee, memo, _funds);
  };
  endGame = async ({
    gameId
  }: {
    gameId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      end_game: {
        game_id: gameId
      }
    }, fee, memo, _funds);
  };
}